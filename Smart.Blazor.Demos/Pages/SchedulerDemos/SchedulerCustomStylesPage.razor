@page "/scheduler-custom-styles"

<style>
    /* This is the CSS used in the demo */
    html,
    body {
        width: 100%;
        height: 100%;
        margin: 0 auto;
    }

    smart-scheduler {
        width: calc(100% - 300px);
        height: 800px;
    }
    
    @@media (max-width: 750px) {
        .smart-scheduler {
            width: 100%;
        }
    }

    .smart-scheduler.line-vertical-size-small {
        --smart-scheduler-day-week-view-vertical-line-size: 1px;
    }

    .smart-scheduler.line-horizontal-size-small {
        --smart-scheduler-day-week-view-hour-size: 1px;
    }

    .smart-scheduler.line-vertical-size-medium {
        --smart-scheduler-day-week-view-vertical-line-size: 2px;
    }

    .smart-scheduler.line-horizontal-size-medium {
        --smart-scheduler-day-week-view-hour-size: 2px;
    }

    .smart-scheduler.line-vertical-size-large {
        --smart-scheduler-day-week-view-vertical-line-size: 5px;
    }

    .smart-scheduler.line-horizontal-size-large {
        --smart-scheduler-day-week-view-hour-size: 5px;
    }
</style>

<Example Name="Scheduler">
    <Scheduler class="@lineClass" DataSource="dataRecords" Views="@views" View="SchedulerViewType.Week" FirstDayOfWeek="1" HourStart="7" HourEnd="21" TimelineDayScale="SchedulerTimelineDayScale.HalfHour" TimeRulerTicks="@timeRulerTicks" CurrentTimeIndicator="@currentTimeIndicator" ShadeUntilCurrentTime="@shadeUntilCurrentTime" />

    <div class="options">
        <div class="option">
            <h4>Day/Week Horizontal Line Size:</h4>
            <Input DataSource="inputSource" DropDownButtonPosition="DropDownButtonPosition.Right" @bind-Value="@value1" Readonly OnChange="OnHorizontalLineChange" />
        </div>
        <div class="option">
            <h4>Show Time Ruler Ticks:</h4>
            <SwitchButton OnChange="OnTimeRulerTicksChange" />
        </div>
        <div class="option">
            <h4>Show Current Time Indicator:</h4>
            <SwitchButton OnChange="OnCurrentTimeIndicatorChange" />
        </div>
        <div class="option">
            <h4>Shade Until Current Time:</h4>
            <SwitchButton OnChange="OnShadeUntilCurrentTimeChange" />
        </div>
    </div>
</Example>

@code {
    string value1 = "1";

    bool timeRulerTicks = false;
    bool currentTimeIndicator = false;
    bool shadeUntilCurrentTime = false;

    string lineClass = "";
    string horizontalLineClass = "";
  
    private string[] inputSource = new string[] { "1", "2", "5" };

    private List<SchedulerDataSource> dataRecords;

    private IEnumerable<SchedulerViewType> views = new List<SchedulerViewType>()
    {
        SchedulerViewType.Day,
        SchedulerViewType.Week,
        SchedulerViewType.Month
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = GetData();
    }

    private List<SchedulerDataSource> GetData()
    {
        DateTime today = DateTime.Today;

        List<SchedulerDataSource> data = new List<SchedulerDataSource>()
        {
            new SchedulerDataSource() {
                Label = "Apply Marketing Strategy",
                DateStart = new DateTime(today.Year, today.Month, today.Day, 0, 0, 0).AddDays(-1),
                DateEnd = new DateTime(today.Year, today.Month, today.Day, 0, 0, 0).AddDays(3),
                BackgroundColor = "#F9A825"
            },
            new SchedulerDataSource() {
                Label = "Google AdWords Strategy",
                DateStart = new DateTime(today.Year, today.Month, today.Day, 9, 0, 0),
                DateEnd = new DateTime(today.Year, today.Month, today.Day, 10, 30, 0),
                BackgroundColor = "#FF3D00"
            },
            new SchedulerDataSource() {
                Label = "New Brochures",
                DateStart = new DateTime(today.Year, today.Month, today.Day, 11, 30, 0).AddDays(-1),
                DateEnd = new DateTime(today.Year, today.Month, today.Day, 14, 15, 0).AddDays(-1),
                BackgroundColor = "#3F51B5"
            },
            new SchedulerDataSource() {
                Label = "Brochure Design Review",
                DateStart = new DateTime(today.Year, today.Month, today.Day, 13, 15, 0).AddDays(2),
                DateEnd = new DateTime(today.Year, today.Month, today.Day, 16, 15, 0).AddDays(2),
                BackgroundColor = "#616161"
            }
        };

        return data;
    }

    private void OnTimeRulerTicksChange(Event eventObj)
    {
        SwitchButtonChangeEventDetail args = eventObj["Detail"];

        timeRulerTicks = args.Value;
    }

    private void OnCurrentTimeIndicatorChange(Event eventObj)
    {
        SwitchButtonChangeEventDetail args = eventObj["Detail"];

        currentTimeIndicator = args.Value;
    }

    private void OnShadeUntilCurrentTimeChange(Event eventObj)
    {
        SwitchButtonChangeEventDetail args = eventObj["Detail"];

        shadeUntilCurrentTime = args.Value;
    }

    private void OnHorizontalLineChange(Event eventObj)
    {
        InputChangeEventDetail args = eventObj["Detail"];

        string size;
        switch(args.Value)
        {
            case "1": size = "small";
                break;
            case "2": size = "medium";
                break;
            default: size = "large";
                break;
        }

        horizontalLineClass = "line-horizontal-size-" + size;
        lineClass = horizontalLineClass;
    }
}
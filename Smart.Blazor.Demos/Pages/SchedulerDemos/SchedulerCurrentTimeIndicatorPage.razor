@page "/scheduler-current-time-indicator"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    /* This is the CSS used in the demo */
    html,
    body {
        width: 100%;
        height: 100%;
        margin: 0 auto;
    }

    smart-scheduler {
        width: calc(100% - 300px);
        height: 800px;
    }
    
    @@media (max-width: 750px) {
        .smart-scheduler {
            width: 100%;
        }
    }    
</style>

<Example Name="Scheduler">
    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Scheduler DataSource="dataRecords" CurrentTimeIndicator="@currentTimeIndicator" ShadeUntilCurrentTime="@shadeUntilCurrentTime" 
                   CurrentTimeIndicatorInterval="@currentTimeIndicatorInterval" Views="@views" View="SchedulerViewType.Day" FirstDayOfWeek="1" />

        <div class="options">
            <div class="option">
                <h4>Current Time Indicator:</h4>
                <SwitchButton Checked OnChange="OnCurrentTimeIndicatorChange" />
            </div>
            <div class="option">
                <h4>Shade Untill Current Time:</h4>
                <SwitchButton Checked OnChange="OnShadeUntilCurrentTimeChange" />
            </div>
            <div class="option">
                <h4>Current Time Indicator/Shader Update Interval:</h4>
                <NumberInput Min="1" Value="1" OnChange="OnCurrentTimeIndicatorIntervalChange"/>
            </div>
        </div>
    }
</Example>

@code {
    bool currentTimeIndicator = true;
    bool shadeUntilCurrentTime = true;
    int currentTimeIndicatorInterval = 1;

    private List<SchedulerDataSource> dataRecords;

    private IEnumerable<SchedulerViewType> views = new List<SchedulerViewType>()
    {
        SchedulerViewType.Day,
        SchedulerViewType.Week,
        SchedulerViewType.Month,
        SchedulerViewType.TimelineDay,
        SchedulerViewType.TimelineWeek,
        SchedulerViewType.TimelineMonth
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = GetData();
    }

    private List<SchedulerDataSource> GetData()
    {
        DateTime today = DateTime.Today;

        List<SchedulerDataSource> data = new List<SchedulerDataSource>()
        {
             new SchedulerDataSource() {
                Label = "Google AdWords Strategy",
                DateStart = new DateTime(today.Year, today.Month, today.Day, 9, 0, 0),
                DateEnd = new DateTime(today.Year, today.Month, today.Day, 10, 30, 0),
                BackgroundColor = "#EA80FC"
            },
            new SchedulerDataSource() {
                Label = "New Brochures",
                DateStart = new DateTime(today.Year, today.Month, today.Day, 11, 30, 0).AddDays(-1),
                DateEnd = new DateTime(today.Year, today.Month, today.Day, 14, 15, 0).AddDays(-1),
                BackgroundColor = "#FF9E80"
            },
            new SchedulerDataSource() {
                Label = "Brochure Design Review",
                DateStart = new DateTime(today.Year, today.Month, today.Day, 13, 15, 0).AddDays(2),
                DateEnd = new DateTime(today.Year, today.Month, today.Day, 16, 15, 0).AddDays(2),
                BackgroundColor = "#039BE5"
            }
        };

        return data;
    }

    private void OnCurrentTimeIndicatorChange(Event eventObj)
    {
        SwitchButtonChangeEventDetail args = eventObj["Detail"];

        currentTimeIndicator = args.Value;
    }

    private void OnShadeUntilCurrentTimeChange(Event eventObj)
    {
        SwitchButtonChangeEventDetail args = eventObj["Detail"];

        shadeUntilCurrentTime = args.Value;
    }

    private void OnCurrentTimeIndicatorIntervalChange(Event eventObj)
    {
        NumberInputChangeEventDetail args = eventObj["Detail"];

        currentTimeIndicatorInterval = args.Value;
    }
}
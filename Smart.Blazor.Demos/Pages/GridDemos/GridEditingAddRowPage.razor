@page "/grid-editing-add-row"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    smart-grid {
        width: 60%;
    }

    @@media only screen and (max-width: 700px) {
        smart-grid {
            width: 100%;
        }
    }

    @@media (min-width: 576px) {
        .col-sm-6 {
            max-width: initial;
        }
    }
</style>
<Example Name="Grid">
    <h1>Add Row in Data Grid</h1>
    <p>
        The 'Add New Row' UI element enables users to quickly add rows to the Grid with a single click. This example shows how to display and customize the positioning of the 'Add New Row' element.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid @ref="grid" DataSource="dataRecords" Appearance="@appearance" Editing="@editing">
            <Columns>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product" Editor="@autoCompleteEditor"></Column>
                <Column DataField="Expired" DataType="boolean" Label="Expired" Template="@checkBoxEditor" Editor="@checkBoxEditor"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number" Editor="@numberInputEditor" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="Price" Label="Unit Price" DataType="number" Editor="@numberInputEditor" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
            </Columns>
        </Grid>

        <div class="options">
            <div class="caption">Position</div>
            <div class="option">
                <RadioButton OnCheckValue="OnTopCheck">Top</RadioButton>
                <RadioButton OnCheckValue="OnBothCheck" Checked="true">Both</RadioButton>
                <RadioButton OnCheckValue="OnBottomCheck">Bottom</RadioButton>
            </div>
        </div>
    }
</Example>

@code {
    Grid grid;
    private string autoCompleteEditor = "autoComplete";
    private string checkBoxEditor = "checkBox";
    private string numberInputEditor = "numberInput";

    GridAppearance appearance = new GridAppearance() { ShowRowHeaderNumber = true };

    GridEditing editing = new GridEditing()
    {
        Enabled = true,
        Action = GridEditingAction.Click,
        AddDialog = new Dialog() { Enabled = true },
        AddNewRow = new GridEditingAddNewRow()
        {
            Visible = true,
            Position = LayoutPosition.Both
        }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(15);
    }

    private void OnTopCheck()
    {
        grid.Editing.AddNewRow.Position = LayoutPosition.Near;
    }

    private void OnBothCheck()
    {
        grid.Editing.AddNewRow.Position = LayoutPosition.Both;
    }

    private void OnBottomCheck()
    {
        grid.Editing.AddNewRow.Position = LayoutPosition.Far;
    }
}

@page "/grid-grid-chart-dynamic-data"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }
</style>

<Example Name="Grid">
    <h1>Overview</h1>

    <p>This example shows a Grid displaying dynamic trading data, which is also reflected on a Chart.</p>

        <template id="changeTemplate">
            <div style="width: 100%; height:100%;">
                <div smart-if="value < 0">
                    <div style="padding: 4px; background-color: rgba(229, 57, 53, 0.5);">{{value}} %</div>
                </div>
                <div smart-if="value > 0">
                    <div style="padding: 4px; background-color: rgba(67, 160, 71, 0.5);">{{value}} %</div>
                </div>
            </div>
        </template>

        <template id="dateTemplate">
            <div style="width: 100%; height:100%;">
                <div smart-if="value = Today">
                    <div style="padding: 4px;">{{value::HH:mm:ss}}</div>
                </div>
                <div smart-else>
                    <div style="padding: 4px;">{{value::dd-MM-yyyy}}</div>
                </div>
            </div>
        </template>

        <Grid @ref="grid" DataSource="GetData()" Appearance="@appearance" Behavior="@behavior" OnReady="OnGridReady" Style="width: 100%; height:auto;">
            <Columns>
                <Column DataField="commodity" Label="Commodity"></Column>
                <Column DataField="price" Label="Price"></Column>
                <Column DataField="week" Label="Weekly" CellsAlign="HorizontalAlignment.Right" Template="changeTemplateID"></Column>
                <Column DataField="month" Label="Monthly" CellsAlign="HorizontalAlignment.Right" Template="changeTemplateID"></Column>
                <Column DataField="year" Label="Yearly" CellsAlign="HorizontalAlignment.Right" Template="changeTemplateID"></Column>
                <Column DataField="date" Label="Date" CellsAlign="HorizontalAlignment.Right" Template="dateTemplateID"></Column>
            </Columns>
        </Grid>

        <Chart @ref="chart" Style="width: 100%; height: 300px;" DataSource="GetData()" Caption="" Description="" ShowLegend="false" ShowToolTips="false"
               Padding="@padding" XAxis="xAxis" ColorScheme="ChartColorScheme.Scheme01" SeriesGroups="@seriesGroups">
        </Chart>
</Example>

@code {
    Grid grid;
    Chart chart;

    string changeTemplateID = "#changeTemplate";
    string dateTemplateID = "#dateTemplate";

    GridAppearance appearance = new GridAppearance()
    {
        AlternationCount = 2,
        ShowColumnLines = false,
        ShowColumnHeaderLines = false
    };

    GridBehavior behavior = new GridBehavior()
    {
        ColumnResizeMode = GridResizeMode.GrowAndShrink
    };

    private static DateTime today = DateTime.Today;

    private List<Dictionary<string, object>> GetData()
    {
        List<Dictionary<string, object>> dataRecords = new List<Dictionary<string, object>>
        {
            new Dictionary<string, object>() { { "commodity", "Crude Oil" }, { "price", 38.19 }, { "week", 2.63 }, { "month", 58.53 }, { "year", -28.16 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Brent" }, { "price", 40.52 }, { "week", 2.04 }, { "month", 37.02 }, { "year", -34.82 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Natural Gas" }, { "price", 1.737 }, { "week", -4.35 }, { "month", -4.92 }, { "year", -27.55 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Gasoline" }, { "price", 1.2073 }, { "week", 8.36 }, { "month", 29.60 }, { "year", -31.07 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Gold" }, { "price", 1720 }, { "week", 1.30 }, { "month", 1.43 }, { "year", 29.67 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Silver" }, { "price", 17.66 }, { "week", 0.20 }, { "month", 13.83 }, { "year", 20.41 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Wheat" }, { "price", 506.25 }, { "week", -0.93 }, { "month", -1.65 }, { "year", -1.98 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Palm Oil" }, { "price", 2306 }, { "week", -5.69 }, { "month", 2.40 }, { "year", -5.57 }, { "date", DateTime.Today.AddDays(-1) } },
            new Dictionary<string, object>() { { "commodity", "Cheese" }, { "price", 2.162 }, { "week", 65.67 }, { "month", 72.96 }, { "year", 27.70 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Rise" }, { "price", 16.32 }, { "week", -20.64 }, { "month", -2.91 }, { "year", 40.99 }, { "date", DateTime.Today.AddDays(-1) } },
            new Dictionary<string, object>() { { "commodity", "Copper" }, { "price", 2.618 }, { "week", 5.46 }, { "month", 10.32 }, { "year", -1.87 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Steel" }, { "price", 3716 }, { "week", 3.65 }, { "month", 9.07 }, { "year", -0.91 }, { "date", DateTime.Today.AddDays(-2) } },
            new Dictionary<string, object>() { { "commodity", "Aluminium" }, { "price", 1605.50 }, { "week", 3.78 }, { "month", 7.21 }, { "year", -9.70 }, { "date", today } },
            new Dictionary<string, object>() { { "commodity", "Tin" }, { "price", 16922 }, { "week", 5.70 }, { "month", 11.04 }, { "year", -11.68 }, { "date", DateTime.Today.AddDays(-2) } }
        };

        return dataRecords;
    }

    Padding padding = new Padding() { Left = 5, Top = 15, Right = 5, Bottom = 5 };

    ChartXAxis xAxis = new ChartXAxis()
    {
        DataField = "commodity",
        GridLines = new ChartLines() { Visible = true, DashStyle = "4,4" }
    };

    List<ChartSeriesGroup> seriesGroups = new List<ChartSeriesGroup>()
    {
        new ChartSeriesGroup()
        {
            Type = ChartType.Column,
            ColumnsGapPercent = 50,
            SeriesGapPercent = 0,
            ValueAxis = new ChartValueAxis()
            {
                LogarithmicScale = true,
                LogarithmicScaleBase = 10,
                DisplayValueAxis = true,
                AxisSize = "auto",
                GridLines = new ChartLines() { Visible = true, DashStyle = "4,4" }
            },
            Series = new List<ChartSeriesGroupSerie>()
            {
                new ChartSeriesGroupSerie()
                {
                    DataField = "price",
                    DisplayText = "Price",
                    Labels = new ChartLabels() { Visible = false, VerticalAlignment = VerticalAlignment.Top, Offset = new Offset() { X = 0, Y= -50 } }
                },
                new ChartSeriesGroupSerie()
                {
                    DataField = "month",
                    DisplayText = "Monthly",
                    Labels = new ChartLabels() { Visible = false, VerticalAlignment = VerticalAlignment.Top, Offset = new Offset() { X = 0, Y= -50 } }
                }
            }
        }
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void OnGridReady(Grid grid)
    {
        SetInterval(updateData, TimeSpan.FromSeconds(1.2));
    }

    private void updateData()
    {
        Random random = new Random();

        List<Dictionary<string, object>> dataRecords = GetData();

        for (int i = 0; i < dataRecords.Count; i++)
        {
            double oldValue = double.Parse(dataRecords[i]["price"].ToString());
            double valueChange = (random.NextDouble() > 0.5 ? 1 : -1) * oldValue * ((random.NextDouble() * 15 + 1) / 100);
            double newValue = Math.Max(1, oldValue + valueChange);

            dataRecords[i]["price"] = Math.Round(newValue, 2);
        }

        grid.DataSource = dataRecords;
        chart.DataSource = dataRecords;
    }

    public static async Task SetInterval(Action action, TimeSpan timeout)
    {
        await Task.Delay(timeout).ConfigureAwait(false);
        action();
        SetInterval(action, timeout);
    }
}

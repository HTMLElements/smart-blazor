@page "/grid-filtering-hierarchical-data"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    smart-grid {
        height: auto;
        width: 100%;
    }
</style>
<Example Name="Grid">
    <p>
        DataGrid supports Filtering of hierarchical data. When a child element is visible, all its ancestors should also be visible.
        The filter applied to the DataGrid is [ 'FirstName', 'contains Michael or contains Nancy' ], which means it will display all records with 'FirstName' equal to 'Michael' or 'Nancy'. 
        As 'Michael' and 'Nancy' are sub-records of 'Andrew' and 'Steven', they are displayed in the view.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid @ref="grid" DataSource="dataRecords" DataSourceSettings="@dataSourceSettings" 
              Sorting="@sorting" Filtering="@filtering" Behavior="@behavior" OnRowInit="OnRowInit">
            <Columns>
                <Column DataField="FirstName" Label="FirstName" Width="200"></Column>
                <Column DataField="LastName" Label="LastName" Width="200"></Column>
                <Column DataField="Title" Label="Title" Width="160"></Column>
                <Column DataField="BirthDate" Label="Birth Date" DataType="date" CellsFormat="d" Width="120"></Column>
                <Column DataField="HireDate" Label="Hire Date" DataType="date" CellsFormat="d" Width="120"></Column>
                <Column DataField="Address" Label="Address" Width="250"></Column>
                <Column DataField="City" Label="City" Width="120"></Column>
                <Column DataField="Country" Label="Country"></Column>
            </Columns>
        </Grid>
    }
</Example>

@code {
    private Grid grid;

    GridDataSourceSettings dataSourceSettings = new GridDataSourceSettings()
    {
        KeyDataField = "EmployeeID",
        ParentDataField = "ReportsTo",
        Id = "EmployeeID"
    };

    GridSorting sorting = new GridSorting() { Enabled = true };

    GridFiltering filtering = new GridFiltering()
    {
        Enabled = true,
        Filter = new string[][]
        {
            new string[] { "FirstName", "contains Michael or contains Nancy" },
            new string[] { "Quantity", ">= 3 and >= 8" }
        }
    };

    GridBehavior behavior = new GridBehavior() { ColumnResizeMode = GridResizeMode.GrowAndShrink };

    private void OnRowInit(object eventObj)
    {
        // grid.Rows.ToList()[0].IsExpanded = true;
    }

    private List<EmployeeRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateEmployeesData();
    }
}

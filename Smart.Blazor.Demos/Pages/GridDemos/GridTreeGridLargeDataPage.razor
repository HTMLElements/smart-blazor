@page "/grid-tree-grid-large-data"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
</style>
<Example Name="Grid">
    <h1>TreeGrid data binding to large data set</h1>
    <p>The TreeGrid in this demo is loaded with a large data set.</p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid DataSource="dataRecords" DataSourceSettings="@dataSourceSettings" Behavior="@behavior">
            <Columns>
                <Column DataField="Name" Label="Order Name" Align="HorizontalAlignment.Center" Width="200"></Column>
                <Column DataField="Customer" Label="Customer" Align="HorizontalAlignment.Center" Width="200"></Column>
                <Column DataField="Price" Label="Price" DataType="number" Align="HorizontalAlignment.Center" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2" Width="80"></Column>
                <Column DataField="Date" Label="Order Date" DataType="date" Align="HorizontalAlignment.Center" CellsFormat="dd-MMMM-yyyy hh:mm"></Column>               
            </Columns>
        </Grid>
    }
</Example>

@code {
    GridDataSourceSettings dataSourceSettings = new GridDataSourceSettings()
    {
        Id = "Id",
        KeyDataField = "Id",
        ParentDataField = "ParentId"
    };

    GridBehavior behavior = new GridBehavior() { ColumnResizeMode = GridResizeMode.GrowAndShrink };
    GridSorting sorting = new GridSorting() { Enabled = true };
    GridFiltering filtering = new GridFiltering() { Enabled = true };

    private List<OrderRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateOrdersData(10);
    }
}

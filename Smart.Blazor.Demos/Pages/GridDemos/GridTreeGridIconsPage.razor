@page "/grid-tree-grid-icons"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    smart-grid {
        height: auto;
        width: 100%;
    }

    smart-grid-row {
        height: 40px;
        font-size: 16px;
    }

    smart-grid-column {
        font-size: 14px;
    }

        smart-grid-column .smart-icon {
            font-family: 'FontAwesome';
            font-size: 16px;
        }

    smart-grid-cell .custom-icon {
        margin-left: 4px;
        margin-right: 4px;
        font-family: 'FontAwesome';
    }
</style>
<Example Name="Grid">
    <p>
        The Tree Grid can display icons in the cells by using the column's formatFunction.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <template id="firstNameTemplate">
            <div style="width: 100%; height:100%;">
                <span class="custom-icon fa-user"></span>{{value}}
            </div>
        </template>
            
        <Grid DataSource="dataRecords" DataSourceSettings="@dataSourceSettings" Selection="@selection"
              Sorting="@sorting" Filtering="@filtering" Behavior="@behavior">
            <Columns>
                <Column DataField="FirstName" Label="FirstName" Width="200" ShowIcon="true" Icon="fa-user" Template="@templateId"></Column>
                <Column DataField="LastName" Label="LastName" Width="200"></Column>
                <Column DataField="Title" Label="Title" Width="160"></Column>
                <Column DataField="BirthDate" Label="Birth Date" DataType="date" CellsFormat="d" Width="120"></Column>
                <Column DataField="HireDate" Label="Hire Date" DataType="date" CellsFormat="d" Width="120"></Column>
                <Column DataField="Address" Label="Address" Width="250"></Column>
                <Column DataField="City" Label="City" Width="120"></Column>
                <Column DataField="Country" Label="Country"></Column>
            </Columns>
        </Grid>
    }
</Example>

@code {
    string templateId = "#firstNameTemplate";

    GridDataSourceSettings dataSourceSettings = new GridDataSourceSettings()
    {
        KeyDataField = "EmployeeID",
        ParentDataField = "ReportsTo",
        Id = "EmployeeID"
    };

    GridBehavior behavior = new GridBehavior() { ColumnResizeMode = GridResizeMode.GrowAndShrink };
    GridSorting sorting = new GridSorting() { Enabled = true };
    GridFiltering filtering = new GridFiltering() { Enabled = true };
    GridSelection selection = new GridSelection()
    {
        Enabled = true,
        Mode = GridSelectionMode.Extended
    };

    private List<EmployeeRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateEmployeesData();
    }
}

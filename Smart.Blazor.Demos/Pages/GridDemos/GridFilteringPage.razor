@page "/grid-filtering"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    smart-grid {
        width: 100%;
    }    
</style>
<Example Name="Grid">
    <p>
        The filtering feature is enabled by using the <strong>filtering</strong> property. If the <strong>enabled</strong> sub-property is set to <strong>true</strong>,
        the column's filtering menu is enabled. Filter Menu displays Inputs, Numeric Inputs or Date Pickers depending on the column's type. The column's <strong>allowFilter</strong> 
        determines whether a column is filterable. The Grid has options to customize the visibility of filter icons, filter column background, custom filter icons, enabled/disable filter menu animations.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid DataSource="dataRecords" Sorting="@sorting" Filtering="@filtering">
            <Columns>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="Price" Label="Unit Price" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
                <Column DataField="Total" Label="Total" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
            </Columns>
        </Grid>
    }
</Example>

@code {
    GridSorting sorting = new GridSorting()
    {
        Enabled = true,
        Mode = GridSortingMode.One
    };

    GridFiltering filtering = new GridFiltering()
    {
        Enabled = true,
        Filter = new string[][]
        {
            new string[] { "FirstName", "contains Andrew or contains Nancy" },
            new string[] { "Quantity", ">= 3 and >= 8" }
        }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(3000);
    }
}

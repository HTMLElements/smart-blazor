@page "/grid-editing-command-column-custom"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    @@media only screen and (max-width: 700px) {
        smart-grid {
            width: 100%;
        }
    }
</style>
<Example Name="Grid">
    <h1>Command Column with Custom Command in Data Grid</h1>
    <p>
        The command column editing option allows you to customize the built-in commands, but also to implement a custom command. This example shows how to achieve that.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid DataSource="dataRecords" Editing="@editing">
            <Columns>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product" Editor="@autoCompleteEditor"></Column>
                <Column DataField="Expired" Label="Expired" DataType="boolean" Template="@checkBoxEditor" Editor="@checkBoxEditor"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number" Editor="@numberInputEditor" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="Price" Label="Unit Price" DataType="number" Editor="@numberInputEditor" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
            </Columns>
        </Grid>
    }
</Example>

@code {
    private string autoCompleteEditor = "autoComplete";
    private string checkBoxEditor = "checkBox";
    private string numberInputEditor = "numberInput";

    GridEditing editing = new GridEditing()
    {
        Enabled = true,
        Action = GridEditingAction.None,
        Mode = GridEditingMode.Row,
        CommandColumn = new GridEditingCommandColumn()
        {
            Visible = true,
            DisplayMode = GridCommandDisplayMode.Icon,
            DataSource = new GridEditingCommandColumnDataSource()
            {
                CommandColumnDelete = new GridCommand() { Visible = false },
                CommandColumnCustom = new GridCommand()
                {
                    Icon = "smart-icon-ellipsis-vert",
                    Command = "test",
                    Visible = true,
                    Label = "Text"
                }
            }
        }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(1000);
    }

    public void test()
    {
        Console.WriteLine("test");
    }
}

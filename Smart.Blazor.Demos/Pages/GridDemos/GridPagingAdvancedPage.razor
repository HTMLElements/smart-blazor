@page "/grid-paging-advanced"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    smart-grid {
        width: 60%;
        height: 400px;
    }
</style>
<Example Name="Grid">
    <p>Paging in Smart Grid is highly customizable. Use the options on the right to dynamically customize the Grid pager.</p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid @ref="grid" DataSource="dataRecords" Paging="@paging" Pager="@pager">
            <Columns>
                <Column DataField="Id" Label="Id" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product Name"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="Price" Label="Unit Price" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
                <Column DataField="Total" Label="Total" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
            </Columns>
        </Grid>

        <div class="options">
            <div class="caption">Settings</div>
            <div class="option">
                <CheckBox @ref="showBottomPager" @bind-Checked="bottomPagerChecked" OnChange="OnShowBottomPagerChange">Show Bottom Pager</CheckBox>
            </div>
            <div class="option">
                <CheckBox Disabled="@pageSizeNearPositionDisabled" OnChange="OnPageSizeNearPositionChange">Page Size Near Position</CheckBox>
            </div>
            <div class="option">
                <CheckBox OnChange="OnPageIndexCountChange">Page Index Count to 3</CheckBox>
            </div>
            <div class="option">
                <CheckBox Disabled="@navButtonsNearPositionDisabled" OnChange="OnNavButtonsNearPositionChange">Nav Buttons Near Position</CheckBox>
            </div>
            <div class="option">
                <CheckBox Disabled="@navInputNearPositionDisabled" OnChange="OnNavInputNearPositionChange">Nav Input Near Position</CheckBox>
            </div>
            <div class="option">
                <CheckBox Disabled="@summaryNearPositionDisabled" OnChange="OnSummaryNearPositionChange">Summary Near Position</CheckBox>
            </div>
            <div class="option">
                <CheckBox OnChange="OnShowPagerSummaryChange">Show Pager Summary</CheckBox>
            </div>
            <div class="option">
                <CheckBox @ref="showTopPager" @bind-Checked="topPagerChecked" OnChange="OnShowTopPagerChange">Show Top Pager</CheckBox>
            </div>
            <div class="option">
                <CheckBox @bind-Checked="showPageSizeSelector" OnChange="OnShowPageSizeSelectorChange">Show Page Size Selector</CheckBox>
            </div>
            <div class="option">
                <CheckBox @bind-Checked="showPrevNextButtons" OnChange="OnShowPrevNextNavButtonsChange">Show Prev/Next Nav Buttons</CheckBox>
            </div>
            <div class="option">
                <CheckBox @bind-Checked="showFirstLastButtons" OnChange="OnShowFirstLastNavButtonsChange">Show First/Last Nav Buttons</CheckBox>
            </div>
            <div class="option">
                <CheckBox Disabled="@showNavButtonsAsLabelsDisabled" OnChange="OnShowNavButtonsAsLabelsChange">Show Nav Buttons as Labels</CheckBox>
            </div>
            <div class="option">
                <CheckBox OnChange="OnShowNavInputChange">Show Nav Input</CheckBox>
            </div>
            <div class="option">
                <CheckBox @bind-Checked="showPagerIndexSelectors" OnChange="OnShowPagerIndexSelectorsChange">Show Pager Index Selectors</CheckBox>
            </div>
            <div class="option">
                <CheckBox @bind-Checked="showPagerEllipsis" OnChange="OnShowPagerEllipsisChange">Show Pager Ellipsis</CheckBox>
            </div>
        </div>
    }
</Example>

@code {
    Grid grid;

    CheckBox showTopPager;
    CheckBox showBottomPager;

    bool bottomPagerChecked = true;
    bool topPagerChecked = false;

    bool navInputNearPositionDisabled = true;
    bool summaryNearPositionDisabled = true;
    bool navButtonsNearPositionDisabled = false;
    bool showNavButtonsAsLabelsDisabled = false;
    bool showPageSizeSelector = true;
    bool pageSizeNearPositionDisabled = false;
    bool showPagerIndexSelectors = true;
    bool showPagerEllipsis = true;
    bool showFirstLastButtons = true;
    bool showPrevNextButtons = true;

    GridPaging paging = new GridPaging()
    {
        Enabled = true,
        PageSize = 10,
        PageIndex = 0
    };

    GridPager pager = new GridPager()
    {
        Visible = true,
        PageSizeSelector = new GridPagerPageSizeSelector() { Visible = true },
        PageIndexSelectors = new GridPagerPageIndexSelectors() { DataSource = 3 }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(1000);
    }

    private void OnShowTopPagerChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        bool isTopPagerVisible = args.Value;
        bool isBottomPagerVisible = showBottomPager.Checked;

        pager.Visible = true;

        if (isTopPagerVisible && isBottomPagerVisible)
        {
            pager.Position = LayoutPosition.Both;
        }
        else if (isTopPagerVisible)
        {
            pager.Position = LayoutPosition.Near;
        }
        else if (isBottomPagerVisible)
        {
            pager.Position = LayoutPosition.Far;
        }
        else
        {
            pager.Visible = false;
        }
    }

    private void OnShowBottomPagerChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        bool isTopPagerVisible = showTopPager.Checked;
        bool isBottomPagerVisible = args.Value;

        pager.Visible = true;

        if (isTopPagerVisible && isBottomPagerVisible)
        {
            pager.Position = LayoutPosition.Both;
        }
        else if (isTopPagerVisible)
        {
            pager.Position = LayoutPosition.Near;
        }
        else if (isBottomPagerVisible)
        {
            pager.Position = LayoutPosition.Far;
        }
        else
        {
            pager.Visible = false;
        }
    }


    private void OnPageSizeNearPositionChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.PageSizeSelector.Position = args.Value ? Position.Near : Position.Far;
    }

    private void OnPageIndexCountChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.PageIndexSelectors.DataSource = args.Value ? 3 : 5;
    }

    private void OnNavButtonsNearPositionChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.NavigationButtons.Position = args.Value ? LayoutPosition.Near : LayoutPosition.Far;
    }

    private void OnNavInputNearPositionChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.NavigationInput.Position = args.Value ? Position.Near : Position.Far;
    }

    private void OnSummaryNearPositionChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.Summary.Position = args.Value ? Position.Near : Position.Far;
    }

    private void OnShowPagerSummaryChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.Summary.Visible = args.Value;
        summaryNearPositionDisabled = !args.Value;
    }

    private void OnShowPageSizeSelectorChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.PageSizeSelector.Visible = args.Value;
        pageSizeNearPositionDisabled = !args.Value;
    }

    private void OnShowPrevNextNavButtonsChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.NavigationButtons.PrevNextButtons.Visible = args.Value;
        if (!pager.NavigationButtons.PrevNextButtons.Visible && !pager.NavigationButtons.FirstLastButtons.Visible)
        {
            navButtonsNearPositionDisabled = true;
            showNavButtonsAsLabelsDisabled = true;
        }
        else
        {
            navButtonsNearPositionDisabled = false;
            showNavButtonsAsLabelsDisabled = false;
        }
    }

    private void OnShowFirstLastNavButtonsChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.NavigationButtons.FirstLastButtons.Visible = args.Value;
        if (!pager.NavigationButtons.PrevNextButtons.Visible && !pager.NavigationButtons.FirstLastButtons.Visible)
        {
            navButtonsNearPositionDisabled = true;
            showNavButtonsAsLabelsDisabled = true;
        }
        else
        {
            navButtonsNearPositionDisabled = false;
            showNavButtonsAsLabelsDisabled = false;
        }
    }

    private void OnShowNavButtonsAsLabelsChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.NavigationButtons.Labels.Visible = args.Value;
        StateHasChanged();
    }

    private void OnShowNavInputChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.NavigationInput.Visible = args.Value;
        navInputNearPositionDisabled = !args.Value;
    }

    private void OnShowPagerIndexSelectorsChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.PageIndexSelectors.Visible = args.Value;
        StateHasChanged();
    }

    private void OnShowPagerEllipsisChange(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        pager.AutoEllipsis = args.Value ? GridPagerAutoEllipsis.Both : GridPagerAutoEllipsis.None;
        StateHasChanged();
    }
}
@page "/grid-basic"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }
</style>
<Example Name="Grid">
    <h1>Customers</h1>

    <p>This component demonstrates fetching data from a service.</p>


    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <template id="quantityTemplate">
            <div style="width: 100%; height:100%;">
                <div smart-if="value >= 7">
                    <div style="padding-left: 4px; color: green;">{{value}}</div>
                </div>
                <div smart-if="value >= 5">
                    <div style="padding-left: 4px; color: purple;">{{value}}</div>
                </div>
                <div smart-if="value <= 3">
                    <div style="padding-left: 4px; color: red;">{{value}}</div>
                </div>
                <div smart-else>
                    <div style="padding-left: 4px; color: blue;">{{value}}</div>
                </div>
            </div>
        </template>

        <Grid DataSource="dataRecords" Sorting="@sorting" Appearance="@appearance" Selection="@selection">
            <Columns>
                <Column SortOrder="GridColumnSortOrder.Asc" DataField="FirstName" Label="First Name" >

                </Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product Name"></Column>
                <Column DataField="Price" Label="Price"></Column>
                <Column DataField="Quantity" Label="Quantity" Template="templateID"></Column>
                <Column DataField="TimeOfPurchase" Label="Time Of Purchase"></Column>
            </Columns>
        </Grid>
    }
</Example>

@code {
    string templateID = "#quantityTemplate";
    GridSorting sorting = new GridSorting() { Enabled = true };
    GridAppearance appearance = new GridAppearance() { AlternationCount = 2 };
    GridSelection selection = new GridSelection()
    {
        Enabled = true,
        Mode = GridSelectionMode.Extended,
        CheckBoxes = new GridSelectionCheckBoxes()
        {
            Enabled = true
        }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(1000);
    }
}
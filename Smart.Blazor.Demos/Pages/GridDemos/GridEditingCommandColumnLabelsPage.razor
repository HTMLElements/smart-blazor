@page "/grid-editing-command-column-labels"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    @@media only screen and (max-width: 700px) {
        smart-grid {
            width: 100%;
        }
    }
</style>
<Example Name="Grid">
    <h1>Command Column in Data Grid</h1>
    <p>
        One of the Data Grid editing features is the command column. The command column can be used to 'Edit' or 'Delete' a row. It can be positioned as first or last column in the Grid.
        The Column width is 'auto' by default, but it can be fixed as well. The 'commands' can be 'icons', 'labels' or 'icons and labels'.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid DataSource="dataRecords" Appearance="@appearance" Editing="@editing">
            <Columns>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product" Editor="@autoCompleteEditor"></Column>
                <Column DataField="Expired" Label="Expired" DataType="boolean" Template="@checkBoxEditor" Editor="@checkBoxEditor"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number" Editor="@numberInputEditor" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="Price" Label="Unit Price" DataType="number" Editor="@numberInputEditor" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
            </Columns>
        </Grid>
    }
</Example>

@code {
    private string autoCompleteEditor = "autoComplete";
    private string checkBoxEditor = "checkBox";
    private string numberInputEditor = "numberInput";

    GridAppearance appearance = new GridAppearance() { ShowRowHeaderNumber = true };

    GridEditing editing = new GridEditing()
    {
        Enabled = true,
        Action = GridEditingAction.None,
        Mode = GridEditingMode.Row,
        CommandColumn = new GridEditingCommandColumn()
        {
            Visible = true,
            DisplayMode = GridCommandDisplayMode.Label,
            DataSource = new GridEditingCommandColumnDataSource()
            {
                CommandColumnDelete = new GridCommand() { Visible = false }
            }
        }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(1000);
    }
}

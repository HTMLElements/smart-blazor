@page "/grid-row-resize"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }
    /* This is the CSS used in the demo */
    @@media only screen and (max-width: 400px) {
        smart-grid {
            width: 100%;
        }
    }

    smart-grid {
        max-width: 600px;
    }
</style>

    The Data grid component supports row resizing in two levels - Grid's 'rowResizeMode' property and optionally 'allowResize' Smart.Grid.Row property. To enable row resizing, you need to set the 'rowResizeMode' property to 'split' or 'growAndShrink'.<br /><br /> In the 'split' mode, when you resize a row, the next row's height is also affected and the total height of both rows remains constant.<br />In the 'growAndShrink' mode, the resized row grows or shrinks.
    <br />Each row has 'minHeight' and 'maxHeight' properties which allow you to restrict the resizing of specific rows. You can disable the resize of specific row by setting its 'allowResize' property to false. Resizing requiest a visible Row header which is enabled by setting the 'appearance.showRowHeaderNumber' or 'appearance.showRowHeader' properties to 'true'.<br />To start row's resize, move the mouse cursor over the rows header and at the bottom of a header cell, the cursor is
    changed to a row resize cursor. Press the mouse button and Drag to resize. When you release the mouse button, the row is resized.

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid @ref="grid" Appearance="@appearance" Layout="@gridLayout" DataSource="@dataRecords" Behavior="@behavior">
            <Columns>
                <Column DataField="FirstName" Label="First Name" Width="150"></Column>
                <Column DataField="LastName" Label="Last Name" Width="150"></Column>
                <Column DataField="ProductName" Label="Product" Width="200"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" Width="100"></Column>
                <Column DataField="Price" Label="Unit Price" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2" Width="100"></Column>
                <Column DataField="Total" Label="Total" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
            </Columns>
        </Grid>

        <div class="options">
            <div class="caption">
                Row Resize Mode
            </div>
            <div class="option">
                <RadioButton @ref="noneRadioBtn" Checked="resizeNone" OnCheckValue="OnChange">None</RadioButton><br />
                <RadioButton @ref="splitRadioBtn" Checked="resizeSplit" OnCheckValue="OnChangeSplit">Split</RadioButton><br />
                <RadioButton @ref="growShrinkRadioBtn" Checked="resizeGrow" OnCheckValue="OnChangeGrow">Grow and Shrink</RadioButton><br />
            </div>
        </div>
    }


@code {
    private Grid grid;
    private RadioButton noneRadioBtn;
    private RadioButton splitRadioBtn;
    private RadioButton growShrinkRadioBtn;
    private bool resizeNone;
    private bool resizeSplit;
    private bool resizeGrow = true;

    GridBehavior behavior = new GridBehavior() { RowResizeMode = GridResizeMode.GrowAndShrink };
    GridAppearance appearance = new GridAppearance() { ShowRowHeader = true };
    GridLayout gridLayout = new GridLayout() { RowHeight = 40 };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(100);
    }

    private void UpdateState(string state)
    {
        switch (state)
        {
            case "none":
                resizeNone = true;
                resizeSplit = false;
                resizeGrow = false;
                break;
            case "grow":
                resizeNone = false;
                resizeSplit = false;
                resizeGrow = true;
                break;
            case "split":
                resizeNone = false;
                resizeSplit = true;
                resizeGrow = false;
                break;
        }
    }

    private void OnChange(Event eventObj)
    {
        behavior.RowResizeMode = GridResizeMode.None;
        UpdateState("none");
    }

    private void OnChangeSplit(Event eventObj)
    {
        behavior.RowResizeMode = GridResizeMode.Split;
        UpdateState("split");
    }

    private void OnChangeGrow(Event eventObj)
    {
        behavior.RowResizeMode = GridResizeMode.GrowAndShrink;
        UpdateState("grow");
    }
}

@page "/grid-grid-lines"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }
    
    app {
        overflow: auto;
    }
    
    .content {
        height: calc(100% - 70px);
    }
    
    /* This is the CSS used in the demo */
    smart-grid {
        width: 60%;
    }

    @@media only screen and (max-width: 400px) {
        smart-grid {
            width: 100%;
        }
    }
</style>
<Example Name="Grid">
    <h1>Data Grid Lines Appearance</h1>
    <p>
        The Data Grid provides multiple line customization options. It can render horizontal or vertical lines only, or both horizontal and vertical lines. This is controlled by the
        'appearance.showRowLines', 'appearance.showColumnLines', 'appearance.showColumnHeaderLines' properties. In this demo, use the checkboxes to change the gridline style.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid @ref="grid" DataSource="dataRecords" Behavior="@behavior" Appearance="@appearance">
            <Columns>
                <Column DataField="Id" Label="Id" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product"></Column>
                <Column DataField="Quantity" Label="Quantity" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="Price" Label="UnitPrice" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
                <Column DataField="Total" Label="Total" DataType="number" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
            </Columns>
        </Grid>

        <div class="options">
            <div class="caption">Appearance</div>
            <div class="option">
                <CheckBox Checked="true" OnChange="OnColumnHeaderLinesChecked">Column Header Lines</CheckBox><br />
                <CheckBox Checked="true" OnChange="OnColumnLinesChecked">Column Lines</CheckBox><br />
                <CheckBox Checked="true" OnChange="OnRowLinesLinesChecked">Row Lines</CheckBox>
            </div>
        </div>
    }
</Example>

@code {
    Grid grid;

    GridBehavior behavior = new GridBehavior()
    {
        ColumnResizeMode = GridResizeMode.GrowAndShrink
    };

    GridAppearance appearance = new GridAppearance()
    {
        AlternationCount = 2,
        AlternationStart = -1
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(15);
    }

    private void OnColumnHeaderLinesChecked(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];
        grid.Appearance.ShowColumnHeaderLines = args.Value;
    }

    private void OnColumnLinesChecked(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];
        grid.Appearance.ShowColumnLines = args.Value;
    }

    private void OnRowLinesLinesChecked(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];
        grid.Appearance.ShowRowLines = args.Value;
    }
}

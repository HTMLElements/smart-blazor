@page "/grid-live-update"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService
@using System.Timers
@implements IDisposable

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */

</style>

<Example Name="Grid">
    <p>Data is updated every 1 second.</p>

    <template id="matchScoreTemplate">
        <div style="width: 100%; height:100%;">
            <div smart-if="value < 0.2">
                <div style="padding: 4px; background-color: #FC3752; color: #fff">{{value}}</div>
            </div>
            <div smart-if="value > 0.6">
                <div style="padding: 4px; background-color: #95FF00; color: #000;">{{value}}</div>
            </div>
            <div smart-else>
                <div style="padding: 4px; background-color: #FF6800; color: #fff">{{value}}</div>
            </div>
        </div>
    </template>

    <Grid @ref="grid" DataSource="dataSource">
        <Columns>
            <Column DataField="Symbol" Label="Symbol"></Column>
            <Column DataField="Name" Label="Name"></Column>
            <Column DataField="Region" Label="Region"></Column>
            <Column DataField="MatchScore" Label="Match Score" DataType="number" CellsAlign="HorizontalAlignment.Right" Template="matchScoreTemplateID" CellsFormat="c2"></Column>
        </Columns>
    </Grid>
</Example>

@code {
    Grid grid;

    string matchScoreTemplateID = "#matchScoreTemplate";
    object dataSource;
    private Timer timer = new Timer(1000);

    protected override void OnInitialized()
    {
        dataSource = dataService.GenerateStocksData();
        timer.Elapsed += (sender, eventArgs) => OnTimerCallback();
        timer.Start();
    }

    private void OnTimerCallback()
    {
        _ = InvokeAsync(() =>
        {
            dataSource = dataService.GenerateStocksData();
            StateHasChanged();
        });
    }

    public void Dispose() => timer.Dispose();
}


@page "/grid-performance"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    smart-grid {
        width: 60%;
        height: auto;
    }
</style>
<Example Name="Grid">
    <p>DataGrid's Data is updated every 10ms. The View is with 10 columns and 20 rows.</p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <template id="template">
            <div style="width: 100%; height:100%;">
                <div smart-if="value < 0.2">
                    <div style="padding: 4px; background-color: #27A2FC; color: #fff;">{{value}}</div>
                </div>
                <div smart-if="value > 0.8">
                    <div style="padding: 4px; background-color: #6C01FF; color: #000;">{{value}}</div>
                </div>
                <div smart-else>
                    <div style="padding: 4px; background-color: #FC27A2; color: #fff;">{{value}}</div>
                </div>
            </div>
        </template>

        <Grid @ref="grid" DataSource="dataRecords" OnReady="OnGridReady">
            <Columns>
                <Column DataField="A" Label="A" Template="templateId"></Column>
                <Column DataField="B" Label="B" Template="templateId"></Column>
                <Column DataField="C" Label="C" Template="templateId"></Column>
                <Column DataField="D" Label="D" Template="templateId"></Column>
                <Column DataField="E" Label="E" Template="templateId"></Column>
                <Column DataField="F" Label="F" Template="templateId"></Column>
                <Column DataField="G" Label="G" Template="templateId"></Column>
                <Column DataField="H" Label="H" Template="templateId"></Column>
                <Column DataField="I" Label="I" Template="templateId"></Column>
                <Column DataField="J" Label="J" Template="templateId"></Column>
            </Columns>
        </Grid>
    }
</Example>

@code {
    Grid grid;
    string templateId = "#template";

    private List<Dictionary<string, double>> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateNumbersData();
    }

    private void OnGridReady(Grid grid)
    {
        SetInterval(updateData, TimeSpan.FromSeconds(0.01));
    }

    private void updateData()
    {
        grid.DataSource = dataService.GenerateNumbersData();
    }

    public static async Task SetInterval(Action action, TimeSpan timeout)
    {
        await Task.Delay(timeout).ConfigureAwait(false);
        action();
        SetInterval(action, timeout);
    }
}
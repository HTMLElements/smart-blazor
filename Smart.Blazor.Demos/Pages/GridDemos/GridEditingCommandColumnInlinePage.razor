@page "/grid-editing-command-column-inline"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    @@media only screen and (max-width: 700px) {
        smart-grid {
            width: 100%;
        }
    }
</style>

    <h1>GridView with Inline and Batch Editing</h1>
    <p>
        Move the mouse cursor over a row to show 'Edit' and 'Delete' commands in that row. By using these commands you will be able to put a row into edit mode or delete it. From the gridview's command bar, you will be able to 'save' or 'revert' the changes.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid DataSource="dataRecords" Editing="@editing">
            <Columns>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product" Editor="@autoCompleteEditor"></Column>
                <Column DataField="Expired" Label="Expired" DataType="boolean" Template="@checkBoxEditor" Editor="@checkBoxEditor"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number" Editor="@numberInputEditor" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right"></Column>
                <Column DataField="Price" Label="Unit Price" DataType="number" Editor="@numberInputEditor" Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2"></Column>
            </Columns>
        </Grid>
    }


@code {
    private string autoCompleteEditor = "autoComplete";
    private string checkBoxEditor = "checkBox";
    private string numberInputEditor = "numberInput";

    GridEditing editing = new GridEditing()
    {
        Enabled = true,
        Action = GridEditingAction.None,
        Batch = true,
        Mode = GridEditingMode.Row,
        CommandColumn = new GridEditingCommandColumn()
        {
            Visible = true,
            DisplayMode = GridCommandDisplayMode.Icon,
            Inline = true
        },
        CommandBar = new GridEditingCommandBar()
        {
            Visible = true,
            Position = LayoutPosition.Near
        }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(1000);
    }
}

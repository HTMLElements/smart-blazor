@page "/grid-dynamic-columns"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    smart-grid {
        width: 60%;
        height: auto;
        min-height: 349px;
    }

        smart-grid.smart-container {
            min-height: 349px;
        }

    .options smart-button {
        width: 100%;
    }
</style>
<Example Name="Grid">
    <p>
        Grid Column CRUD example.Grid Columns can be added, updated or deleted the same way you work with basic Javascript Arrays.
        Here, we demonstrate how to use the Smart Grid API to update, remove the first or last column and add a new column,
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid @ref="grid" DataSource="dataRecords" Columns="@columns"></Grid>

        <div class="options">
            <div class="caption">Settings</div>
            <div class="option">
                <Button @ref="addColumnBtn" OnClick="AddColumn">Add Column</Button>
            </div>
            <div class="option">
                <Button @ref="removeLastColumnBtn" OnClick="RemoveLastColumn">Remove Last Column</Button>
            </div>
            <div class="option">
                <Button @ref="removeFirstColumnBtn" OnClick="RemoveFirstColumn">Remove First Column</Button>
            </div>
            <div class="option">
                <Button @ref="updateFirstColumnBtn" OnClick="UpdateFirstColumn">Update First Column Header</Button>
            </div>
        </div>
    }
</Example>

@code {
    Grid grid;
    Button addColumnBtn;
    Button removeLastColumnBtn;
    Button removeFirstColumnBtn;
    Button updateFirstColumnBtn;

    List<GridColumn> columns = new List<GridColumn>()
{
        new GridColumn()
        {
            DataField = "Country",
            Label = "Country",

        },
        new GridColumn()
        {
            DataField = "Area",
            Label = "Area"
        },
        new GridColumn()
        {
            DataField = "Population_Rural",
            Label = "Population_Rural"
        },
        new GridColumn()
        {
            DataField = "Population_Total",
            Label = "Population_Total"
        },
        new GridColumn()
        {
            DataField = "GDP_Total",
            Label = "GDP_Total"
        }
    };

    private List<CountryRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateCountriesData();
    }

    private string[] columnsList = new string[]
    {
            "Id",
            "Country",
            "Area",
            "Population_Urban",
            "Population_Rural",
            "Population_Total",
            "GDP_Agriculture",
            "GDP_Industry",
            "GDP_Services",
            "GDP_Total"
    };

    private void AddColumn()
    {
        for (int i = 0; i < columnsList.Length; i++)
        {
            bool alreadyAdded = false;

            for (int j = 0; j < columns.Count; j++)
            {
                if (columns[j].Label == columnsList[i])
                {
                    alreadyAdded = true;
                    break;
                }
            }

            if (alreadyAdded)
            {
                continue;
            }

            GridColumn newColumn = new GridColumn(){ Label = columnsList[i], DataField = columnsList[i] };
            columns.Add(newColumn);

            grid.Columns = new List<GridColumn>() { }; //TODO: remove

            break;
        }

        UpdateButtonsDisabledState();
    }

    private void RemoveLastColumn()
    {
        columns.RemoveAt(columns.Count - 1);
        UpdateButtonsDisabledState();

        grid.Columns = new List<GridColumn>() { }; //TODO: remove
    }

    private void RemoveFirstColumn()
    {
        columns.RemoveAt(0);
        UpdateButtonsDisabledState();

        grid.Columns = new List<GridColumn>() { }; //TODO: remove
    }

    private void UpdateFirstColumn()
    {
        columns[0].Label = "New " + columns[0].Label;
        updateFirstColumnBtn.Disabled = true;
    }

    private void UpdateButtonsDisabledState()
    {
        addColumnBtn.Disabled = columns.Count == columnsList.Length;
        removeLastColumnBtn.Disabled = columns.Count == 0;
        removeFirstColumnBtn.Disabled = columns.Count == 0;
        updateFirstColumnBtn.Disabled = columns.Count == 0 || (columns.Count > 0 && columns[0].Label.Contains("New"));
    }
}

@page "/grid-selection-mode-cell"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }
    
    app {
        overflow: auto;
    }
    
    .content {
        height: calc(100% - 70px);
    }
    
    /* This is the CSS used in the demo */
    @@media only screen and (max-width: 700px) {
        smart-grid {
            width: 100%;
        }
    }

    smart-grid {
        width: 60%;
        max-width: 600px;
    }
</style>

    <p>
        The Grid component supports difference Cells selection configuration options. You can select one or multiple cells or have Excel-like Cells selection.
        It is also possible to select entire row or column or configure the selection on single or double click.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid @ref="grid" DataSource="dataRecords" Appearance="@appearance" Selection="@selection">
            <Columns>
                <Column DataField="FirstName" Label="First Name"></Column>
                <Column DataField="LastName" Label="Last Name"></Column>
                <Column DataField="ProductName" Label="Product"></Column>
                <Column DataField="Quantity" Label="Quantity" DataType="number"
                        Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right">
                </Column>
                <Column DataField="Price" Label="Unit Price" DataType="number"
                        Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2">
                </Column>
                <Column DataField="Total" Label="Total" DataType="number"
                        Align="HorizontalAlignment.Right" CellsAlign="HorizontalAlignment.Right" CellsFormat="c2">
                </Column>
            </Columns>
        </Grid>

        <div class="options">
            <div class="caption">Settings</div>
            <div class="option">
                <CheckBox OnChange="OnSelectOnDblClickChanged">Select on Double Click</CheckBox>
            </div>
            <div class="option">
                <CheckBox OnChange="OnAllowRowHeaderSelectionChanged">Allow Row Header Selection</CheckBox>
            </div>
            <div class="option">
                <CheckBox OnChange="OnAllowColHeaderSelectionChanged">Allow Column Header Selection</CheckBox>
            </div>
            <div class="option">
                <RadioButton OnCheckValue="OnSingleChecked">Single Selection</RadioButton><br />
                <RadioButton OnCheckValue="OnMultipleChecked">Multiple Selection</RadioButton><br />
                <RadioButton OnCheckValue="OnExtendedChecked">Extended Selection</RadioButton><br />
            </div>
        </div>
    }


@code {
    Grid grid;

    GridAppearance appearance = new GridAppearance() { ShowRowHeader = true };

    GridSelection selection = new GridSelection()
    {
        Enabled = true,
        Mode = GridSelectionMode.Extended,
        AllowCellSelection = true
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(3000);
    }

    private void OnSelectOnDblClickChanged(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        grid.Selection.Action = args.Value ? GridSelectionAction.DoubleClick : GridSelectionAction.Click;
    }

    private void OnAllowRowHeaderSelectionChanged(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        grid.Selection.AllowRowHeaderSelection = args.Value;
    }

    private void OnAllowColHeaderSelectionChanged(Event eventObj)
    {
        CheckBoxChangeEventDetail args = eventObj["Detail"];

        grid.Selection.AllowColumnHeaderSelection = args.Value;
    }

    private void OnSingleChecked(Event eventObj)
    {
        grid.Selection.Mode = GridSelectionMode.One;
    }

    private void OnMultipleChecked(Event eventObj)
    {
        grid.Selection.Mode = GridSelectionMode.Many;
    }

    private void OnExtendedChecked(Event eventObj)
    {
        grid.Selection.Mode = GridSelectionMode.Extended;
    }
}

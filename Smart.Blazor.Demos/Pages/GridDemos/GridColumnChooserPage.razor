@page "/grid-column-chooser"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }
    /* This is the CSS used in the demo */
    smart-grid {
        width: 100%;
        height: auto;
    }

    smart-menu {
        height: auto !important;
    }

    body {
        height: 1000px;
    }
</style>

<h1>Column Panel - DataGrid column UI</h1>
<p>
    This example shows how to use the DataGrid column panel. Click on the Column button in the Grid
    header to open the column panel.
</p>

@if (dataRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Grid DataSource="dataRecords" Appearance="@appearance" Selection="@selection" Grouping="@grouping" OnCommand="@OnCommand" Editing="@editing">
        <Columns>
            <Column DataField="Name" Label="Name" AllowHide="false"></Column>
            <Column DataField="Status" Label="Status"></Column>
            <Column DataField="Column3" Label="Column 3" AllowGroup="false"></Column>
            <Column DataField="Column4" Label="Column 4" AllowGroup="false"></Column>
            <Column DataField="Column5" Label="Column 5" AllowGroup="false"></Column>
        </Columns>
    </Grid>
}


@code {
    GridAppearance appearance = new GridAppearance()
    {
        ShowColumnLines = false,
        ShowColumnHeaderLines = false
    };
    
    GridSelection selection = new GridSelection() { Enabled = true, Mode = GridSelectionMode.Many };
    
    GridGrouping grouping = new GridGrouping()
    {
        Enabled = true,
        GroupIndent = 0,
        SummaryRow = new GridGroupingSummaryRow() { Visible = false }
    };
    
    GridEditing editing = new GridEditing()
    {
        Enabled = true,
        Action = GridEditingAction.None,
        CommandColumn = new GridEditingCommandColumn()
        {
            Visible = true,
            DataSource = new GridEditingCommandColumnDataSource()
            {
                CommandColumnEdit = new GridCommand() { Visible = false },
                CommandColumnDelete = new GridCommand() { Visible = false },
                CommandColumnMenu = new GridCommand() { Visible = true },
                CommandColumnRowMenu = new GridCommand() { Visible = true }
            }
        }
    };

    private IList<IDictionary<string, object>> dataRecords = new List<IDictionary<string, object>>()
    {
        new Dictionary<string, object>()
        {
            { "Name", "Task 1" },
            { "Status", "Done" },
            { "Column3", "Item 1.3" },
            { "Column4", "Item 1.4" },
            { "Column5", "Item 1.5" },
            { "Notification", false }
        },
        new Dictionary<string, object>()
        {
            { "Name", "Task 2" },
            { "Status", "In Progress" },
            { "Column3", "Item 2.3" },
            { "Column4", "Item 2.4" },
            { "Column5", "Item 2.5" },
            { "Notification", false }
        },
        new Dictionary<string, object>()
        {
            { "Name", "Task 3" },
            { "Status", "Done" },
            { "Column3", "Item 3.3" },
            { "Column4", "Item 3.4" },
            { "Column5", "Item 3.5" },
            { "Notification", true }
        },
        new Dictionary<string, object>()
        {
            { "Name", "Task 4" },
            { "Status", "Done" },
            { "Column3", "Item 4.3" },
            { "Column4", "Item 4.4" },
            { "Column5", "Item 4.5" },
            { "Notification", false }
        },
        new Dictionary<string, object>()
        {
            { "Name", "Task 5" },
            { "Status", "Done" },
            { "Column3", "Item 5.3" },
            { "Column4", "Item 5.4" },
            { "Column5", "Item 5.5" },
            { "Notification", false }
        }
    };


    private void OnCommand(object eventObj)
    {

    }
}
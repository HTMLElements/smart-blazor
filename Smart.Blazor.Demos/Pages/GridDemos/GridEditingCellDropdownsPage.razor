@page "/grid-editing-cell-dropdowns"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    @@media only screen and (max-width: 700px) {
        smart-grid {
            width: 100%;
        }
    }
</style>
<Example Name="Grid">
    <p>
        Auto-Complete Readonly editor is used in the 'First Name' column. 'Last Name' column is with Auto-Complete Dropdown. The 'Product' Grid column is with Auto-Complete which opens automatically.
        Click on a cell to begin edit. Start typing and auto-complete popup will be displayed.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Grid OnEndEdit="OnEndEdit" DataSource="dataRecords" Editing="@editing">
            <Columns>
                <Column DataField="FirstName" Label="First Name" Editor="@firstNameEditor"></Column>
                <Column DataField="LastName" Label="Last Name" Editor="@lastNameEditor"></Column>
                <Column DataField="ProductName" Label="Product" Editor="@productEditor"></Column>
            </Columns>
        </Grid>
    }
</Example>

@code {
    private void OnEndEdit(Event args)
    {
        GridEndEditEventDetail detail = args["Detail"] as GridEndEditEventDetail;

        Console.WriteLine(detail.Row["data"]);
    }

    Dictionary<string, object> firstNameEditor = new Dictionary<string, object>()
    {
        { "template", "autoComplete" },
        { "readonly", true }
    };

    Dictionary<string, object> lastNameEditor = new Dictionary<string, object>()
    {
        { "template", "autoComplete" },
        { "dropDownButtonPosition", "right" }
    };

    Dictionary<string, object> productEditor = new Dictionary<string, object>()
    {
        { "template", "autoComplete" },
        { "readonly", true },
        { "autoOpen", true }
    };

    GridEditing editing = new GridEditing()
    {
        Enabled = true,
        Mode = GridEditingMode.Cell
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(1000);
    }
}

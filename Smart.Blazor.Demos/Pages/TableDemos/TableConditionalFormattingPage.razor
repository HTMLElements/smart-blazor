@page "/table-conditional-formatting"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    .smart-table {
        width: 800px;
        height: 500px;
    }
</style>
<Example Name="Table">
    <p>
        This demo shows how to format table cells conditionally. Pressing the "Conditional Formatting" button opens a
        dialog with formatting options.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Table DataSource="dataRecords" ConditionalFormatting="@conditionalFormatting" ConditionalFormattingButton="true" 
               Filtering="true" KeyboardNavigation="true" Columns="@columns">
        </Table>           
    }
</Example>

@code {   
    private List<DataRecord> dataRecords;

    List<TableColumn> columns = new List<TableColumn>()
    {
        new TableColumn()
        {
            DataField = "Id",
            Label = "Id",
            DataType = TableColumnDataType.Number
        },
        new TableColumn()
        {
            DataField = "FirstName",
            Label = "First Name",
            DataType = TableColumnDataType.String
        },
        new TableColumn()
        {
            DataField = "LastName",
            Label = "Last Name",
            DataType = TableColumnDataType.String
        },
        new TableColumn()
        {
            DataField = "ProductName",
            Label = "Product Name",
            DataType = TableColumnDataType.String
        },
        new TableColumn()
        {
            DataField = "Quantity",
            Label = "Quantity",
            DataType = TableColumnDataType.Number
        },
        new TableColumn()
        {
            DataField = "Price",
            Label = "Price",
            DataType = TableColumnDataType.Number
        },
        new TableColumn()
        {
            DataField = "Total",
            Label = "Total",
            DataType = TableColumnDataType.Number
        }
    };

    List<TableConditionalFormatting> conditionalFormatting = new List<TableConditionalFormatting>()
    {
        new TableConditionalFormatting()
        {
            Column = "Quantity",
            Condition = TableConditionalFormattingCondition.GreaterThan,
            FirstValue = 8,
            Text = "#6AA84F"
        },
        new TableConditionalFormatting()
        {
            Column = "Quantity",
            Condition = TableConditionalFormattingCondition.Between,
            FirstValue = 3,
            SecondValue = 5,
            FontFamily = TableConditionalFormattingFontFamily.CourierNew,
            Text = "#CC0000"
        },
        new TableConditionalFormatting()
        {
            Column = "Price",
            Condition = TableConditionalFormattingCondition.GreaterThan,
            FirstValue = 8,
            Text = "#0000FF"
        },
        new TableConditionalFormatting()
        {
            Column = "Total",
            Condition = TableConditionalFormattingCondition.GreaterThan,
            FirstValue = 25,
            FontSize = TableConditionalFormattingFontSize.Fourtheenpx,
            Text = "#FFFFFF",
            Highlight = "#6AA84F"
        },
        new TableConditionalFormatting()
        {
            Column = "Total",
            Condition = TableConditionalFormattingCondition.Between,
            FirstValue = 10,
            SecondValue = 25,
            FontSize = TableConditionalFormattingFontSize.Twelvepx,
            Text = "#000000",
            Highlight = "#F1C232"
        },
        new TableConditionalFormatting()
        {
            Column = "Total",
            Condition = TableConditionalFormattingCondition.LessThan,
            FirstValue = 10,
            FontSize = TableConditionalFormattingFontSize.Tenpx,
            Text = "#FFFFFF",
            Highlight = "#CC0000"
        }
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(50);
    }
}

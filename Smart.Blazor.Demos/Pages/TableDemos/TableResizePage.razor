@page "/tableresize"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService
<style>
   body,
   html,
   app {
      height: 100%;
   }

   app {
      overflow: auto;
   }

   .content {
      height: calc(100% - 70px);
   }
   /* This is the CSS used in the demo */
   smart-table {
      width: 800px;
   }
</style>
<p>
   This demo showcases column resizing in smart-table. Please note that column sizes continue to adhere to the
   behavior of the standard HTML table element's table-layout: fixed, upon which smart-table is based.
</p>

<button @onclick=onclick>Refresh</button>
@if (dataRecords == null)
{
   <p><em>Loading...</em></p>
}
else
{
   <Table @ref=table DataSource="dataRecords" ColumnResize="true" ColumnResizeFeedback="true" Tooltip="true" Columns="@columns"></Table>
}

@code {

   private Table table;

   private List<DataRecord> dataRecords;
   List<TableColumn> columns = new List<TableColumn>()
{
      new TableColumn()
      {
         DataField = "Id",
         Label = "Id",
         DataType = TableColumnDataType.Number,
         Width = 50
      },
      new TableColumn()
      {
         DataField = "ProductName",
         Label = "Product Name",
         DataType = TableColumnDataType.String
      },
      new TableColumn()
      {
         DataField = "Quantity",
         Label = "Quantity",
         DataType = TableColumnDataType.Number
      },
      new TableColumn()
      {
         DataField = "Price",
         Label = "Price",
         DataType = TableColumnDataType.Number
      },
      new TableColumn()
      {
         DataField = "TimeOfPurchase",
         Label = "Date Purchase",
         DataType = TableColumnDataType.Date
      }
   };

   protected override void OnInitialized()
   {
      base.OnInitialized();
      dataRecords = dataService.GenerateData(15);
   }

   private void onclick()
   {
        dataRecords = dataService.GenerateData(15);
		table?.StateHasChanged();
   }

}
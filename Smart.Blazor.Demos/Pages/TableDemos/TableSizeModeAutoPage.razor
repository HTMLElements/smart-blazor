@page "/table-size-mode-auto"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
    .smart-table {
        width: 100%;
        height: 600px;
    }
</style>

    <p>
        This demo showcases the "auto" column size mode of smart-table. In this mode, columns are sized based on their
        content and the value of the <strong>columnMinWidth</strong> property, unless there is not enough space in the
        Table, in which case ellipses are shown. User-set static column width is still respected.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Table DataSource="dataRecords" ColumnMinWidth="@columnMinWidth" ColumnSizeMode="TableColumnSizeMode.Auto" Selection="true" Tooltip="true" Columns="@columns"></Table>
    }


@code {
    private string columnMinWidth = "50px";

    private List<DataRecord> dataRecords;

    List<TableColumn> columns = new List<TableColumn>()
    {
        new TableColumn()
        {
            DataField = "Id",
            Label = "Id",
            DataType = TableColumnDataType.Number,
            Width = 50
        },
        new TableColumn()
        {
            DataField = "FirstName",
            Label = "First Name",
            DataType = TableColumnDataType.String
        },
        new TableColumn()
        {
            DataField = "LastName",
            Label = "Last Name",
            DataType = TableColumnDataType.String
        },
        new TableColumn()
        {
            DataField = "ProductName",
            Label = "Product Name",
            DataType = TableColumnDataType.String
        },
        new TableColumn()
        {
            DataField = "Quantity",
            Label = "Quantity",
            DataType = TableColumnDataType.Number
        },
        new TableColumn()
        {
            DataField = "Price",
            Label = "Price",
            DataType = TableColumnDataType.Number,

        },
        new TableColumn()
        {
            DataField = "Total",
            Label = "Total",
            DataType = TableColumnDataType.Number
        }
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(50);
    }
}

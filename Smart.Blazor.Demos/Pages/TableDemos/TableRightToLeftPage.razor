@page "/table-right-to-left"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    body,
    html,
    app {
        height: 100%;
    }

    app {
        overflow: auto;
    }

    .content {
        height: calc(100% - 70px);
    }

    /* This is the CSS used in the demo */
</style>

    <p>
        This demo showcases the right-to-left layout of smart-table.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Table DataSource="dataRecords" Filtering="true" FilterRow="true" KeyboardNavigation="true" Locale="he" 
               Messages="@messages" Paging="true" RightToLeft="true" SortMode="TableSortMode.One" Columns="@columns">
        </Table>
    }


@code {   
    private List<DataRecord> dataRecords;

    IDictionary<string, object> messages = new Dictionary<string, object>()
    {
        {
            "en",
            new Dictionary<string, string>()
            {
                { "clearFilter", "Clear filter" },
                { "CONTAINS", "contains" },
                { "CONTAINS_CASE_SENSITIVE", "contains (case sensitive)" },
                { "DOES_NOT_CONTAIN", "does not contain" },
                { "DOES_NOT_CONTAIN_CASE_SENSITIVE", "does not contain (case sensitive)" },
                { "EMPTY", "empty" },
                { "ENDS_WITH", "ends with" },
                { "ENDS_WITH_CASE_SENSITIVE", "ends with (case sensitive)" },
                { "EQUAL", "equal" },
                { "EQUAL_CASE_SENSITIVE", "equal (case sensitive)" },
                { "filterPlaceholder", "Filter" },
                { "filterCondition", "Filter condition" },
                { "firstButton", "First" },
                { "GREATER_THAN", "greater than" },
                { "GREATER_THAN_OR_EQUAL", "greater than or equal" },
                { "invalidValue", "Invalid value" },
                { "itemsPerPage", "Items per page," },
                { "lastButton", "Last" },
                { "LESS_THAN", "less than" },
                { "LESS_THAN_OR_EQUAL", "less than or equal" },
                { "nextButton", "Next" },
                { "NOT_EMPTY", "not empty" },
                { "NOT_EQUAL", "not equal" },
                { "NOT_NULL", "not null" },
                { "NULL", "null" },
                { "previousButton", "Previous" },
                { "STARTS_WITH", "starts with" },
                { "STARTS_WITH_CASE_SENSITIVE", "starts with (case sensitive)" },
                { "summaryPrefix", "of" }
            }
        },
        {
            "he",
            new Dictionary<string, string>()
            {
                { "clearFilter", "נקה את המסנן" },
                { "CONTAINS", "מכיל" },
                { "CONTAINS_CASE_SENSITIVE", "מכיל (רגיש רישיות)" },
                { "DOES_NOT_CONTAIN", "לא מכיל" },
                { "DOES_NOT_CONTAIN_CASE_SENSITIVE", "אינו מכיל (רגיש רישיות)" },
                { "EMPTY", "ריק" },
                { "ENDS_WITH", "נגמר עם" },
                { "ENDS_WITH_CASE_SENSITIVE", "מסתיים ב (רגיש רישיות)" },
                { "EQUAL", "שווה" },
                { "EQUAL_CASE_SENSITIVE", "שווה (רגיש אותיות רישיות)" },
                { "filterPlaceholder", "סנן" },
                { "filterCondition", "מצב סינון" },
                { "firstButton", "ראשון" },
                { "GREATER_THAN", "גדול מ" },
                { "GREATER_THAN_OR_EQUAL", "גדול או שווה" },
                { "invalidValue", "ערך לא תקין" },
                { "itemsPerPage", "פריטים לעמוד," },
                { "lastButton", "אחרון" },
                { "LESS_THAN", "פחות מ" },
                { "LESS_THAN_OR_EQUAL", "פחות מ או שווה" },
                { "nextButton", "הבא" },
                { "NOT_EMPTY", "לא ריק" },
                { "NOT_EQUAL", "לא שווה" },
                { "NOT_NULL", "לא ריק" },
                { "NULL", "null" },
                { "previousButton", "קודם" },
                { "STARTS_WITH", "מתחיל עם" },
                { "STARTS_WITH_CASE_SENSITIVE", "מתחיל עם (רגיש רישיות)" },
                { "summaryPrefix", "של" }
            }
        }
    };

    List<TableColumn> columns = new List<TableColumn>()
    {
        new TableColumn()
        {
            DataField = "Id",
            Label = "תעודת זהות",
            DataType = TableColumnDataType.Number
        },
        new TableColumn()
        {
            DataField = "ProductName",
            Label = "שם מוצר",
            DataType = TableColumnDataType.String
        },
        new TableColumn()
        {
            DataField = "Quantity",
            Label = "כמות",
            DataType = TableColumnDataType.Number
        },
        new TableColumn()
        {
            DataField = "Price",
            Label = "מחיר",
            DataType = TableColumnDataType.Number,

        },
        new TableColumn()
        {
            DataField = "TimeOfPurchase",
            Label = "תאריך רכישה",
            DataType = TableColumnDataType.Date
        }
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(50);
    }
}

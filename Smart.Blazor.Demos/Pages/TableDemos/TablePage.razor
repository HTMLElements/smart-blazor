@page "/table-service"

@using Smart.Blazor.Demos.Data
@using Smart.Blazor

@inject WeatherForecastService ForecastService

<Example Name="Table">
    <h1>Weather forecast</h1>

    <p>This component demonstrates fetching data from a service.</p>

    @if (forecasts == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <Table @ref="table" OnCellClick="CellClick" SortMode="TableSortMode.One" Editing="true" Selection="true">
            <tr hidden>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
            @foreach (var forecast in forecasts)
            {
                <tr hidden>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td><button>@forecast.Summary</button></td>
                </tr>
            }
        </Table>

        <Button @onclick="UpdateData">Update Data</Button>
        <Button @onclick="Select">Select</Button>
    }
</Example>

    @code {
            Table table;



            private WeatherForecast[] forecasts;

        protected override async Task OnInitializedAsync()
        {
            forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
        }

        private async void Select()
        {
            table.Select(0);

            var selectedProperty = table.Selected;
            var selectedResult = await table.GetSelectedAsync();
            var dataSource = await table.GetDataSourceAsync();
        }

        private void CellClick(Event args)
        {
            TableCellClickEventDetail detail = args["Detail"] as TableCellClickEventDetail;

            string id = detail.Id;
            string field = detail.DataField;
        }

        private async Task UpdateData()
        {
            var selection = await table.GetProperty<IEnumerable<object>>("selected");

            forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
            table.StateHasChanged();

        }
    }

@page "/editor-toolbar-view-mode"

<style>
    body,
    html,
    app {
        width: 100%;
        height: 100%;
        margin: 0 auto;
    }

    .smart-editor {
        width: 600px;
        height: 100%;
    }

    @@media (max-width: 750px) {
        .smart-editor {
            width: 100%;
        }
    }
</style>
 
<Example Name="Editor">
    <Editor ToolbarItems="toolbarItems" Placeholder="Please Enter content..." @bind-ToolbarViewMode="toolbarViewMode" />

    <div class="options">
        <div class="description">
            <h4>Toolbar Scroll View Mode</h4>
        </div>
        <div class="option">
            <p>
                <RadioButton GroupName="editorOptions" OnCheckValue="OnMultiRowCheck" @bind-Checked="multiRowChecked"><b>multiRow</b> - Multi-row Toolbar</RadioButton>
            </p>
            <p>
                <RadioButton GroupName="editorOptions" OnCheckValue="OnExpandableCheck" @bind-Checked="expandableChecked"><b>toggle</b> - Expandable Toolbar</RadioButton>
            </p>
            <p>
                <RadioButton GroupName="editorOptions" OnCheckValue="OnScrollableCheck" @bind-Checked="scrollChecked"><b>scroll</b> - Scrollable Toolbar</RadioButton>
            </p>
        </div>
    </div>
</Example>

@code {
    bool multiRowChecked = false;
    bool expandableChecked = true;
    bool scrollChecked = false;

    ToolbarViewMode toolbarViewMode = ToolbarViewMode.Toggle;

    List<IEditorToolbarItem> toolbarItems = new List<IEditorToolbarItem>()
    {
        new EditorToolbarItem() { Name = "Bold" },
        new EditorToolbarItem() { Name = "Italic" },
        new EditorToolbarItem() { Name = "Underline" },
        new EditorToolbarItem() { Name = "StrikeThrough" },
        new EditorToolbarItem() { Name = "FontName" },
        new EditorToolbarItem() { Name = "FontSize" },
        new EditorToolbarItem() { Name = "FontColor" },
        new EditorToolbarItem() { Name = "BackgroundColor" },
        new EditorToolbarItem() { Name = "LowerCase" },
        new EditorToolbarItem() { Name = "UpperCase" },
        new EditorToolbarItem() { Name = "|" },
        new EditorToolbarItem() { Name = "Formats" },
        new EditorToolbarItem() { Name = "Alignment" },
        new EditorToolbarItem() { Name = "OrderedList" },
        new EditorToolbarItem() { Name = "UnorderedList" },
        new EditorToolbarItem() { Name = "Outdent" },
        new EditorToolbarItem() { Name = "Indent" },
        new EditorToolbarItem() { Name = "|" },
        new EditorToolbarItem() { Name = "hyperlink" },
        new EditorToolbarItem() { Name = "Image" },
        new EditorToolbarItem() { Name = "|" },
        new EditorToolbarItem() { Name = "ClearFormat" },
        new EditorToolbarItem() { Name = "Print" },
        new EditorToolbarItem() { Name = "SourceCode" },
        new EditorToolbarItem() { Name = "FullScreen" },
        new EditorToolbarItem() { Name = "|" },
        new EditorToolbarItem() { Name = "Undo" },
        new EditorToolbarItem() { Name = "Redo" }
    };

    private void OnMultiRowCheck()
    {
        toolbarViewMode = ToolbarViewMode.MultiRow;

        multiRowChecked = true;
        expandableChecked = false;
        scrollChecked = false;
    }

    private void OnExpandableCheck()
    {
        toolbarViewMode = ToolbarViewMode.Toggle;

        multiRowChecked = false;
        expandableChecked = true;
        scrollChecked = false;
    }

    private void OnScrollableCheck()
    {
        toolbarViewMode = ToolbarViewMode.Scroll;

        multiRowChecked = false;
        expandableChecked = false;
        scrollChecked = true;
    }
}

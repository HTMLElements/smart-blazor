@page "/editor-methods"

<style>
    body,
    html,
    app {
        width: 100%;
        height: 100%;
        margin: 0 auto;
    }

    .smart-editor {
        width: calc(100% - 300px);
        height: 100%;
    }
 
    @@media (max-width: 750px) {
        .smart-editor {
            width: 100%;
        }
    }

    .options smart-button {
        width: 100%;
    }

    table.browserref {
        border-collapse: collapse;
        width: 100%;
    }

        table.browserref tr:nth-child(even) {
            background-color: #F1F1F1;
        }

        table.browserref tr:nth-child(odd) {
            background-color: #ffffff;
        }

        table.browserref tr.fixzebra {
            background-color: #F1F1F1;
        }

        table.browserref th {
            background-repeat: no-repeat;
            background-position: center center;
            border: 1px solid #d4d4d4;
            background-color: #ffffff;
            font-weight: normal;
            color: #555555;
            padding: 11px 5px 11px 5px;
            vertical-align: middle;
        }

            table.browserref th div {
                width: 48px;
                height: 48px;
                display: inline-block;
            }

        table.browserref td {
            border: 1px solid #d4d4d4;
            text-align: center;
            padding: 8px;
            vertical-align: top;
        }

            table.browserref th:first-child,
            table.browserref td:first-child {
                padding-left: 16px
            }


        table.browserref .bsEdge {
            background: url(https://www.htmlelements.com/demos/images/browsers.png) -78px -10px;
        }

        table.browserref .bsFirefox {
            background: url(https://www.htmlelements.com/demos/images/browsers.png) -10px -78px;
        }

        table.browserref .bsChrome {
            background: url(https://www.htmlelements.com/demos/images/browsers.png) -10px -10px;
        }

        table.browserref .bsSafari {
            background: url(https://www.htmlelements.com/demos/images/browsers.png) -146px -10px;
        }

        table.browserref .bsOpera {
            background: url(https://www.htmlelements.com/demos/images/browsers.png) -78px -78px;
        }
</style>

<Example Name="Editor">
    <Editor @ref="editor">
        <p>
            Smart Editor represents a ready-for-use HTML text editor which can simplify web content creation or be a
            replacement of your HTML Text Areas.
        </p>

        <h2>Features:</h2>
        <ul>
            <li>
                Basic &amp; advanced styling. With jqxEditor, you can easily apply bold, italic, underline styles as
                well as different fonts and font size.
            </li>
            <li>
                Colors Picking. The built-in Color Pickers allow you to highlight text by changing its text color or
                background color.
            </li>
            <li>
                Inline editing. The feature allows you to edit inline and the jqxEditor's toolbar is displayed on demand
                above the editing area.
            </li>
            <li>
                Right to left interface. jqxEditor can switch to Right to Left layout and editing mode by setting a
                single property called "rtl" to true.
            </li>
            <li>Hyperlinks. A built-in tool for inserting, modifying and removing hyperlinks is available.</li>
            <li>
                Images. Images can be edited via a built-in Dialog where you can define the image's url, size, alt text
                and layout.
            </li>
            <li>
                Tables. The Editor allows to creata tables with custom rows/colums and apply attributes like header,
                alternation and etc.
            </li>
            <li>Export to HTML and Print.</li>
            <li>
                Customizable Toolbars. The Toolbar items can be customized as well as the Dialog Window for the
                table/image/hyperlink actions.
            </li>
            <li>
                Force paste as plain text. jqxEditor has a property called "pasteFormat". By setting it to "plainText",
                the
                clipboard data will be always pasted as plain text
            </li>
            <li>PC, Touch and Mobile Devices Support</li>
            <li>Web Standards Compliant</li>
            <li>Rich and easy to use JavaScript API</li>
            <li>Easy customization and built-in themes</li>

        </ul>

        <p>
            <table class="browserref notranslate">
                <tbody>
                    <tr>
                        <th style="font-size:16px;text-align:left;">Element</th>
                        <th title="Chrome">
                            <div class="bsChrome"></div>
                        </th>
                        <th title="MS Edge">
                            <div class="bsEdge"></div>
                        </th>
                        <th title="Firefox">
                            <div class="bsFirefox"></div>
                        </th>
                        <th title="Safari">
                            <div class="bsSafari"></div>
                        </th>
                        <th title="Opera">
                            <div class="bsOpera"></div>
                        </th>
                    </tr>
                    <tr>
                        <td style="text-align:left;">&lt;jqx-editor&gt;</td>
                        <td>Yes</td>
                        <td>Yes</td>
                        <td>Yes</td>
                        <td>Yes</td>
                        <td>Yes</td>
                    </tr>
                </tbody>
            </table>
        </p>
    </Editor>

    <div class="options">
        <div class="description">
            <h4>Description</h4>
            The following demo showcases most of the Smart Editor Methods. Clicking on a button below will call the
            according method.
        </div>
        <div class="option">
            <Button OnClick="OnFocusClick">Focus</Button>
        </div>
        <div class="option">
            <Button OnClick="OnBlurClick">Blur</Button>
        </div>
        <div class="option">
            <Button OnClick="OnCollapseToolbarClick">Collapse toolbar</Button>
        </div>
        <div class="option">
            <Button OnClick="OnExpandToolbarClick">Expand Toolbar</Button>
        </div>
        <div class="option">
            <Button OnClick="OnDisableToolbarItemClick" @bind-Disabled="disableToolbarItemDisabled">Disable Formats Item</Button>
        </div>
        <div class="option">
            <Button OnClick="OnEnableToolbarItemClick" @bind-Disabled="enableToolbarItemDisabled">Enable Formats Item</Button>
        </div>

        <div class="option">
            <Button OnClick="OnGetCharCountClick">Get Char Count</Button>
        </div>
        <div class="option">
            <Button OnClick="OnSelectAllClick">Select All</Button>
        </div>
        <div class="option">
            <Button OnClick="OnClearContentClick">Clear Content</Button>
        </div>
        <div class="option">
            <Button OnClick="OnGetHTMLClick">Get HTML</Button>
        </div>
        <div class="option">
            <Button OnClick="OnGetTextClick">Get Text</Button>
        </div>
        <div class="option">
            <Button OnClick="OnSplitModeClick">Split Mode</Button>
        </div>
        <div class="option">
            <Button OnClick="OnPreviewClick"> Preview / Source Code Mode</Button>
        </div>
    </div>

    <div id="log">@log</div>
</Example>

@code {
    Editor editor;
    bool disableToolbarItemDisabled = false;
    bool enableToolbarItemDisabled = true;

    string log = "";

    private void OnFocusClick()
    {
        editor.Focus();
    }

    private void OnBlurClick()
    {
        editor.Blur();
    }

    private void OnCollapseToolbarClick()
    {
        editor.CollapseToolbar();
    }

    private void OnExpandToolbarClick()
    {
        editor.ExpandToolbar();
    }

    private void OnDisableToolbarItemClick()
    {
        disableToolbarItemDisabled = true;
        enableToolbarItemDisabled = false;

        editor.DisableToolbarItem("formats");
    }

    private void OnEnableToolbarItemClick()
    {
        disableToolbarItemDisabled = false;
        enableToolbarItemDisabled = true;

        editor.EnableToolbarItem("formats");
    }

    private async void OnGetCharCountClick()
    {
        int count = await editor.GetCharCount();

        log = count.ToString();
    }

    private void OnSelectAllClick()
    {
        editor.SelectAll();
    }

    private void OnClearContentClick()
    {
        editor.ClearContent();
    }

    private async void OnGetHTMLClick()
    {
        string html = await editor.GetHTML();

        log = html;
    }

    private async void OnGetTextClick()
    {
        string text = await editor.GetText();

        log = text;
    }

    private void OnSplitModeClick()
    {
        editor.SplitMode();
    }

    private void OnPreviewClick()
    {
        editor.PreviewMode();
    }
}
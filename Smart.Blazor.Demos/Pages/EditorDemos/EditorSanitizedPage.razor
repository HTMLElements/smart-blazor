@page "/editor-sanitized"

<style>
    body,
    html,
    app {
        width: 100%;
        height: 100%;
        margin: 0 auto;
    }

    .smart-editor {
        width: calc(100% - 300px);
        height: 100%;
    }

    @@media (max-width: 750px) {
        .smart-editor {
            width: 100%;
        }
    }
</style>
 
<Example Name="Editor">
    <Editor Sanitized Value="@value" />

    <div class="options">
        <div class="description">
            <p>
                The following demo illustrates an attempt to inject XSS into the Editor's content. However the
                <b>Sanitized</b> property is enabled and does not allow scripts and javascript functions to be executed
                from inside the content of the element.
            </p>
        </div>
    </div>
</Example>

@code {
    string value = @"
    Cross-Site Scripting (XSS) attacks are a type of injection, 
    in which malicious scripts are injected into otherwise benign and trusted websites. 
    XSS attacks occur when an attacker uses a web application to send malicious code, 
    generally in the form of a browser side script, to a different end user. 
    Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses 
    input from a user within the output it generates without validating or encoding it.
    The following is an attempt for a XSS attack:
        <script></script>
        <IMG """" ""><SCRIPT> alert("" XSS"") </ SCRIPT > ""\>
        <IMG SRC=/ onerror=""alert(String.fromCharCode(88,83,83))""></img>
        \<a onmouseover=alert(document.cookie)\>xxs link\</a\>
            <IMG SRC=\`javascript: alert(""RSnake says, 'XSS'"")\`>
        <IMG SRC=JaVaScRiPt:alert('XSS')>
        <svg/onload='+/"" /+/onmouseover=1/+/[*/[]/+alert(1)//'>
        <SCRIPT SRC=http://xss.rocks/xss.js></SCRIPT>
        <IMG src=javascript:alert(&quot; XSS & quot;)>";
}
@page "/cardview-right-to-left"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    /* This is the CSS used in the demo */
    .firstName:after {
        background-image: url("https://img.icons8.com/ios/16/000000/user-filled.png");
    }

    .lastName:after {
        background-image: url("https://img.icons8.com/ios/16/000000/signature-filled.png");
    }

    .birthday:after {
        background-image: url("https://img.icons8.com/ios/16/000000/birthday-filled.png");
    }

    .petName:after {
        background-image: url("https://img.icons8.com/ios/16/000000/pet-commands-follow-filled.png");
    }

    .productName:after {
        background-image: url("https://img.icons8.com/ios/16/000000/box-filled.png");
    }

    .price:after {
        background-image: url("https://img.icons8.com/ios/16/000000/price-tag-euro-filled.png");
    }

    .quantity:after {
        background-image: url("https://img.icons8.com/ios/16/000000/negative-dynamic-filled.png");
    }

    .country:after {
        background-image: url("https://img.icons8.com/ios/16/000000/country-filled.png");
    }

    .timeOfPurchase:after {
        background-image: url("https://img.icons8.com/ios/16/000000/alarm-clock-filled.png");
    }

    .expired:after {
        background-image: url("https://img.icons8.com/ios/16/000000/expired-filled.png");
    }
</style>
<Example Name="CardView">
    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <CardView DataSource="dataRecords" TitleField="FirstName" CoverField="Attachments"
                  Columns="@columns" AllowDrag HeaderPosition="CardViewHeaderPosition.Top" Messages="@messages">
        </CardView>
    }
</Example>

@code {
    string locale = "en";

    List<CardViewColumn> columns = new List<CardViewColumn>()
{
        new CardViewColumn()
        {
            DataField = "FirstName",
            Label = "First Name",
            Icon = "firstName"
        },
        new CardViewColumn()
        {
            DataField = "LastName",
            Label = "Last Name",
            Icon = "lastName"
        },
        new CardViewColumn()
        {
            DataField = "Birthday",
            Label = "Birthday",
            Icon = "birthday",
            FormatSettings = new Dictionary<string, string>() { { "formatString", "d" } }
        },
        new CardViewColumn()
        {
            DataField = "PetName",
            Label = "Pet Name",
            Icon = "petName"
        },
        new CardViewColumn()
        {
            DataField = "Country",
            Label = "Country",
            Icon = "country"
        },
        new CardViewColumn()
        {
            DataField = "ProductName",
            Label = "Product Name",
            Icon = "productName"
        },
        new CardViewColumn()
        {
            DataField = "Price",
            Label = "Price",
            Icon = "price",
            FormatSettings = new Dictionary<string, string>() { { "formatString", "c2" } }
        },
        new CardViewColumn()
        {
            DataField = "Quantity",
            Label = "Quantity",
            Icon = "quantity"
        },
        new CardViewColumn()
        {
            DataField = "TimeOfPurchase",
            Label = "Time of Purchase",
            Icon = "timeOfPurchase",
            FormatSettings = new Dictionary<string, string>() { { "formatString", "hh:mm tt" } }
        },
        new CardViewColumn()
        {
            DataField = "Expired",
            Label = "Expired",
            Icon = "expired"
        },
        new CardViewColumn()
        {
            DataField = "Attachments",
            Label = "Attachments",
            Image = true
        }
    };

    Dictionary<string, object> messages = new Dictionary<string, object>()
    {
        {
            "en",
            new Dictionary<string, string>()
            {
                { "addFilter", "+ Add filter" },
                { "addImage", "Add" },
                { "and", "And" },
                { "apply", "Apply" },
                { "booleanFirst", "☐" },
                { "booleanLast", "☑" },
                { "cancel", "Cancel" },
                { "CONTAINS", "contains" },
                { "CONTAINS_CASE_SENSITIVE", "contains (case sensitive)" },
                { "coverField", "Cover field" },
                { "crop", "Crop" },
                { "customize", "Customize cards" },
                { "dateFirst", "1" },
                { "dateLast", "9" },
                { "dateTabLabel", "DATE" },
                { "DOES_NOT_CONTAIN", "does not contain" },
                { "DOES_NOT_CONTAIN_CASE_SENSITIVE", "does not contain (case sensitive)" },
                { "draggedRecord", "Record {{id}}" },
                { "EMPTY", "empty" },
                { "ENDS_WITH", "ends with" },
                { "ENDS_WITH_CASE_SENSITIVE", "ends with (case sensitive)" },
                { "EQUAL", "equal" },
                { "EQUAL_CASE_SENSITIVE", "equal (case sensitive)" },
                { "filter", "Filter" },
                { "filteredByMultiple", "{{n}} filters" },
                { "filteredByOne", "1 filter" },
                { "filterValuePlaceholder", "Value" },
                { "find", "Find a field" },
                { "findInView", "Find in view" },
                { "firstBy", "Sort by" },
                { "fit", "Fit" },
                { "found", "{{nth}} of {{n}}" },
                { "from", "from" },
                { "GREATER_THAN", "greater than" },
                { "GREATER_THAN_OR_EQUAL", "greater than or equal" },
                { "imageUrl", "New image URL," },
                { "incorrectStructure", "\"dataSource\" must be an instance of smartDataAdapter or an array of objects with key-value pairs." },
                { "LESS_THAN", "less than" },
                { "LESS_THAN_OR_EQUAL", "less than or equal" },
                { "nextRecord", "Next record" },
                { "noCoverField", "No cover field" },
                { "noData", "No data to display" },
                { "noFilters", "No filters applied" },
                { "noMatches", "No matched records" },
                { "noSorting", "No sorting applied" },
                { "noResults", "No results" },
                { "NOT_EMPTY", "not empty" },
                { "NOT_EQUAL", "not equal" },
                { "NOT_NULL", "not null" },
                { "now", "Now" },
                { "NULL", "null" },
                { "numberFirst", "1" },
                { "numberLast", "9" },
                { "ok", "OK" },
                { "or", "Or" },
                { "pickAnother", "Pick another field to sort by" },
                { "previousRecord", "Previous record" },
                { "removeImage", "Remove" },
                { "sort", "Sort" },
                { "sortedByMultiple", "Sorted by {{n}} fields" },
                { "sortedByOne", "Sorted by 1 field" },
                { "STARTS_WITH", "starts with" },
                { "STARTS_WITH_CASE_SENSITIVE", "starts with (case sensitive)" },
                { "stringFirst", "A" },
                { "stringLast", "Z" },
                { "thenBy", "then by" },
                { "timeTabLabel", "TIME" },
                { "toggleVisibility", "Toggle field visibility" },
                { "where", "Where" }
            }
        },
        {
            "bg",
            new Dictionary<string, string>()
            {
                { "addFilter", "+ Добави филтър" },
                { "addImage", "Добави" },
                { "and", "И" },
                { "apply", "Приложи" },
                { "booleanFirst", "☐" },
                { "booleanLast", "☑" },
                { "cancel", "Отмени" },
                { "CONTAINS", "съдържа" },
                { "CONTAINS_CASE_SENSITIVE", "съдържа (главни и малки)" },
                { "coverField", "Корица" },
                { "crop", "Изр." },
                { "customize", "Настрой карти" },
                { "dateFirst", "1" },
                { "dateLast", "9" },
                { "dateTabLabel", "ДАТА" },
                { "DOES_NOT_CONTAIN", "не съдържа" },
                { "DOES_NOT_CONTAIN_CASE_SENSITIVE", "не съдържа (главни и малки)" },
                { "draggedRecord", "Запис {{id}}" },
                { "EMPTY", "празно" },
                { "ENDS_WITH", "завършва с" },
                { "ENDS_WITH_CASE_SENSITIVE", "завършва с (главни и малки)" },
                { "EQUAL", "равно на" },
                { "EQUAL_CASE_SENSITIVE", "равно (главни и малки)" },
                { "filter", "Филтрирай" },
                { "filteredByMultiple", "{{n}} филтъра" },
                { "filteredByOne", "1 филтър" },
                { "filterValuePlaceholder", "Стойност" },
                { "find", "Намери поле" },
                { "findInView", "Намери" },
                { "firstBy", "Подреди по" },
                { "fit", "Пасв." },
                { "found", "{{nth}} от {{n}}" },
                { "from", "от" },
                { "GREATER_THAN", "по-голямо от" },
                { "GREATER_THAN_OR_EQUAL", "по-голямо или равно на" },
                { "imageUrl", "URL на ново изображение," },
                { "incorrectStructure", "\"dataSource\" трябва да е инстанция на smartDataAdapter или масив от обекти с двойки ключ-стойност." },
                { "LESS_THAN", "по-малко от" },
                { "LESS_THAN_OR_EQUAL", "по-малко или равно на" },
                { "nextRecord", "Следващ запис" },
                { "noCoverField", "Без корица" },
                { "noData", "Няма данни" },
                { "noFilters", "Няма приложени филтри" },
                { "noMatches", "Няма записи }, отговарящи на условията" },
                { "noSorting", "Няма приложено подреждане" },
                { "noResults", "Няма резултати" },
                { "NOT_EMPTY", "не е празно" },
                { "NOT_EQUAL", "не е равно на" },
                { "NOT_NULL", "не е null" },
                { "now", "Сега" },
                { "NULL", "null" },
                { "numberFirst", "1" },
                { "numberLast", "9" },
                { "ok", "OK" },
                { "or", "Или" },
                { "pickAnother", "Избери друго поле по което да подредиш" },
                { "previousRecord", "Предишен запис" },
                { "removeImage", "Премахни" },
                { "sort", "Подреди" },
                { "sortedByMultiple", "Подредено по {{n}} полета" },
                { "sortedByOne", "Подредено по 1 поле" },
                { "STARTS_WITH", "започва с" },
                { "STARTS_WITH_CASE_SENSITIVE", "започва с (главни и малки)" },
                { "stringFirst", "А" },
                { "stringLast", "Я" },
                { "thenBy", "после по" },
                { "timeTabLabel", "ЧАС" },
                { "toggleVisibility", "Превключи видимостта на полето" },
                { "where", "Където" }
            }
        }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(50);
    }

    private void OnENChecked()
    {
        locale = "en";
    }

    private void OnBGChecked()
    {
        locale = "bg";
    }
}
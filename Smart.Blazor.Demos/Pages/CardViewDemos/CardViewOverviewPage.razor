@page "/cardview-overview"

@using Smart.Blazor.Demos.Data
@inject RandomDataService dataService

<style>
    /* This is the CSS used in the demo */
    .firstName:after {
        background-image: url("https://img.icons8.com/ios/16/000000/user-filled.png");
    }

    .lastName:after {
        background-image: url("https://img.icons8.com/ios/16/000000/signature-filled.png");
    }

    .birthday:after {
        background-image: url("https://img.icons8.com/ios/16/000000/birthday-filled.png");
    }

    .petName:after {
        background-image: url("https://img.icons8.com/ios/16/000000/pet-commands-follow-filled.png");
    }

    .productName:after {
        background-image: url("https://img.icons8.com/ios/16/000000/box-filled.png");
    }

    .price:after {
        background-image: url("https://img.icons8.com/ios/16/000000/price-tag-euro-filled.png");
    }

    .quantity:after {
        background-image: url("https://img.icons8.com/ios/16/000000/negative-dynamic-filled.png");
    }

    .country:after {
        background-image: url("https://img.icons8.com/ios/16/000000/country-filled.png");
    }

    .timeOfPurchase:after {
        background-image: url("https://img.icons8.com/ios/16/000000/alarm-clock-filled.png");
    }

    .expired:after {
        background-image: url("https://img.icons8.com/ios/16/000000/expired-filled.png");
    }
</style>

    <p>
        In Card View, data source records are represented as cards. Each Card contain content and actions about a single subject.
        Smart.CardView supports data sort, data filtering, data editing, data grouping and data searching.
    </p>

    @if (dataRecords == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <CardView DataSource="dataRecords" TitleField="FirstName" CoverField="Attachments" Columns="@columns">
        </CardView>
    }


@code {


    List<CardViewColumn> columns = new List<CardViewColumn>()
    {
        new CardViewColumn()
        {
            DataField = "FirstName",
            Label = "First Name",
            Icon = "firstName"
        },
        new CardViewColumn()
        {
            DataField = "LastName",
            Label = "Last Name",
            Icon = "lastName"
        },
        new CardViewColumn()
        {
            DataField = "Birthday",
            Label = "Birthday",
            DataType = CardViewColumnDataType.Date,
            Icon = "birthday",
            FormatSettings = new Dictionary<string, string>() { { "formatString", "d" } }
        },
        new CardViewColumn()
        {
            DataField = "PetName",
            Label = "Pet Name",
            Icon = "petName"
        },
        new CardViewColumn()
        {
            DataField = "Country",
            Label = "Country",
            Icon = "country"
        },
        new CardViewColumn()
        {
            DataField = "ProductName",
            Label = "Product Name",
            Icon = "productName"
        },
        new CardViewColumn()
        {
            DataField = "Price",
            Label = "Price",
            Icon = "price",
            FormatSettings = new Dictionary<string, string>() { { "formatString", "c2" } }
        },
        new CardViewColumn()
        {
            DataField = "Quantity",
            Label = "Quantity",
            DataType = CardViewColumnDataType.Number,
            Icon = "quantity"
        },
        new CardViewColumn()
        {
            DataField = "TimeOfPurchase",
            Label = "Time of Purchase",
            DataType = CardViewColumnDataType.Date,
            Icon = "timeOfPurchase",
            FormatSettings = new Dictionary<string, string>() { { "formatString", "hh:mm tt" } }
        },
        new CardViewColumn()
        {
            DataField = "Expired",
            Label = "Expired",
            DataType = CardViewColumnDataType.Boolean,
            Icon = "expired",
            FormatFunction = (object settings) =>
            {
                Dictionary<string, object> formatSettings = settings as Dictionary<string, object>;
                formatSettings["template"] = (bool)formatSettings["value"] ? "☑" : "☐";
            }
        },
        new CardViewColumn()
        {
            DataField = "Attachments",
            Label = "Attachments",
            Image = true
        }
    };

    private List<DataRecord> dataRecords;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataRecords = dataService.GenerateData(50);
    }
}
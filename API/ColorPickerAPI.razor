@namespace Smart.Blazor
<div>

  <h2 id="ColorPickerProperties"><a id="ColorPicker_properties" href="javascript: void(0)" class="anchor"><strong>ColorPicker</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Animation</td><td>Animation</td><td>Animation.Advanced</td><td>Sets or gets the animation mode. Animation is disabled when the property is set to <strong>'none'</strong></td></tr>
      <tr><td>Editable</td><td>bool</td><td>false</td><td>This property allows editting of colors via the input inside the element's action section. Accepts values in all supported types. This property works when <strong>'valueDisplayMode'</strong> is set to <strong>default</strong> or <strong>colorCode</strong>.</td></tr>
      <tr><td>AutoCloseDelay</td><td>int</td><td>100</td><td>Determines the delay before the opened drop down closes when <strong>dropDownOpenMode</strong> is set to 'auto'.</td></tr>
      <tr><td>ApplyValueMode</td><td>ColorApplyValueMode</td><td>ColorApplyValueMode.Instantly</td><td>Specifies how the user applies the selected value. In 'instantly' mode the value is applied immediately when color is selected. In 'useButtons' mode are shown 'Ok' and 'Cancel' buttons at the botom of the colorpicker's drop down. Only click on 'OK' button applies the value.</td></tr>
      <tr><td>ColumnCount</td><td>int</td><td>8</td><td>Defines the number of columns for the colors in displayModes 'grid', 'hexagonal' and 'spectrumGrid'.</td></tr>
      <tr><td>DisplayMode</td><td>ColorDisplayMode</td><td>ColorDisplayMode.Default</td><td>Determines the colors that will be displayed and their layout.</td></tr>
      <tr><td>Disabled</td><td>bool</td><td>false</td><td>Enables or disables the element.</td></tr>
      <tr><td>DisableUndo</td><td>bool</td><td>false</td><td>By default clicking on color panel's preview container returns the color value to it's previous state. 'disableUndo' prevents this functionality.</td></tr>
      <tr><td>DropDownAppendTo</td><td>object</td><td>body</td><td>Sets the parent container of the dropDown (the popup). Used when a CSS property of unknowned parent is interfering with the visibility of the dropDown.</td></tr>
      <tr><td>DropDownOpenMode</td><td>DropDownOpenMode</td><td>DropDownOpenMode.Default</td><td>Determines how the drop down is going to open.</td></tr>
      <tr><td>DropDownButtonPosition</td><td>DropDownButtonPosition</td><td>DropDownButtonPosition.Right</td><td>Determines the position of the drop down button.</td></tr>
      <tr><td>DropDownPosition</td><td>DropDownPosition</td><td>DropDownPosition.Auto</td><td>Determines the vertical position of the dropDown. 'Auto' means its automatically determined depending on the viewport size.</td></tr>
      <tr><td>DropDownHeight</td><td>string</td><td>&quot;auto&quot;</td><td>Sets the height of the drop down. Default value of null means that CSS variables are used. This property should be used when the browser doesn not support CSS variables.</td></tr>
      <tr><td>DropDownOverlay</td><td>bool</td><td>false</td><td>If this property is enabled, when the element's dropdown is opened, a transparent overlay is positioned between the dropdown and the rest of the document.</td></tr>
      <tr><td>DropDownWidth</td><td>string</td><td>&quot;auto&quot;</td><td>Sets the width of the drop down. Default value of null means that CSS variables are used. This property should be used when the browser doesn't support CSS variables.</td></tr>
      <tr><td>EditAlphaChannel</td><td>bool</td><td>false</td><td>Allows to edit the alpha(transparency) of the colors via an editor/slider in the following displayModes: 'palette', 'radial', 'hexagonal'</td></tr>
      <tr><td>EnableCustomColors</td><td>bool</td><td>false</td><td>Allows to select a custom color via an editor popup. Custom color selection is available in modes that don't have this option by default, like: 'grid', 'default, 'spectrum grid'.</td></tr>
      <tr><td>GridThemeColors</td><td>string[]</td><td>new string[]{}</td><td>Defines an Array of colors that will be used as the Theme Colors in the corresponding section of displayMode: 'grid' and 'default'.</td></tr>
      <tr><td>GridShadeColors</td><td>string[]</td><td>new string[]{}</td><td>Defines an Array of colors that will be used as the Shade Colors in the corresponding section of displayMode: 'grid' and 'default'.</td></tr>
      <tr><td>GridStandardColors</td><td>string[]</td><td>new string[]{}</td><td>Defines an Array of colors that will be used as the Standart Colors in the corresponding section of displayMode: 'grid' and 'default'.</td></tr>
      <tr><td>HideAlphaEditor</td><td>bool</td><td>false</td><td>Hides the alpha editor. Alpha editor is an input containing the value of the current color opacity. The input is available in the following modes: 'radial', 'palette', 'hexagonal'. The input is only visible if there's enough space. This editor is visible by default.</td></tr>
      <tr><td>HideContentToFit</td><td>string[]</td><td>new string[]{}</td><td>Determines which color editors will be hidden first when there's not enough space for all of them to be visible. By default the editors are only visible in 'palette', 'radial' and 'hexagonal' display modes. This property allows to prioritize the visibility of the editors.</td></tr>
      <tr><td>HideHEXEditor</td><td>bool</td><td>false</td><td>HEX editor is an input containing the hexadecimal representation of a color. This editor is visible by default. Setting 'hideRGBeditor' to true hides it.</td></tr>
      <tr><td>HidePreviewContainer</td><td>bool</td><td>false</td><td>Hides the preview container. Preview container is used to show the currently selected value in 'palette', 'radial' and 'hexagonal' display modes.</td></tr>
      <tr><td>HideRGBEditor</td><td>bool</td><td>false</td><td>Hides the RGB editor. This editor is a group of three separate inputs for the Red, Green and Blue values of the color.</td></tr>
      <tr><td>Hint</td><td>string</td><td>&quot;&quot;</td><td>Sets additional helper text below the element that is only visible when the element is focused.</td></tr>
      <tr><td>Inverted</td><td>bool</td><td>false</td><td>Inverts the colors in 'spectrumGrid', 'hexagonal', 'radial' modes.</td></tr>
      <tr><td>Label</td><td>string</td><td>&quot;&quot;</td><td>Sets a label above the element.</td></tr>
      <tr><td>Locale</td><td>string</td><td>&quot;en&quot;</td><td>Sets or gets the language. Used in conjunction with the property <strong>messages</strong>. </td></tr>
      <tr><td>LocalizeFormatFunction</td><td>object</td><td>N/A</td><td>Callback used to customize the format of the messages that are returned from the Localization Module.</td></tr>
      <tr><td>Messages</td><td>object</td><td>N/A</td><td>Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property <strong>locale</strong>. </td></tr>
      <tr><td>Name</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the name attribute for the element. Name is used when submiting HTML forms.</td></tr>
      <tr><td>IsOpened</td><td>bool</td><td>false</td><td>Determines whether the popup is opened or closed</td></tr>
      <tr><td>Palette</td><td>ColorPalette</td><td>ColorPalette.Default</td><td>Determines what colors will be displayed in 'spectrumGrid', 'grid' and 'hexagonal' displayModes.</td></tr>
      <tr><td>PaletteColors</td><td>object</td><td>N/A</td><td>Defines an array of colors that form a custom palette. This palette can be used in displayModes 'grid' and 'spectrum grid' if the <strong>palette</strong> property is set to <strong>custom</strong>. The value of the property can be an array of strings or objects that contain valid colors ( HEX, RGBA, etc).</td></tr>
      <tr><td>PaletteCustomColors</td><td>string[]</td><td>new string[]{}</td><td>Defines an array of colors that represent a predefined list of custom colors. This palette can be used in displayModes 'grid', 'default' and 'spectrum grid'. Custom colors are displayed at the bottom of the color grid below the button for custom color selection. They are only visible if <strong>enableCustomColor</strong> property is true.</td></tr>
      <tr><td>Placeholder</td><td>string</td><td>&quot;&quot;</td><td>The placeholder is shown when the value is not set yet or is set to null.</td></tr>
      <tr><td>Readonly</td><td>bool</td><td>false</td><td>Disables user interaction with the element.</td></tr>
      <tr><td>ResizeIndicator</td><td>bool</td><td>false</td><td>Determines whether the resize indicator in the bottom right corner of the drop down is visible or not. This property is used in conjunction with <strong>resizeMode</strong>.</td></tr>
      <tr><td>ResizeMode</td><td>ResizeMode</td><td>ResizeMode.Null</td><td>Determines whether the dropDown can be resized or not. When resizing is enabled, a resize bar appears on the top/bottom side of the drop down.</td></tr>
      <tr><td>RightToLeft</td><td>bool</td><td>false</td><td>Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.</td></tr>
      <tr><td>Theme</td><td>string</td><td>&quot;&quot;</td><td>Determines the theme. Theme defines the look of the element</td></tr>
      <tr><td>TooltipDisplayMode</td><td>ColorTooltipDisplayMode</td><td>ColorTooltipDisplayMode.Hex</td><td>Determines how the tooltip displays the value of the color that is being hovered.</td></tr>
      <tr><td>Unfocusable</td><td>bool</td><td>false</td><td>If is set to true, the element cannot be focused.</td></tr>
      <tr><td>Value</td><td>string</td><td>&quot;null&quot;</td><td>Represents the value of the selected color as the value of the element.</td></tr>
      <tr><td>ValueFormat</td><td>ColorValueFormat</td><td>ColorValueFormat.Default</td><td>Determines the format of the color. Whether it's in HEX, RGB or RGBA. By default it shows the color depending on the displayMode.</td></tr>
      <tr><td>ValueDisplayMode</td><td>ColorValueDisplayMode</td><td>ColorValueDisplayMode.Default</td><td>Determines which elements will be displayed in color picker's action section.</td></tr>
  </table>
  <h2 id="ColorPickerMethods"><a id="ColorPicker_methods" href="javascript: void(0)" class="anchor"><strong>ColorPicker</strong> Methods</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Arguments</th><th>Description</th></tr>
      <tr><td>Open</td><td>void</td><td>N/A</td><td>Opens the drop down of the color picker.</td></tr>
      <tr><td>Close</td><td>void</td><td>N/A</td><td>Closes the drop down of the color picker.</td></tr>
  </table>
  <h2 id="ColorPickerEvents"><a id="ColorPicker_events" href="javascript: void(0)" class="anchor"><strong>ColorPicker</strong> Events</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Description</th><th>Event Detail</th></tr>
      <tr><td>OnActionButtonClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when user clicks on the action button. 'Ok' button is visible only when &quot;applyValueMode&quot; is set to &quot;useButtons&quot;.</td><td>N/A</td></tr>
      <tr><td>ActionButtonClicked</td><td>event ColorPickerActionButtonClickedEventHandler</td><td>This event is triggered when user clicks on the action button. 'Ok' button is visible only when &quot;applyValueMode&quot; is set to &quot;useButtons&quot;.</td><td>ColorPickerActionButtonClickedEventArgs</td></tr>
      <tr><td>OnCancelButtonClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the cancel button is clicked. 'Cancel' button is visible only when &quot;applyValueMode&quot; is set to &quot;useButtons&quot;.</td><td>N/A</td></tr>
      <tr><td>CancelButtonClicked</td><td>event ColorPickerCancelButtonClickedEventHandler</td><td>This event is triggered when the cancel button is clicked. 'Cancel' button is visible only when &quot;applyValueMode&quot; is set to &quot;useButtons&quot;.</td><td>ColorPickerCancelButtonClickedEventArgs</td></tr>
      <tr><td>OnChange</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the color value is changed.</td><td>dynamic oldValue, dynamic value</td></tr>
      <tr><td>Changed</td><td>event ColorPickerChangedEventHandler</td><td>This event is triggered when the color value is changed.</td><td>ColorPickerChangedEventArgs</td></tr>
      <tr><td>OnClose</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the drop down is closed.</td><td>N/A</td></tr>
      <tr><td>Closed</td><td>event ColorPickerClosedEventHandler</td><td>This event is triggered when the drop down is closed.</td><td>ColorPickerClosedEventArgs</td></tr>
      <tr><td>OnClosing</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the drop down is about to be closed. This event allows to cancel the closing operation calling event.preventDefault() in the event handler function.</td><td>N/A</td></tr>
      <tr><td>Closing</td><td>event ColorPickerClosingEventHandler</td><td>This event is triggered when the drop down is about to be closed. This event allows to cancel the closing operation calling event.preventDefault() in the event handler function.</td><td>ColorPickerClosingEventArgs</td></tr>
      <tr><td>OnCustomColorSelection</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the custom color selection view is opened/closed. Custom color selection view is available when &quot;enableCustomColors&quot; property is true.</td><td>dynamic value</td></tr>
      <tr><td>CustomColorSelectioned</td><td>event ColorPickerCustomColorSelectionedEventHandler</td><td>This event is triggered when the custom color selection view is opened/closed. Custom color selection view is available when &quot;enableCustomColors&quot; property is true.</td><td>ColorPickerCustomColorSelectionedEventArgs</td></tr>
      <tr><td>OnDropDownButtonClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when user clicks on the drop down button.</td><td>N/A</td></tr>
      <tr><td>DropDownButtonClicked</td><td>event ColorPickerDropDownButtonClickedEventHandler</td><td>This event is triggered when user clicks on the drop down button.</td><td>ColorPickerDropDownButtonClickedEventArgs</td></tr>
      <tr><td>OnOkButtonClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the ok button is clicked.</td><td>N/A</td></tr>
      <tr><td>OkButtonClicked</td><td>event ColorPickerOkButtonClickedEventHandler</td><td>This event is triggered when the ok button is clicked.</td><td>ColorPickerOkButtonClickedEventArgs</td></tr>
      <tr><td>OnOpen</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the drop down is opened.</td><td>N/A</td></tr>
      <tr><td>Opened</td><td>event ColorPickerOpenedEventHandler</td><td>This event is triggered when the drop down is opened.</td><td>ColorPickerOpenedEventArgs</td></tr>
      <tr><td>OnOpening</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the drop down is about to be opened. This event allows to cancel the opening operation calling event.preventDefault() in the event handler function.</td><td>N/A</td></tr>
      <tr><td>Opening</td><td>event ColorPickerOpeningEventHandler</td><td>This event is triggered when the drop down is about to be opened. This event allows to cancel the opening operation calling event.preventDefault() in the event handler function.</td><td>ColorPickerOpeningEventArgs</td></tr>
      <tr><td>OnResizeStart</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when user starts resizing the drop down.</td><td>dynamic position</td></tr>
      <tr><td>ResizeStarted</td><td>event ColorPickerResizeStartedEventHandler</td><td>This event is triggered when user starts resizing the drop down.</td><td>ColorPickerResizeStartedEventArgs</td></tr>
      <tr><td>OnResizeEnd</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the resizing of the drop down is finished.</td><td>dynamic position</td></tr>
      <tr><td>ResizeEnded</td><td>event ColorPickerResizeEndedEventHandler</td><td>This event is triggered when the resizing of the drop down is finished.</td><td>ColorPickerResizeEndedEventArgs</td></tr>
    </table>
</div>

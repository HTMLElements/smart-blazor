@namespace Smart.Blazor
<div>

  <h2 id="GridProperties"><a id="Grid_properties" href="javascript: void(0)" class="anchor"><strong>Grid</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Appearance</td><td>GridAppearance</td><td>N/A</td><td>An object containing settings related to the grid's appearance.</td></tr>
      <tr><td>Behavior</td><td>GridBehavior</td><td>N/A</td><td>An object containing settings related to the grid's behavior.</td></tr>
      <tr><td>Layout</td><td>GridLayout</td><td>N/A</td><td>An object containing settings related to the grid's layout.</td></tr>
      <tr><td>Clipboard</td><td>GridClipboard</td><td>N/A</td><td>The <em>clipboard</em> property is used to enable/disable clipboard operations with Ctrl+C, Ctrl+X and Ctrl+V keyboard navigations..</td></tr>
      <tr><td>Columns</td><td>IEnumerable&lt;IGridColumn&gt;</td><td>[]</td><td>The <em>columns</em> property is used to describe all columns displayed in the grid. </td></tr>
      <tr><td>ColumnMenu</td><td>GridColumnMenu</td><td>N/A</td><td>Column Menu is the drop-down menu displayed after clicking the column header's drop-down button, which is displayed when you hover the column header. It allows you to customize column settings. For example: Sort, Filter or Group the Grid by the current column.</td></tr>
      <tr><td>ColumnGroups</td><td>IEnumerable&lt;IGridColumnGroup&gt;</td><td>N/A</td><td>Describes the settings of the column groups.</td></tr>
      <tr><td>ConditionalFormatting</td><td>IEnumerable&lt;IGridConditionalFormatting&gt;</td><td>N/A</td><td>Sets or gets details about conditional formatting to be applied to the Grid's cells.</td></tr>
      <tr><td>Charting</td><td>GridCharting</td><td>N/A</td><td>Sets the Grid Charting Data Visualization.</td></tr>
      <tr><td>CheckBoxes</td><td>GridCheckBoxes</td><td>N/A</td><td>Sets the TreeGrid checkboxes.</td></tr>
      <tr><td>DataExport</td><td>GridDataExport</td><td>N/A</td><td>Sets the Grid Data Export options.</td></tr>
      <tr><td>DataSource</td><td>IEnumerable&lt;object&gt;</td><td>N/A</td><td>Sets the grid's data source. The value of <em>dataSource</em> can be an instance of JQX.DataAdapter.</td></tr>
      <tr><td>Editing</td><td>GridEditing</td><td>N/A</td><td>Describes the grid's editing settings.</td></tr>
      <tr><td>Filtering</td><td>GridFiltering</td><td>N/A</td><td>Describes the grid's filtering settings.</td></tr>
      <tr><td>Grouping</td><td>GridGrouping</td><td>N/A</td><td>Describes the grid's grouping settings.</td></tr>
      <tr><td>Messages</td><td>object</td><td>N/A</td><td>Sets the messages values.</td></tr>
      <tr><td>OnCellValue</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when the Grid needs a cell value to render it. When you implement this function, you can override the default cell value rendering.</td></tr>
      <tr><td>OnCellUpdate</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a cell value will be updated. This function is useful if you want to make Ajax call to a server to validate the cell changes. If the changes are validated, invoke the <em>confirm</em> function.</td></tr>
      <tr><td>OnCellRender</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a cell is rendered. This function is useful if you want to customize GridCell properties, before the cell is rendered.</td></tr>
      <tr><td>OnBeforeInit</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function() called before the grid has been initialized and the Grid's Virtual DOM is not created.</td></tr>
      <tr><td>OnInit</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function() called when the grid is initializing and the Grid's Virtual DOM is created.</td></tr>
      <tr><td>OnAfterInit</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function() called after the grid has been initialized and the Grid's Virtual DOM is created.</td></tr>
      <tr><td>OnChartInit</td><td>object</td><td>N/A</td><td>Callback function(chart: JQX.Chart) called when the chart has been initialized. You can use this function to customize the Chart element settings.</td></tr>
      <tr><td>OnRender</td><td>object</td><td>N/A</td><td>Callback function() called when the grid has been rendered.</td></tr>
      <tr><td>OnKey</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function(event: KeyboardEvent) called when the grid is on focus and a keyboard key is pressed.</td></tr>
      <tr><td>OnRowInit</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a row is initializing. This function can be used to customize the row settings.</td></tr>
      <tr><td>OnRowDetailInit</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a row detail is initializing. Row details are displayed below the row's data or in a separate dialog.</td></tr>
      <tr><td>OnRowDetailUpdated</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a row detail is udpating.</td></tr>
      <tr><td>OnRowInserted</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function which is called when a row has been inserted.</td></tr>
      <tr><td>OnRowRemoved</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a row has been removed.</td></tr>
      <tr><td>OnRowUpdate</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when row's cell values will be updated. This function is useful if you want to make Ajax call to a server to validate the edit changes. If the changes are validated, invoke the <em>confirm</em> function.</td></tr>
      <tr><td>OnRowUpdated</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, called when a row has been updated.</td></tr>
      <tr><td>OnColumnInit</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a column has been initialized. This function can be used to customize the column settings.</td></tr>
      <tr><td>OnColumnInserted</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which called when a column has been inserted.</td></tr>
      <tr><td>OnColumnRemoved</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a column has been removed.</td></tr>
      <tr><td>OnColumnUpdated</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a column has been updated.</td></tr>
      <tr><td>OnCommand</td><td>Action&lt;object&gt;</td><td>N/A</td><td>Callback function, which is called when a command is executed. The <em>name</em> argument is the command's name. The <em>command</em> argument is the command's function. <em>details</em> are built in command arguments passed by the Grid. The <em>handled</em> parameter allows you to cancel built-in command, because when you set it to <em>true</em> the Grid will not execute the default command's behavior.</td></tr>
      <tr><td>Paging</td><td>GridPaging</td><td>N/A</td><td>Describes the paging settings.</td></tr>
      <tr><td>Pager</td><td>GridPager</td><td>N/A</td><td>Describes the pager settings.</td></tr>
      <tr><td>RowDetail</td><td>GridRowDetail</td><td>N/A</td><td>Sets the row details.</td></tr>
      <tr><td>Scrolling</td><td>Scrolling</td><td>Scrolling.Physical</td><td>Sets the scroll mode settings.</td></tr>
      <tr><td>ColumnHeader</td><td>GridColumnHeader</td><td>N/A</td><td>Describes the column header settings.</td></tr>
      <tr><td>SummaryRow</td><td>GridSummaryRow</td><td>N/A</td><td>Describes the summary row settings.</td></tr>
      <tr><td>GroupHeader</td><td>GridGroupHeader</td><td>N/A</td><td>Describes the settings for the group header.</td></tr>
      <tr><td>Header</td><td>GridHeader</td><td>N/A</td><td>Describes the header settings of the grid.</td></tr>
      <tr><td>Footer</td><td>GridFooter</td><td>N/A</td><td>Describes the footer settings of the grid.</td></tr>
      <tr><td>Rows</td><td>IEnumerable&lt;IGridRow&gt;</td><td>N/A</td><td>The <em>rows</em> property is used to describe all rows displayed in the grid.</td></tr>
      <tr><td>Selection</td><td>GridSelection</td><td>N/A</td><td>Describes the selection settings.</td></tr>
      <tr><td>Sorting</td><td>GridSorting</td><td>N/A</td><td>Describes sorting settings.</td></tr>
  </table>
  <h2 id="GridMethods"><a id="Grid_methods" href="javascript: void(0)" class="anchor"><strong>Grid</strong> Methods</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Arguments</th><th>Description</th></tr>
      <tr><td>AddNewRow</td><td>bool</td><td>string position</td><td>Adds a new row and puts it into edit mode. When batch editing is enabled, the row is not saved until the batch edit is saved.</td></tr>
      <tr><td>AddUnboundRow</td><td>bool</td><td>int count, string position</td><td>Adds a new unbound row to the top or bottom. Unbound rows are not part of the Grid's dataSource. They become part of the dataSource, after an unbound row is edited.</td></tr>
      <tr><td>AddFilter</td><td>void</td><td>string dataField, string filter, bool refreshFilters</td><td>Adds a filter to a column. This method will apply a filter to the Grid data.</td></tr>
      <tr><td>AutoSizeRows</td><td>void</td><td>N/A</td><td>Auto-sizes grid rows. This method will update the <em>height</em> of all Grid rows.</td></tr>
      <tr><td>AutoSizeColumns</td><td>void</td><td>N/A</td><td>Auto-sizes grid columns. This method will update the <em>width</em> of all Grid columns.</td></tr>
      <tr><td>BeginUpdate</td><td>void</td><td>N/A</td><td>Starts an update operation. This is appropriate when calling multiple methods or set multiple properties at once.</td></tr>
      <tr><td>BeginEdit</td><td>bool</td><td>object rowId, string dataField</td><td>Begins row, cell or column. This method allows you to programmatically start a cell, row or column editing. After calling it, an editor HTMLElement will be created and displayed in the Grid.</td></tr>
      <tr><td>ClearFilter</td><td>void</td><td>N/A</td><td>Clears all filters. Refreshes the view and updates all filter input components.</td></tr>
      <tr><td>ClearSelection</td><td>void</td><td>N/A</td><td>Clears the selection that user have made. All row, cell and column selection highlights will be removed.</td></tr>
      <tr><td>CancelEdit</td><td>void</td><td>N/A</td><td>Cancels the editing. This method closes the cell editor and cancels the changes.</td></tr>
      <tr><td>CheckRow</td><td>void</td><td>object rowId</td><td>Checks a TreeGrid row. This method updates the row's check-box.</td></tr>
      <tr><td>CheckAllRows</td><td>void</td><td>N/A</td><td>Checks all TreeGrid or Grouping rows. This method updates all check-boxes in the TreeGrid or Grouping rows.</td></tr>
      <tr><td>ClearRows</td><td>void</td><td>N/A</td><td>Clears the user selection and empties the data source. The Grid will display 'No Rows' in the view.</td></tr>
      <tr><td>CloseMenu</td><td>void</td><td>N/A</td><td>Closes the column drop-down menu.</td></tr>
      <tr><td>CollapseRow</td><td>void</td><td>object rowId</td><td>Collapses a TreeGrid or Grouping row.</td></tr>
      <tr><td>CollapseAllRows</td><td>void</td><td>N/A</td><td>Collapses all TreeGrid or Grouping rows.</td></tr>
      <tr><td>CreateChart</td><td>void</td><td>string type, IEnumerable&lt;object&gt; dataSource</td><td>Creates a Chart, when charting is enabled.</td></tr>
      <tr><td>DeleteRow</td><td>void</td><td>object rowId</td><td>Delete a row. When batch editing is enabled, the row is not saved until the batch edit is saved.</td></tr>
      <tr><td>EnsureVisible</td><td>bool</td><td>object rowId, string dataField</td><td>Scrolls to a row or cell. This method scrolls to a row or cell, when scrolling is necessary. If pagination is enabled, it will automatically change the page.</td></tr>
      <tr><td>EndEdit</td><td>void</td><td>N/A</td><td>Ends the editing. This method confirms all changes and closes the opened cell editor(s).</td></tr>
      <tr><td>EndUpdate</td><td>void</td><td>bool refresh</td><td>Ends the update operation. This method will resume the rendering and will refresh the Grid.</td></tr>
      <tr><td>ExpandRow</td><td>void</td><td>object rowId</td><td>Expands a TreeGrid or Grouping row.</td></tr>
      <tr><td>ExpandAllRows</td><td>void</td><td>N/A</td><td>Expands all TreeGrid or Grouping rows.</td></tr>
      <tr><td>ExportData</td><td>void</td><td>string Dataformat</td><td>Exports the Grid data to .XLSX, .PDF, .JSON, .XML, .CSV, .TSV, .HTML, .JPEG or .PNG. The method uses the options of the <em>dataExport</em> property.</td></tr>
      <tr><td>GetSortedColumns</td><td>object</td><td>N/A</td><td>Gets an array of columns with applied sorting.</td></tr>
      <tr><td>GetSelection</td><td>object</td><td>N/A</td><td>Gets the selection.</td></tr>
      <tr><td>GetFilteredColumns</td><td>object</td><td>N/A</td><td>Gets an array of columns with applied filters.</td></tr>
      <tr><td>GetVisibleRows</td><td>object</td><td>N/A</td><td>Gets an array of rows, which are visible and match the applied filter.</td></tr>
      <tr><td>GetViewRows</td><td>object</td><td>N/A</td><td>Gets the result of the getVisibleRows or the rows hierarchy, when the Grid is in TreeGrid/Grouping mode.</td></tr>
      <tr><td>GetBatchEditChanges</td><td>object</td><td>N/A</td><td>Gets the changes from the batch edit.</td></tr>
      <tr><td>HasMenu</td><td>bool</td><td>N/A</td><td>Gets whether a column's drop-down menu is opened.</td></tr>
      <tr><td>HideDetail</td><td>void</td><td>object rowId</td><td>Hides the Details of a Row, when row details are enabled.</td></tr>
      <tr><td>OpenMenu</td><td>void</td><td>string dataField</td><td>Opens a column drop-down menu.</td></tr>
      <tr><td>Print</td><td>void</td><td>N/A</td><td>Prints the Grid data. The method uses the options of the <em>dataExport</em> property. When printed, the Grid will not display any scrollbars so all rows and columns will be displayed. The grid will auto resize width and height to fit all contents. To customize the printing options, you can use  the <em>dataExport</em> property.</td></tr>
      <tr><td>Render</td><td>void</td><td>N/A</td><td>Renders the grid. This method will make a full-refresh like in the initial Grid creation. It will create Rows, Columns and Cells HTML Elements and then refresh the Grid layout.</td></tr>
      <tr><td>Refresh</td><td>void</td><td>N/A</td><td>Refreshes the grid with the current property values. This method will refresh the Grid layout.</td></tr>
      <tr><td>RefreshView</td><td>void</td><td>N/A</td><td>Refreshes the grid cells in view. The method is useful for live-updates of cell values.</td></tr>
      <tr><td>RemoveFilter</td><td>void</td><td>string dataField, bool refreshFilters</td><td>Removes a column filter. </td></tr>
      <tr><td>RevertBatchEdit</td><td>void</td><td>N/A</td><td>Reverts the batch edit changes. This method cancels all changes made by the end-user.</td></tr>
      <tr><td>SaveBatchEdit</td><td>void</td><td>N/A</td><td>Saves the batch edit changes. This method confirms the editing changes made by the end-user.</td></tr>
      <tr><td>Select</td><td>void</td><td>object rowId, string dataField</td><td>Selects a row, cell or column.</td></tr>
      <tr><td>SelectRange</td><td>void</td><td>object rowId, string dataField, object endRowId, string endDataField</td><td>Selects a range of rows, cells or columns. The result of the method depends on the <em>selection</em> configuration of the Grid.</td></tr>
      <tr><td>ShowDetail</td><td>void</td><td>object rowId</td><td>Shows the Details of a Row, when row details are enabled.</td></tr>
      <tr><td>Unselect</td><td>void</td><td>object rowId, string dataField</td><td>Unselects a row, cell or column.</td></tr>
      <tr><td>UncheckRow</td><td>void</td><td>object rowId</td><td>Unchecks a TreeGrid row. Sets its check-box to false.</td></tr>
      <tr><td>UncheckAllRows</td><td>void</td><td>N/A</td><td>Unchecks all TreeGrid or Grouping rows. Sets all check-boxes to false.</td></tr>
      <tr><td>ToggleRow</td><td>void</td><td>object rowId</td><td>Toggles a TreeGrid row. When this method is called, the row is expanded, if it's state is collapsed and collapsed if it's state is expanded.</td></tr>
  </table>
  <h2 id="GridEvents"><a id="Grid_events" href="javascript: void(0)" class="anchor"><strong>Grid</strong> Events</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Description</th><th>Event Detail</th></tr>
      <tr><td>OnBeginEdit</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the edit begins.</td><td>dynamic row, dynamic column, dynamic cell</td></tr>
      <tr><td>BeginEdited</td><td>event GridBeginEditedEventHandler</td><td>This event is triggered, when the edit begins.</td><td>GridBeginEditedEventArgs</td></tr>
      <tr><td>OnChange</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the selection is changed. When you select with a drag, the event is triggered when the drag starts and ends. </td><td>bool started, bool finished, Event originalEvent</td></tr>
      <tr><td>Changed</td><td>event GridChangedEventHandler</td><td>This event is triggered, when the selection is changed. When you select with a drag, the event is triggered when the drag starts and ends. </td><td>GridChangedEventArgs</td></tr>
      <tr><td>OnColumnClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user clicks on the header of a column.</td><td>dynamic column, dynamic originalEvent</td></tr>
      <tr><td>ColumnClicked</td><td>event GridColumnClickedEventHandler</td><td>This event is triggered, when the user clicks on the header of a column.</td><td>GridColumnClickedEventArgs</td></tr>
      <tr><td>OnColumnDoubleClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user double clicks on the header of a column.</td><td>dynamic column, dynamic originalEvent</td></tr>
      <tr><td>ColumnDoubleClicked</td><td>event GridColumnDoubleClickedEventHandler</td><td>This event is triggered, when the user double clicks on the header of a column.</td><td>GridColumnDoubleClickedEventArgs</td></tr>
      <tr><td>OnColumnResize</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user resized a column.</td><td>dynamic column, string oldWidth, string width</td></tr>
      <tr><td>ColumnResized</td><td>event GridColumnResizedEventHandler</td><td>This event is triggered, when the user resized a column.</td><td>GridColumnResizedEventArgs</td></tr>
      <tr><td>OnColumnDragStart</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user starts a column drag.</td><td>dynamic column, int index, dynamic originalEvent</td></tr>
      <tr><td>ColumnDragStarted</td><td>event GridColumnDragStartedEventHandler</td><td>This event is triggered, when the user starts a column drag.</td><td>GridColumnDragStartedEventArgs</td></tr>
      <tr><td>OnColumnDragging</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user drags a column.</td><td>dynamic column, int index, dynamic data, dynamic originalEvent</td></tr>
      <tr><td>ColumnDragging</td><td>event GridColumnDraggingEventHandler</td><td>This event is triggered, when the user drags a column.</td><td>GridColumnDraggingEventArgs</td></tr>
      <tr><td>OnColumnDragEnd</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user drags a column.</td><td>dynamic column, int index, dynamic newIndex, dynamic data, dynamic originalEvent</td></tr>
      <tr><td>ColumnDragEnded</td><td>event GridColumnDragEndedEventHandler</td><td>This event is triggered, when the user drags a column.</td><td>GridColumnDragEndedEventArgs</td></tr>
      <tr><td>OnRowDragStart</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user starts a row drag.</td><td>dynamic row, int index, dynamic originalEvent</td></tr>
      <tr><td>RowDragStarted</td><td>event GridRowDragStartedEventHandler</td><td>This event is triggered, when the user starts a row drag.</td><td>GridRowDragStartedEventArgs</td></tr>
      <tr><td>OnRowDragging</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user drags a row.</td><td>dynamic row, int index, dynamic data, dynamic originalEvent</td></tr>
      <tr><td>RowDragging</td><td>event GridRowDraggingEventHandler</td><td>This event is triggered, when the user drags a row.</td><td>GridRowDraggingEventArgs</td></tr>
      <tr><td>OnRowDragEnd</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user drags a row.</td><td>dynamic row, int index, dynamic newIndex, dynamic data, dynamic originalEvent</td></tr>
      <tr><td>RowDragEnded</td><td>event GridRowDragEndedEventHandler</td><td>This event is triggered, when the user drags a row.</td><td>GridRowDragEndedEventArgs</td></tr>
      <tr><td>OnRowExpand</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user expands a row of the grid. The Grid is in TreeGrid/Grouping mode.</td><td>dynamic row, dynamic originalEvent</td></tr>
      <tr><td>RowExpanded</td><td>event GridRowExpandedEventHandler</td><td>This event is triggered, when the user expands a row of the grid. The Grid is in TreeGrid/Grouping mode.</td><td>GridRowExpandedEventArgs</td></tr>
      <tr><td>OnRowCollapse</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user collapsed a row of the grid. The Grid is in TreeGrid/Grouping mode.</td><td>dynamic row, dynamic originalEvent</td></tr>
      <tr><td>RowCollapsed</td><td>event GridRowCollapsedEventHandler</td><td>This event is triggered, when the user collapsed a row of the grid. The Grid is in TreeGrid/Grouping mode.</td><td>GridRowCollapsedEventArgs</td></tr>
      <tr><td>OnRowClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user clicks on a row of the grid.</td><td>dynamic row, dynamic originalEvent</td></tr>
      <tr><td>RowClicked</td><td>event GridRowClickedEventHandler</td><td>This event is triggered, when the user clicks on a row of the grid.</td><td>GridRowClickedEventArgs</td></tr>
      <tr><td>OnRowDoubleClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user double clicks on a row of the grid.</td><td>dynamic row, dynamic originalEvent</td></tr>
      <tr><td>RowDoubleClicked</td><td>event GridRowDoubleClickedEventHandler</td><td>This event is triggered, when the user double clicks on a row of the grid.</td><td>GridRowDoubleClickedEventArgs</td></tr>
      <tr><td>OnRowResize</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user resized a row.</td><td>dynamic row, dynamic oldHeight, dynamic height</td></tr>
      <tr><td>RowResized</td><td>event GridRowResizedEventHandler</td><td>This event is triggered, when the user resized a row.</td><td>GridRowResizedEventArgs</td></tr>
      <tr><td>OnCellClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user clicks on a cell of the grid.</td><td>dynamic cell, dynamic originalEvent</td></tr>
      <tr><td>CellClicked</td><td>event GridCellClickedEventHandler</td><td>This event is triggered, when the user clicks on a cell of the grid.</td><td>GridCellClickedEventArgs</td></tr>
      <tr><td>OnCellDoubleClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user double clicks on a cell of the grid.</td><td>dynamic cell, dynamic originalEvent</td></tr>
      <tr><td>CellDoubleClicked</td><td>event GridCellDoubleClickedEventHandler</td><td>This event is triggered, when the user double clicks on a cell of the grid.</td><td>GridCellDoubleClickedEventArgs</td></tr>
      <tr><td>OnEndEdit</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the edit ends.</td><td>dynamic row, dynamic column, dynamic cell</td></tr>
      <tr><td>EndEdited</td><td>event GridEndEditedEventHandler</td><td>This event is triggered, when the edit ends.</td><td>GridEndEditedEventArgs</td></tr>
      <tr><td>OnFilter</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when a filter is added or removed.</td><td>dynamic columns, dynamic data</td></tr>
      <tr><td>Filtered</td><td>event GridFilteredEventHandler</td><td>This event is triggered, when a filter is added or removed.</td><td>GridFilteredEventArgs</td></tr>
      <tr><td>OnRowTap</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the user touches and holds on the row for at least 300ms.</td><td>dynamic row, dynamic originalEvent</td></tr>
      <tr><td>RowTaped</td><td>event GridRowTapedEventHandler</td><td>This event is triggered when the user touches and holds on the row for at least 300ms.</td><td>GridRowTapedEventArgs</td></tr>
      <tr><td>OnCellTap</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the user touches and holds on the cell for at least 300ms.</td><td>dynamic cell, dynamic originalEvent</td></tr>
      <tr><td>CellTaped</td><td>event GridCellTapedEventHandler</td><td>This event is triggered when the user touches and holds on the cell for at least 300ms.</td><td>GridCellTapedEventArgs</td></tr>
      <tr><td>OnPage</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user changes the pages.</td><td>N/A</td></tr>
      <tr><td>Paged</td><td>event GridPagedEventHandler</td><td>This event is triggered, when the user changes the pages.</td><td>GridPagedEventArgs</td></tr>
      <tr><td>OnSort</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when a sorting column is added or removed.</td><td>dynamic columns, dynamic data</td></tr>
      <tr><td>Sorted</td><td>event GridSortedEventHandler</td><td>This event is triggered, when a sorting column is added or removed.</td><td>GridSortedEventArgs</td></tr>
      <tr><td>OnScrollBottomReached</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user reaches the bottom of the grid.</td><td>N/A</td></tr>
      <tr><td>ScrollBottomReached</td><td>event GridScrollBottomReachedEventHandler</td><td>This event is triggered, when the user reaches the bottom of the grid.</td><td>GridScrollBottomReachedEventArgs</td></tr>
      <tr><td>OnScrollTopReached</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered, when the user reaches the top of the grid.</td><td>N/A</td></tr>
      <tr><td>ScrollTopReached</td><td>event GridScrollTopReachedEventHandler</td><td>This event is triggered, when the user reaches the top of the grid.</td><td>GridScrollTopReachedEventArgs</td></tr>
    </table>
  <h2 id="ColumnProperties"><a id="Column_properties" href="javascript: void(0)" class="anchor"><strong>Column</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Align</td><td>HorizontalAlignment</td><td>HorizontalAlignment.Left</td><td>Sets or gets the column's header alignment. Accepts: 'left', 'right', 'center'</td></tr>
      <tr><td>AllowExport</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be exported.</td></tr>
      <tr><td>AllowGroup</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be grouped.</td></tr>
      <tr><td>AllowHide</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be hidden.</td></tr>
      <tr><td>AllowSelect</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be selected.</td></tr>
      <tr><td>AllowEdit</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be edited.</td></tr>
      <tr><td>AllowSort</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be sorted.</td></tr>
      <tr><td>AllowHeaderEdit</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be edited, when header editing is enabled.</td></tr>
      <tr><td>AllowFilter</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be filtered.</td></tr>
      <tr><td>AllowReorder</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be reordered.</td></tr>
      <tr><td>AllowResize</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be resized.</td></tr>
      <tr><td>CellsFormat</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the column's cells format.</td></tr>
      <tr><td>CellsAlign</td><td>HorizontalAlignment</td><td>HorizontalAlignment.Left</td><td>Sets or gets the column's cells alignment. Accepts: 'left', 'right' and 'center'</td></tr>
      <tr><td>CellsWrap</td><td>bool</td><td>false</td><td>Sets or gets the column's cells wrapping. Accepts: true or false.</td></tr>
      <tr><td>CellsVerticalAlign</td><td>VerticalAlignment</td><td>VerticalAlignment.Center</td><td>Sets or gets the column's cells vertical alignment. Accepts: 'top', 'bottom' and 'center'</td></tr>
      <tr><td>ColumnGroup</td><td>string</td><td>&quot;&quot;</td><td>Sets the name of the column group.</td></tr>
      <tr><td>DataField</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the column's data source bound field.</td></tr>
      <tr><td>DisplayField</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the column's data source bound field which will be displayed to the user. When the property is not set, it is equal to the 'dataField'.</td></tr>
      <tr><td>Element</td><td>object</td><td>null</td><td>Gets the HTML Element. The property returns null when the Column is not in the View.</td></tr>
      <tr><td>Editor</td><td>object</td><td>null</td><td>Sets or gets the column's editor. The property expects 'input', 'autoComplete', 'numberInput', 'checkBox', 'deteTimePicker', 'timeInput', 'dateInput', 'maskedTextBox', 'textArea' or a custom object with 'template' property which defines the editor type, 'onInit' and 'onRender' callback functions.</td></tr>
      <tr><td>Freeze</td><td>string</td><td>&quot;false&quot;</td><td>Sets or gets the Freeze mode. Accepts: 'near', 'far', true and false. Freezes/Pins the column to left(near) or right(far).</td></tr>
      <tr><td>Filter</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the filter of the column.</td></tr>
      <tr><td>FormatSettings</td><td>object</td><td>new object()</td><td>Sets or gets the column's format settings. You can use any of the build in formatting options or to NumberFormat object like that: 'Intl: {  NumberFormat: {  style: \'currency\', currency: \'EUR\' }}' or DateTimeFormat object like that: 'Intl: {  DateTimeFormat: {  dateStyle: \'full\' }}''</td></tr>
      <tr><td>Group</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the column's group.</td></tr>
      <tr><td>Icon</td><td>object</td><td>&quot;&quot;</td><td>Sets or gets the column's icon. Expects CSS class name.</td></tr>
      <tr><td>Label</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the text displayed in the column's header.</td></tr>
      <tr><td>MinWidth</td><td>int</td><td>30</td><td>Sets or gets the minimum width.</td></tr>
      <tr><td>SortOrder</td><td>GridColumnSortOrder</td><td>GridColumnSortOrder.Null</td><td>Sets or gets the sort order of the column. Accepts: 'asc', 'desc' and null.</td></tr>
      <tr><td>ShowActionButton</td><td>bool</td><td>false</td><td>Sets or gets whether the column's header action drop-down button is displayed. This button opens the column's menu.</td></tr>
      <tr><td>ShowIcon</td><td>bool</td><td>false</td><td>Sets or gets whether the column's header icon is displayed.</td></tr>
      <tr><td>ShowDescriptionButton</td><td>bool</td><td>false</td><td>Sets or gets whether the column's header description button is displayed.</td></tr>
      <tr><td>Width</td><td>object</td><td>&quot;&quot;</td><td>Sets or gets the width. Accepts: 'number', 'px', 'em', 'auto', 'null' values.</td></tr>
      <tr><td>Template</td><td>object</td><td>&quot;&quot;</td><td>Sets or gets the column's template. The property expects the 'id' of HTMLTemplateElement or HTML string which is displayed in the cells. Built-in values are: 'checkBox', 'url', 'email', </td></tr>
      <tr><td>ValidationRules</td><td>IEnumerable&lt;object&gt;</td><td>new List&lt;object&gt;()</td><td>Sets or gets the column's validation rules. Accepts: Object with 'type' string property. It can be 'required', 'min', 'max', 'minLength', 'maxLength', 'email', 'null', 'requiredTrue', 'minData', 'maxDate', 'pattern'. The object needs to have additional 'value' property for all validation rule types except 'email', 'required', 'requiredTrue' and 'null'. Optional property is 'message', which allows you to define user string displayed on validation error.</td></tr>
      <tr><td>VerticalAlign</td><td>VerticalAlignment</td><td>VerticalAlignment.Center</td><td>Sets or gets the column's header vertical alignment. Accepts: 'top', 'bottom' and 'center'</td></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets or gets whether the column is visible. Set the property to 'false' to hide the column.</td></tr>
    </table>
  <h2 id="GridAppearanceProperties"><a id="GridAppearance_properties" href="javascript: void(0)" class="anchor"><strong>GridAppearance</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AlternationStart</td><td>int</td><td>0</td><td>Starting row index of alternating colors.</td></tr>
      <tr><td>AlternationEnd</td><td>int</td><td>0</td><td>Ending row index of alternating colors.</td></tr>
      <tr><td>AlternationCount</td><td>int</td><td>0</td><td>number of row color alternations.</td></tr>
      <tr><td>AllowColumnStickyPosition</td><td>bool</td><td>false</td><td>Enables sticky columns.</td></tr>
      <tr><td>AllowHover</td><td>bool</td><td>false</td><td>Enables row hover effect. Applies a hover style to the cells.</td></tr>
      <tr><td>AllowHeaderHover</td><td>bool</td><td>true</td><td>Enables header hover effect. Applies a hover style to the headers.</td></tr>
      <tr><td>AllowRowToggleAnimation</td><td>bool</td><td>false</td><td>Enables row toggle animation. This animation starts when you expand/collapse a row in TreeGrid/Grouping mode.</td></tr>
      <tr><td>AllowRowDetailToggleAnimation</td><td>bool</td><td>false</td><td>Enables row detail toggle animation. This animation starts when you expand/collapse a row in TreeGrid/Grouping mode.</td></tr>
      <tr><td>AllowSortAnimation</td><td>bool</td><td>false</td><td>Enables sorting animation. Data records are sorted with animation, when sorting is applied.</td></tr>
      <tr><td>AllowColumnLabelAnimation</td><td>bool</td><td>true</td><td>Enables column label animation. The label is moved to 'left' with animation, when the column header's drop-down button is displayed on hover or sorting is applied.</td></tr>
      <tr><td>AllowColumnMenuAnimation</td><td>bool</td><td>true</td><td>Enables column menu animation. When you click on the column header's drop-down button, the menu is animated.</td></tr>
      <tr><td>AllowColumnSortButtonAnimation</td><td>bool</td><td>true</td><td>Enables column sort button animation. When you click on a sortable column to change the sort order, the sort button is animated.</td></tr>
      <tr><td>AllowColumnActionButtonAnimation</td><td>bool</td><td>true</td><td>Enables column action button animation. The drop-down button displayed on column header hover is optionally animated.</td></tr>
      <tr><td>AllowColumnFilterButtonAnimation</td><td>bool</td><td>true</td><td>Enables column filter button animation.</td></tr>
      <tr><td>AutoShowColumnSortButton</td><td>bool</td><td>true</td><td>If enabled, automatically shows column sort button. The sort button is displayed only when the column is sorted. If the property's value is false, sort button will be always displayed to indicate that sorting is possible.</td></tr>
      <tr><td>AutoShowColumnActionButton</td><td>bool</td><td>true</td><td>If enabled, automatically shows column action button.</td></tr>
      <tr><td>AutoShowColumnFilterButton</td><td>bool</td><td>true</td><td>If enabled, automatically shows column filter button.</td></tr>
      <tr><td>AutoGenerateRowLabelMode</td><td>string</td><td>&quot;number&quot;</td><td>Generates labels as 'numbers' or 'letters'. This property affects the rendering of the row header.</td></tr>
      <tr><td>AutoGenerateColumnLabelMode</td><td>string</td><td>&quot;letter&quot;</td><td>Generates labels as 'numbers' or 'letters.  This property affects the rendering of the column header.</td></tr>
      <tr><td>DisplayLoadingIndicator</td><td>bool</td><td>false</td><td>Sets the visibility of the loading indicator. This is the Loading... image displayed in the Grid while loading data.</td></tr>
      <tr><td>LoadingIndicatorPlaceholder</td><td>string</td><td>&quot;Loading...&quot;</td><td>Sets the loading indicator label.  This is the Text displayed while loading data.</td></tr>
      <tr><td>Placeholder</td><td>string</td><td>&quot;No Rows&quot;</td><td>Sets the placeholder of the Grid. The placeholder is displayed when the Grid is empty.</td></tr>
      <tr><td>SortAnimationDuration</td><td>int</td><td>500</td><td>Sets the duration of sorting animation. This property is related to the <em>allowSortAnimation</em> property.</td></tr>
      <tr><td>ShowRowHeader</td><td>bool</td><td>false</td><td>Shows or hides Row header.</td></tr>
      <tr><td>ShowRowHeaderNumber</td><td>bool</td><td>false</td><td>Shows row indexes in the row header. The <em>showRowHeader</em> property should be <em>true</em></td></tr>
      <tr><td>ShowRowHeaderEditIcon</td><td>bool</td><td>true</td><td>Shows edit icon when a cell or row is in edit state.</td></tr>
      <tr><td>ShowRowHeaderSelectIcon</td><td>bool</td><td>false</td><td>Shows select icon when the pointer is over the row header cell.</td></tr>
      <tr><td>ShowRowHeaderFocusIcon</td><td>bool</td><td>false</td><td>Shows focus icon on cell or row focus.</td></tr>
      <tr><td>ShowRowHeaderDragIcon</td><td>bool</td><td>false</td><td>Shows drag icon on the row header. </td></tr>
      <tr><td>ShowColumnHeaderLines</td><td>bool</td><td>true</td><td>Shows column header lines.</td></tr>
      <tr><td>ShowColumnLines</td><td>bool</td><td>true</td><td>Shows column lines.</td></tr>
      <tr><td>ShowRowLines</td><td>bool</td><td>true</td><td>Shows row lines.</td></tr>
      <tr><td>ShowFilterColumnBackground</td><td>bool</td><td>true</td><td>Shows filtered column background, when filter is applied.</td></tr>
      <tr><td>ShowSortColumnBackground</td><td>bool</td><td>true</td><td>Shows sorted column background, when sorting is applied.</td></tr>
      <tr><td>ShowFrozenColumnBackground</td><td>bool</td><td>true</td><td>Shows frozen column background, when the Grid has frozen columns.</td></tr>
      <tr><td>ShowFrozenRowBackground</td><td>bool</td><td>true</td><td>Shows filtered row background, when the Grid has frozen rows.</td></tr>
      <tr><td>ShowColumnSortButton</td><td>bool</td><td>true</td><td>Shows column sort button.</td></tr>
      <tr><td>ShowColumnFilterButton</td><td>bool</td><td>true</td><td>Shows column filter button.</td></tr>
      <tr><td>ShowColumnDescriptionButton</td><td>bool</td><td>false</td><td>Shows column description button. The button's style is customizable through the Grid CSS.</td></tr>
      <tr><td>ShowColumnIcon</td><td>bool</td><td>false</td><td>Shows column icon within the column's header.</td></tr>
      <tr><td>ShowColumnCustomButton</td><td>bool</td><td>false</td><td>Shows column custom button. User-defined button shown in the column header.</td></tr>
      <tr><td>ShowColumnActionButton</td><td>bool</td><td>true</td><td>Shows column action button. This is the drop-down button displayed in the column header.</td></tr>
      <tr><td>ShowTooltips</td><td>bool</td><td>false</td><td>Shows tooltips when user hovers columns or cells.</td></tr>
      <tr><td>ShowHorizontalScrollBarOnFixedColumns</td><td>bool</td><td>false</td><td>Shows horizontal scrollbar on fixed columns.</td></tr>
      <tr><td>ShowVerticalScrollBarOnFixedColumns</td><td>bool</td><td>false</td><td>Shows vertical scrollbar on fixed columns.</td></tr>
    </table>
  <h2 id="GridBehaviorProperties"><a id="GridBehavior_properties" href="javascript: void(0)" class="anchor"><strong>GridBehavior</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AllowColumnAutoSizeOnDoubleClick</td><td>bool</td><td>true</td><td>Auto-Resize on double-click of a column's right border.</td></tr>
      <tr><td>AllowRowAutoSizeOnDoubleClick</td><td>bool</td><td>true</td><td>Auto-Resize on double-click of a row's bottom border.</td></tr>
      <tr><td>AllowRowReorder</td><td>bool</td><td>false</td><td>Determines whether row reorder is enabled.</td></tr>
      <tr><td>AllowColumnReorder</td><td>bool</td><td>false</td><td>Determines whether column reorder is enabled.</td></tr>
      <tr><td>ColumnResizeMode</td><td>GridResizeMode</td><td>GridResizeMode.None</td><td>Sets the column resize mode. <em>split</em> resize mode 'grows' or 'shrinks' the resize element's size and 'shrinks' or 'grows' the next sibling element's size. <em>growAndShrink</em> resize mode 'grows' or 'shrinks' the resize element's size</td></tr>
      <tr><td>RowResizeMode</td><td>GridResizeMode</td><td>GridResizeMode.None</td><td>Sets the row resize mode. <em>split</em> resize mode 'grows' or 'shrinks' the resize element's size and 'shrinks' or 'grows' the next sibling element's size. <em>growAndShrink</em> resize mode 'grows' or 'shrinks' the resize element's size</td></tr>
    </table>
  <h2 id="GridLayoutProperties"><a id="GridLayout_properties" href="javascript: void(0)" class="anchor"><strong>GridLayout</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AllowCellsWrap</td><td>bool</td><td>false</td><td>Enables or disables the Cells Value wrapping. When the property is <em>true</em>, cell value can wrap in multiple lines.</td></tr>
      <tr><td>AutoGenerateColumnWidth</td><td>int</td><td>-1</td><td>Sets the width of the auto-generated Grid columns.</td></tr>
      <tr><td>ColumnWidth</td><td>object</td><td>null</td><td>Sets the width of the Grid columns.</td></tr>
      <tr><td>ColumnHeight</td><td>object</td><td>null</td><td>Sets the height of the Grid columns.</td></tr>
      <tr><td>ColumnMinHeight</td><td>object</td><td>30</td><td>Sets the minimum height of the Grid columns.</td></tr>
      <tr><td>RowMinHeight</td><td>int</td><td>30</td><td>Sets the minimum height of the Grid rows.</td></tr>
      <tr><td>RowHeight</td><td>object</td><td>null</td><td>Sets the height of the Grid rows. The property can be set to <em>null</em>, <em>auto</em> or a number.</td></tr>
    </table>
  <h2 id="GridClipboardProperties"><a id="GridClipboard_properties" href="javascript: void(0)" class="anchor"><strong>GridClipboard</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>true</td><td>Sets or gets whether the property is enabled.</td></tr>
      <tr><td>AutoFillMode</td><td>GridClipboardAutoFillMode</td><td>GridClipboardAutoFillMode.FillSeries</td><td>Sets or gets whether the copy-pasted values will be auto-filled by using automatic pattern detection. This is used in the Drag&Drop Multiple Cells selection. <em>none</em> does nothing. <em>copy</em> just copies the cells. 'fillSeries' detects and automatically fills the values. For example, if the selection has '1, 2' and the possible positions are more, the pasted values would be '1, 2, 3, 4, etc.</td></tr>
      <tr><td>OnPasteValue</td><td>object</td><td>null</td><td>Sets or gets a callback on paste.</td></tr>
    </table>
  <h2 id="GridColumnProperties"><a id="GridColumn_properties" href="javascript: void(0)" class="anchor"><strong>GridColumn</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Align</td><td>HorizontalAlignment</td><td>HorizontalAlignment.Left</td><td>Sets or gets the column's header alignment. Accepts: 'left', 'right', 'center'</td></tr>
      <tr><td>AllowExport</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be exported.</td></tr>
      <tr><td>AllowGroup</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be grouped.</td></tr>
      <tr><td>AllowHide</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be hidden.</td></tr>
      <tr><td>AllowSelect</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be selected.</td></tr>
      <tr><td>AllowEdit</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be edited.</td></tr>
      <tr><td>AllowSort</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be sorted.</td></tr>
      <tr><td>AllowHeaderEdit</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be edited, when header editing is enabled.</td></tr>
      <tr><td>AllowFilter</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be filtered.</td></tr>
      <tr><td>AllowReorder</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be reordered.</td></tr>
      <tr><td>AllowResize</td><td>bool</td><td>true</td><td>Sets or gets whether the column can be resized.</td></tr>
      <tr><td>CellsFormat</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the column's cells format.</td></tr>
      <tr><td>CellsAlign</td><td>HorizontalAlignment</td><td>HorizontalAlignment.Left</td><td>Sets or gets the column's cells alignment. Accepts: 'left', 'right' and 'center'</td></tr>
      <tr><td>CellsWrap</td><td>bool</td><td>false</td><td>Sets or gets the column's cells wrapping. Accepts: true or false.</td></tr>
      <tr><td>CellsVerticalAlign</td><td>VerticalAlignment</td><td>VerticalAlignment.Center</td><td>Sets or gets the column's cells vertical alignment. Accepts: 'top', 'bottom' and 'center'</td></tr>
      <tr><td>ColumnGroup</td><td>string</td><td>&quot;&quot;</td><td>Sets the name of the column group.</td></tr>
      <tr><td>DataField</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the column's data source bound field.</td></tr>
      <tr><td>DisplayField</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the column's data source bound field which will be displayed to the user. When the property is not set, it is equal to the 'dataField'.</td></tr>
      <tr><td>Element</td><td>object</td><td>null</td><td>Gets the HTML Element. The property returns null when the Column is not in the View.</td></tr>
      <tr><td>Editor</td><td>object</td><td>null</td><td>Sets or gets the column's editor. The property expects 'input', 'autoComplete', 'numberInput', 'checkBox', 'deteTimePicker', 'timeInput', 'dateInput', 'maskedTextBox', 'textArea' or a custom object with 'template' property which defines the editor type, 'onInit' and 'onRender' callback functions.</td></tr>
      <tr><td>Freeze</td><td>string</td><td>&quot;false&quot;</td><td>Sets or gets the Freeze mode. Accepts: 'near', 'far', true and false. Freezes/Pins the column to left(near) or right(far).</td></tr>
      <tr><td>Filter</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the filter of the column.</td></tr>
      <tr><td>FormatSettings</td><td>object</td><td>new object()</td><td>Sets or gets the column's format settings. You can use any of the build in formatting options or to NumberFormat object like that: 'Intl: {  NumberFormat: {  style: \'currency\', currency: \'EUR\' }}' or DateTimeFormat object like that: 'Intl: {  DateTimeFormat: {  dateStyle: \'full\' }}''</td></tr>
      <tr><td>Group</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the column's group.</td></tr>
      <tr><td>Icon</td><td>object</td><td>&quot;&quot;</td><td>Sets or gets the column's icon. Expects CSS class name.</td></tr>
      <tr><td>Label</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the text displayed in the column's header.</td></tr>
      <tr><td>MinWidth</td><td>int</td><td>30</td><td>Sets or gets the minimum width.</td></tr>
      <tr><td>SortOrder</td><td>GridColumnSortOrder</td><td>GridColumnSortOrder.Null</td><td>Sets or gets the sort order of the column. Accepts: 'asc', 'desc' and null.</td></tr>
      <tr><td>ShowActionButton</td><td>bool</td><td>false</td><td>Sets or gets whether the column's header action drop-down button is displayed. This button opens the column's menu.</td></tr>
      <tr><td>ShowIcon</td><td>bool</td><td>false</td><td>Sets or gets whether the column's header icon is displayed.</td></tr>
      <tr><td>ShowDescriptionButton</td><td>bool</td><td>false</td><td>Sets or gets whether the column's header description button is displayed.</td></tr>
      <tr><td>Width</td><td>object</td><td>&quot;&quot;</td><td>Sets or gets the width. Accepts: 'number', 'px', 'em', 'auto', 'null' values.</td></tr>
      <tr><td>Template</td><td>object</td><td>&quot;&quot;</td><td>Sets or gets the column's template. The property expects the 'id' of HTMLTemplateElement or HTML string which is displayed in the cells. Built-in values are: 'checkBox', 'url', 'email', </td></tr>
      <tr><td>ValidationRules</td><td>IEnumerable&lt;object&gt;</td><td>new List&lt;object&gt;()</td><td>Sets or gets the column's validation rules. Accepts: Object with 'type' string property. It can be 'required', 'min', 'max', 'minLength', 'maxLength', 'email', 'null', 'requiredTrue', 'minData', 'maxDate', 'pattern'. The object needs to have additional 'value' property for all validation rule types except 'email', 'required', 'requiredTrue' and 'null'. Optional property is 'message', which allows you to define user string displayed on validation error.</td></tr>
      <tr><td>VerticalAlign</td><td>VerticalAlignment</td><td>VerticalAlignment.Center</td><td>Sets or gets the column's header vertical alignment. Accepts: 'top', 'bottom' and 'center'</td></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets or gets whether the column is visible. Set the property to 'false' to hide the column.</td></tr>
    </table>
  <h2 id="GridColumnMenuProperties"><a id="GridColumnMenu_properties" href="javascript: void(0)" class="anchor"><strong>GridColumnMenu</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AutoClose</td><td>bool</td><td>true</td><td>Automatically closes the column menu.</td></tr>
      <tr><td>DataSource</td><td>GridColumnMenuDataSource</td><td>new GridColumnMenuDataSource()</td><td>Sets the data sources to the column menu.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Gets the visibility of the column menu. Returns true, when the column menu is visible.</td></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Sets or gets whether the column menu is enabled. If the value is <em>false</em>, the column menu will not be displayed, when user hovers the column.</td></tr>
      <tr><td>Width</td><td>int</td><td>250</td><td>Sets the width of the column menu.</td></tr>
      <tr><td>Height</td><td>int</td><td>-1</td><td>Sets the height of the column menu.</td></tr>
    </table>
  <h2 id="GridColumnMenuDataSourceProperties"><a id="GridColumnMenuDataSource_properties" href="javascript: void(0)" class="anchor"><strong>GridColumnMenuDataSource</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>ColumnMenuCustomizeType</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu customize type</td></tr>
      <tr><td>ColumnMenuItemRename</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item rename.</td></tr>
      <tr><td>ColumnMenuItemEditDescription</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item edit description.</td></tr>
      <tr><td>ColumnMenuItemDuplicate</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item duplicate.</td></tr>
      <tr><td>ColumnMenuItemInsertLeft</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item insert left.</td></tr>
      <tr><td>ColumnMenuItemInsertRight</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the of the column menu item insert right.</td></tr>
      <tr><td>ColumnMenuItemSortAsc</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item sort ascending.</td></tr>
      <tr><td>ColumnMenuItemSortDesc</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item sort descending.</td></tr>
      <tr><td>ColumnMenuItemRemoveSort</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item remove sort.</td></tr>
      <tr><td>ColumnMenuItemFilter</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item filter.</td></tr>
      <tr><td>ColumnMenuItemRemoveFilter</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item remove filter.</td></tr>
      <tr><td>ColumnMenuItemGroupBy</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item group by.</td></tr>
      <tr><td>ColumnMenuItemRemoveGroupBy</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item group by.</td></tr>
      <tr><td>ColumnMenuItemHide</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item hide.</td></tr>
      <tr><td>ColumnMenuItemDelete</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the column menu item delete.</td></tr>
    </table>
  <h2 id="GridCommandProperties"><a id="GridCommand_properties" href="javascript: void(0)" class="anchor"><strong>GridCommand</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Command</td><td>string</td><td>&quot;customizeTypeCommand&quot;</td><td>Sets the command of the column menu customize type.</td></tr>
      <tr><td>Enabled</td><td>bool</td><td>true</td><td>Enables the column menu customize type.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of the column menu customize type.</td></tr>
      <tr><td>Icon</td><td>string</td><td>&quot;jqx-icon-customize&quot;</td><td>Sets the icon of the column menu customize type.</td></tr>
      <tr><td>Label</td><td>string</td><td>&quot;{{messages}}&quot;</td><td>Sets the label of the column menu customize type.</td></tr>
    </table>
  <h2 id="GridColumnGroupProperties"><a id="GridColumnGroup_properties" href="javascript: void(0)" class="anchor"><strong>GridColumnGroup</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Label</td><td>string</td><td>&quot;&quot;</td><td>Sets the label.</td></tr>
      <tr><td>Align</td><td>HorizontalAlignment</td><td>HorizontalAlignment.Center</td><td>Sets the align.</td></tr>
      <tr><td>Name</td><td>string</td><td>&quot;&quot;</td><td>Sets the name of the column group.</td></tr>
      <tr><td>ParentGroup</td><td>string</td><td>&quot;&quot;</td><td>Sets the name of the parent column group.</td></tr>
      <tr><td>VerticalAlign</td><td>VerticalAlignment</td><td>VerticalAlignment.Center</td><td>Sets the vertical align.</td></tr>
    </table>
  <h2 id="GridConditionalFormattingProperties"><a id="GridConditionalFormatting_properties" href="javascript: void(0)" class="anchor"><strong>GridConditionalFormatting</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Column</td><td>string</td><td>&quot;all&quot;</td><td>The data field of a numeric column to format. Set 'all' to format all numeric columns.</td></tr>
      <tr><td>Condition</td><td>GridConditionalFormattingCondition</td><td>GridConditionalFormattingCondition.LessThan</td><td>The formatting condition.</td></tr>
      <tr><td>FirstValue</td><td>int</td><td>0</td><td>The value to compare by. When <strong>condition</strong> is <em>'between'</em>, this is the start (from) value.</td></tr>
      <tr><td>FontFamily</td><td>string</td><td>&quot;&quot;</td><td>The fontFamily to apply to formatted cells.</td></tr>
      <tr><td>FontSize</td><td>string</td><td>&quot;The default fontSize as set in CSS&quot;</td><td>The fontSize to apply to formatted cells.</td></tr>
      <tr><td>Highlight</td><td>string</td><td>&quot;The default backgroundColor as set in CSS&quot;</td><td>The background color to apply to formatted cells.</td></tr>
      <tr><td>SecondValue</td><td>int</td><td>1</td><td>When <strong>condition</strong> is <em>'between'</em>, this is the end (to) value. Otherwise, this value is not used.</td></tr>
      <tr><td>Text</td><td>string</td><td>&quot;The default color as set in CSS&quot;</td><td>The text color to apply to formatted cells.</td></tr>
    </table>
  <h2 id="GridChartingProperties"><a id="GridCharting_properties" href="javascript: void(0)" class="anchor"><strong>GridCharting</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Sets or gets whether charting is enabled.</td></tr>
      <tr><td>ColorScheme</td><td>string</td><td>&quot;scheme01&quot;</td><td>Sets or gets the charting colors. Accepts the 'colorScheme' values of our Chart component.</td></tr>
      <tr><td>AppendTo</td><td>object</td><td>null</td><td>Sets or gets the chart's container.</td></tr>
      <tr><td>Dialog</td><td>Dialog</td><td>new Dialog()</td><td>Sets or gets the charting dialog.</td></tr>
    </table>
  <h2 id="DialogProperties"><a id="Dialog_properties" href="javascript: void(0)" class="anchor"><strong>Dialog</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Header</td><td>string</td><td>&quot;{{message}}&quot;</td><td>Sets or gets the dialog header.</td></tr>
      <tr><td>Height</td><td>object</td><td>400</td><td>Sets or gets the dialog height.</td></tr>
      <tr><td>Width</td><td>object</td><td>400</td><td>Sets or gets the dialog width.</td></tr>
      <tr><td>Left</td><td>object</td><td>&quot;center&quot;</td><td>Sets or gets the dialog Left position.</td></tr>
      <tr><td>Top</td><td>object</td><td>&quot;center&quot;</td><td>Sets or gets the dialog Top position.</td></tr>
      <tr><td>Enabled</td><td>bool</td><td>true</td><td>Sets or gets whether the dialog is enabled.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Gets whether the dialog is displayed.</td></tr>
    </table>
  <h2 id="GridCheckBoxesProperties"><a id="GridCheckBoxes_properties" href="javascript: void(0)" class="anchor"><strong>GridCheckBoxes</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of the TreeGrid checkboxes.</td></tr>
      <tr><td>HasThreeStates</td><td>bool</td><td>false</td><td>Sets the three-state mode of the TreeGrid checkboxes. In that mode, checking a checkbox affects the parent-child rows checkboxes.</td></tr>
    </table>
  <h2 id="GridDataExportProperties"><a id="GridDataExport_properties" href="javascript: void(0)" class="anchor"><strong>GridDataExport</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Header</td><td>bool</td><td>true</td><td>Sets whether the columns header will be exported.</td></tr>
      <tr><td>FilterBy</td><td>object</td><td>null</td><td>Sets whether the export uses the applied filters.</td></tr>
      <tr><td>GroupBy</td><td>object</td><td>null</td><td>Sets the groups of the exported data.</td></tr>
      <tr><td>Style</td><td>object</td><td>null</td><td>Sets a custom style object of the dataExport. </td></tr>
      <tr><td>FileName</td><td>string</td><td>&quot;jqxGrid&quot;</td><td>Sets the exported file's name.</td></tr>
      <tr><td>PageOrientation</td><td>string</td><td>&quot;portrait&quot;</td><td>Sets the page orientation, when exporting to PDF.</td></tr>
      <tr><td>ExpandChar</td><td>string</td><td>&quot;+&quot;</td><td>Sets the expand char displayed when the Grid with row hierarchy(TreeGrid / Grouped) is exported.</td></tr>
      <tr><td>CollapseChar</td><td>string</td><td>&quot;-&quot;</td><td>Sets the collapse char displayed when the Grid with row hierarchy(TreeGrid / Grouped) is exported.</td></tr>
      <tr><td>View</td><td>bool</td><td>false</td><td>Exports only the visible data of the Grid.</td></tr>
      <tr><td>ViewStart</td><td>int</td><td>-1</td><td>Determines the start row index that will be exported or printed. 'view' should be set to <em>true</em></td></tr>
      <tr><td>ViewEnd</td><td>int</td><td>-1</td><td>Determines the end row index that will be exported or printed. 'view' should be set to <em>true</em></td></tr>
      <tr><td>RowIds</td><td>Action&lt;object&gt;</td><td>null</td><td>An array of row ids that denotes the rows to export.</td></tr>
    </table>
  <h2 id="GridEditingProperties"><a id="GridEditing_properties" href="javascript: void(0)" class="anchor"><strong>GridEditing</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AllowRowHeaderEdit</td><td>bool</td><td>false</td><td>Enables row header cells editing.</td></tr>
      <tr><td>AllowColumnHeaderEdit</td><td>bool</td><td>false</td><td>Enables column headers editing.</td></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Enables editing.</td></tr>
      <tr><td>Batch</td><td>bool</td><td>false</td><td>Enables batch editing. This allows editing multiple grid rows on the client side and sending them with a single server request.</td></tr>
      <tr><td>Action</td><td>GridEditingAction</td><td>GridEditingAction.Click</td><td>Determines the way editing is initiated.</td></tr>
      <tr><td>CommandKeys</td><td>GridEditingCommandKeys</td><td>new GridEditingCommandKeys()</td><td>Describes command keys.</td></tr>
      <tr><td>CommandBar</td><td>GridEditingCommandBar</td><td>new GridEditingCommandBar()</td><td>Describes the grid's command bar settings. The command bar is a toolbar or statusbar with tools for saving and reverting edits.</td></tr>
      <tr><td>CommandColumn</td><td>GridEditingCommandColumn</td><td>new GridEditingCommandColumn()</td><td>Describes the grid's command column settings. The command column can be used to edit or delete a row.</td></tr>
      <tr><td>Mode</td><td>GridEditingMode</td><td>GridEditingMode.Cell</td><td>Sets the grid's edit mode.</td></tr>
      <tr><td>AddNewRow</td><td>GridEditingAddNewRow</td><td>new GridEditingAddNewRow()</td><td>Describes the settings of the 'Add New Row' UI element which enables the quick adding of rows to the Grid with a single click.</td></tr>
      <tr><td>Dialog</td><td>Dialog</td><td>new Dialog()</td><td>Describes dialog's editing settings.</td></tr>
      <tr><td>AddDialog</td><td>Dialog</td><td>new Dialog()</td><td>Describes add dialog's settings</td></tr>
      <tr><td>DeleteDialog</td><td>Dialog</td><td>new Dialog()</td><td>Describes delete dialog's settings</td></tr>
    </table>
  <h2 id="GridEditingCommandKeysProperties"><a id="GridEditingCommandKeys_properties" href="javascript: void(0)" class="anchor"><strong>GridEditingCommandKeys</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>CommandKeyEdit</td><td>GridCommandKey</td><td>new GridCommandKey()</td><td>Describes the edit command key.</td></tr>
      <tr><td>CommandKeyCancel</td><td>GridCommandKey</td><td>new GridCommandKey()</td><td>Describes the cancel command key.</td></tr>
      <tr><td>CommandKeyUpdate</td><td>GridCommandKey</td><td>new GridCommandKey()</td><td>Describes the update command key.</td></tr>
    </table>
  <h2 id="GridCommandKeyProperties"><a id="GridCommandKey_properties" href="javascript: void(0)" class="anchor"><strong>GridCommandKey</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Command</td><td>string</td><td>&quot;commandKeyEditCommand&quot;</td><td>Sets the name of the edit key command.</td></tr>
      <tr><td>Key</td><td>string</td><td>&quot;F2&quot;</td><td>Sets the key that invokes the edit command.</td></tr>
    </table>
  <h2 id="GridEditingCommandBarProperties"><a id="GridEditingCommandBar_properties" href="javascript: void(0)" class="anchor"><strong>GridEditingCommandBar</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Makes the command bar visible.</td></tr>
      <tr><td>Position</td><td>LayoutPosition</td><td>LayoutPosition.Near</td><td>Sets the command bar's position.</td></tr>
      <tr><td>DisplayMode</td><td>GridCommandDisplayMode</td><td>GridCommandDisplayMode.LabelAndIcon</td><td>Sets what is to be displayed in command bar buttons.</td></tr>
      <tr><td>DataSource</td><td>GridEditingCommandBarDataSource</td><td>new GridEditingCommandBarDataSource()</td><td>Sets the command bar's data source.</td></tr>
    </table>
  <h2 id="GridEditingCommandBarDataSourceProperties"><a id="GridEditingCommandBarDataSource_properties" href="javascript: void(0)" class="anchor"><strong>GridEditingCommandBarDataSource</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>CommandBarAddRow</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command bar's button for adding rows.</td></tr>
      <tr><td>CommandBarDeleteRow</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command bar's button for deleting rows.</td></tr>
      <tr><td>CommandBarBatchSave</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command bar's button for saving changes.</td></tr>
      <tr><td>CommandBarBatchRevert</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command bar's button for reverting changes.</td></tr>
    </table>
  <h2 id="GridEditingCommandColumnProperties"><a id="GridEditingCommandColumn_properties" href="javascript: void(0)" class="anchor"><strong>GridEditingCommandColumn</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Makes the command column visible.</td></tr>
      <tr><td>Inline</td><td>bool</td><td>false</td><td>Enables inline display of the command column.</td></tr>
      <tr><td>Position</td><td>Position</td><td>Position.Far</td><td>Sets the command column's position.</td></tr>
      <tr><td>DisplayMode</td><td>GridCommandDisplayMode</td><td>GridCommandDisplayMode.Icon</td><td>Sets what is to be displayed in command column buttons.</td></tr>
      <tr><td>DataSource</td><td>GridEditingCommandColumnDataSource</td><td>new GridEditingCommandColumnDataSource()</td><td>Sets the command column's data source.</td></tr>
      <tr><td>Width</td><td>int</td><td>-1</td><td>Sets the width of the command column.</td></tr>
    </table>
  <h2 id="GridEditingCommandColumnDataSourceProperties"><a id="GridEditingCommandColumnDataSource_properties" href="javascript: void(0)" class="anchor"><strong>GridEditingCommandColumnDataSource</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>CommandColumnMenu</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command column's button displayed in the column's header. By default, this Command opens a Menu with Column Chooser.</td></tr>
      <tr><td>CommandColumnEdit</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command column's button for editing rows.</td></tr>
      <tr><td>CommandColumnDelete</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command column's button for deleting rows.</td></tr>
      <tr><td>CommandColumnUpdate</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command column's button for updating rows.</td></tr>
      <tr><td>CommandColumnCancel</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command column's button for canceling edits.</td></tr>
      <tr><td>CommandColumnRowMenu</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command column's row menu button.</td></tr>
      <tr><td>CommandColumnCustom</td><td>GridCommand</td><td>new GridCommand()</td><td>Describes the settings of the command column's custom button.</td></tr>
    </table>
  <h2 id="GridEditingAddNewRowProperties"><a id="GridEditingAddNewRow_properties" href="javascript: void(0)" class="anchor"><strong>GridEditingAddNewRow</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Position</td><td>LayoutPosition</td><td>LayoutPosition.Both</td><td>Sets the position of the 'Add New Row' UI element.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Makes the 'Add New Row' UI element visible.</td></tr>
      <tr><td>Label</td><td>string</td><td>&quot;{{message}}&quot;</td><td>Sets the label of the 'Add New Row' UI element.</td></tr>
    </table>
  <h2 id="GridFilteringProperties"><a id="GridFiltering_properties" href="javascript: void(0)" class="anchor"><strong>GridFiltering</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Enables filtering.</td></tr>
      <tr><td>Filter</td><td>IEnumerable&lt;object&gt;</td><td>new List&lt;object&gt;()</td><td>An array of filtering conditions to apply to the grid. Each member of the <em>filter</em> array is an array with two members. The first one is the column dataField to apply the filter to. The second one is the filtering condition.</td></tr>
      <tr><td>FilterRow</td><td>GridFilteringFilterRow</td><td>new GridFilteringFilterRow()</td><td>(In Development)Describes the filter row's settings.</td></tr>
      <tr><td>FilterMenu</td><td>GridFilteringFilterMenu</td><td>new GridFilteringFilterMenu()</td><td>Describes the settings for the filter menu.</td></tr>
      <tr><td>FilterBuilder</td><td>GridFilteringFilterBuilder</td><td>new GridFilteringFilterBuilder()</td><td>(In Development)Describes the settings for the filter builder.</td></tr>
    </table>
  <h2 id="GridFilteringFilterRowProperties"><a id="GridFilteringFilterRow_properties" href="javascript: void(0)" class="anchor"><strong>GridFilteringFilterRow</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Makes the filter row visible.</td></tr>
      <tr><td>MenuVisible</td><td>bool</td><td>false</td><td>Makes the filter row's menu visible.</td></tr>
      <tr><td>ApplyMode</td><td>GridFilteringFilterRowApplyMode</td><td>GridFilteringFilterRowApplyMode.Auto</td><td>Sets the way filtering through the filter row is applied.</td></tr>
      <tr><td>AutoApplyModeDelay</td><td>int</td><td>300</td><td>Sets the delay (in milliseconds) before applying filtering (when filtering.filterRow.<em>applyMode</em> is <em>'auto'</em>).</td></tr>
    </table>
  <h2 id="GridFilteringFilterMenuProperties"><a id="GridFilteringFilterMenu_properties" href="javascript: void(0)" class="anchor"><strong>GridFilteringFilterMenu</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets the visibility of the filter menu.</td></tr>
      <tr><td>Buttons</td><td>string[]</td><td>new string[]{}</td><td>Sets the button text of the filter menu.</td></tr>
      <tr><td>Mode</td><td>string[]</td><td>new string[]{}</td><td>Sets the filter menu mode.</td></tr>
      <tr><td>DataSource</td><td>object</td><td>null</td><td>Sets the filter menu datasource.</td></tr>
      <tr><td>Width</td><td>int</td><td>250</td><td>Sets the width of the filter menu.</td></tr>
      <tr><td>Height</td><td>int</td><td>200</td><td>Sets the height of the filter menu.</td></tr>
    </table>
  <h2 id="GridFilteringFilterBuilderProperties"><a id="GridFilteringFilterBuilder_properties" href="javascript: void(0)" class="anchor"><strong>GridFilteringFilterBuilder</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of the filter builder.</td></tr>
      <tr><td>Height</td><td>int</td><td>-1</td><td>Sets the height of the filter builder.</td></tr>
    </table>
  <h2 id="GridGroupingProperties"><a id="GridGrouping_properties" href="javascript: void(0)" class="anchor"><strong>GridGrouping</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Enables grouping.</td></tr>
      <tr><td>AllowCollapse</td><td>bool</td><td>false</td><td>Enables collapsing of groups.</td></tr>
      <tr><td>AutoExpandAll</td><td>bool</td><td>false</td><td>Automatically expands all groups.</td></tr>
      <tr><td>ExpandMode</td><td>GridGroupingExpandMode</td><td>GridGroupingExpandMode.ButtonClick</td><td>Sets the group expand mode.</td></tr>
      <tr><td>RenderMode</td><td>GridGroupingRenderMode</td><td>GridGroupingRenderMode.Advanced</td><td>Sets the group render mode. 'basic' mode renders the group headers without taking into account the indent, groupRowHeight and column label properties. 'compact' mode is the same as basic, but also renders the column labels in the group headers. The default mode is 'advanced', which adds indents to groups that depend on the group level.</td></tr>
      <tr><td>GroupRowHeight</td><td>object</td><td>50</td><td>Sets the group row height.</td></tr>
      <tr><td>ToggleButtonIndent</td><td>int</td><td>16</td><td>Sets the indent of the group toggle button.</td></tr>
      <tr><td>GroupIndent</td><td>int</td><td>16</td><td>Sets the indent of the group.</td></tr>
      <tr><td>GroupBar</td><td>GridGroupingGroupBar</td><td>new GridGroupingGroupBar()</td><td>Describes the group bar's settings.</td></tr>
      <tr><td>SummaryRow</td><td>GridGroupingSummaryRow</td><td>new GridGroupingSummaryRow()</td><td>Describes the group summary row's settings.</td></tr>
    </table>
  <h2 id="GridGroupingGroupBarProperties"><a id="GridGroupingGroupBar_properties" href="javascript: void(0)" class="anchor"><strong>GridGroupingGroupBar</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Makes the group bar visible.</td></tr>
      <tr><td>AllowColumnDragDrop</td><td>bool</td><td>false</td><td>Enables column drag and drop.</td></tr>
      <tr><td>AllowColumnCloseButtons</td><td>bool</td><td>true</td><td>Enables column close buttons.</td></tr>
    </table>
  <h2 id="GridGroupingSummaryRowProperties"><a id="GridGroupingSummaryRow_properties" href="javascript: void(0)" class="anchor"><strong>GridGroupingSummaryRow</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Inline</td><td>bool</td><td>true</td><td>Enables inline display of the group summary row.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Makes the group summary row visible.</td></tr>
    </table>
  <h2 id="GridPagingProperties"><a id="GridPaging_properties" href="javascript: void(0)" class="anchor"><strong>GridPaging</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Enables pagination.</td></tr>
      <tr><td>Spinner</td><td>GridPagingSpinner</td><td>new GridPagingSpinner()</td><td>Describes the spinner pagination settings.</td></tr>
      <tr><td>PageSize</td><td>int</td><td>10</td><td>Sets the number of rows per page.</td></tr>
      <tr><td>PageIndex</td><td>int</td><td>0</td><td>Sets the start page.</td></tr>
    </table>
  <h2 id="GridPagingSpinnerProperties"><a id="GridPagingSpinner_properties" href="javascript: void(0)" class="anchor"><strong>GridPagingSpinner</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Enables spinner pagination.</td></tr>
      <tr><td>Step</td><td>int</td><td>1</td><td>Sets the step of page</td></tr>
    </table>
  <h2 id="GridPagerProperties"><a id="GridPager_properties" href="javascript: void(0)" class="anchor"><strong>GridPager</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AutoEllipsis</td><td>GridPagerAutoEllipsis</td><td>GridPagerAutoEllipsis.Both</td><td>Sets the ellipsis display mode.</td></tr>
      <tr><td>Position</td><td>LayoutPosition</td><td>LayoutPosition.Far</td><td>Sets the position of pager.</td></tr>
      <tr><td>Template</td><td>object</td><td>&quot;&quot;</td><td>Sets a template for the pager.</td></tr>
      <tr><td>PageSizeSelector</td><td>GridPagerPageSizeSelector</td><td>new GridPagerPageSizeSelector()</td><td>Describes the settings for the 'rows per page' option.</td></tr>
      <tr><td>Summary</td><td>GridPagerSummary</td><td>new GridPagerSummary()</td><td>Describes the summary settings.</td></tr>
      <tr><td>NavigationButtons</td><td>GridPagerNavigationButtons</td><td>new GridPagerNavigationButtons()</td><td>Describes the navigation buttons settings.</td></tr>
      <tr><td>NavigationInput</td><td>GridPagerNavigationInput</td><td>new GridPagerNavigationInput()</td><td>Describes the settings about navigation input option.</td></tr>
      <tr><td>PageIndexSelectors</td><td>GridPagerPageIndexSelectors</td><td>new GridPagerPageIndexSelectors()</td><td>Describes the settings for the numeric page buttons.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of pager.</td></tr>
    </table>
  <h2 id="GridPagerPageSizeSelectorProperties"><a id="GridPagerPageSizeSelector_properties" href="javascript: void(0)" class="anchor"><strong>GridPagerPageSizeSelector</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of the 'rows per page' option.</td></tr>
      <tr><td>DataSource</td><td>object</td><td>&quot;10,20,50&quot;</td><td>Sets the count of the 'rows per page' option.</td></tr>
      <tr><td>Position</td><td>Position</td><td>Position.Far</td><td>Sets the position of the 'rows per page' option.</td></tr>
    </table>
  <h2 id="GridPagerSummaryProperties"><a id="GridPagerSummary_properties" href="javascript: void(0)" class="anchor"><strong>GridPagerSummary</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Position</td><td>Position</td><td>Position.Far</td><td>Sets the position of the summary.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of the summary.</td></tr>
    </table>
  <h2 id="GridPagerNavigationButtonsProperties"><a id="GridPagerNavigationButtons_properties" href="javascript: void(0)" class="anchor"><strong>GridPagerNavigationButtons</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Position</td><td>LayoutPosition</td><td>LayoutPosition.Both</td><td>Sets the navigation buttons position.</td></tr>
      <tr><td>PrevNextButtons</td><td>GridPagerNavigationButtonsPrevNextButtons</td><td>new GridPagerNavigationButtonsPrevNextButtons()</td><td>Describes the settings about buttons 'previous page' and 'next page'.</td></tr>
      <tr><td>FirstLastButtons</td><td>GridPagerNavigationButtonsFirstLastButtons</td><td>new GridPagerNavigationButtonsFirstLastButtons()</td><td>Describes the settings about buttons 'first page' and 'last page'.</td></tr>
      <tr><td>Labels</td><td>GridPagerNavigationButtonsLabels</td><td>new GridPagerNavigationButtonsLabels()</td><td>Describes the labels settings for navigation buttons.</td></tr>
    </table>
  <h2 id="GridPagerNavigationButtonsPrevNextButtonsProperties"><a id="GridPagerNavigationButtonsPrevNextButtons_properties" href="javascript: void(0)" class="anchor"><strong>GridPagerNavigationButtonsPrevNextButtons</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets the visibility of 'previous page' and 'next page' buttons.</td></tr>
    </table>
  <h2 id="GridPagerNavigationButtonsFirstLastButtonsProperties"><a id="GridPagerNavigationButtonsFirstLastButtons_properties" href="javascript: void(0)" class="anchor"><strong>GridPagerNavigationButtonsFirstLastButtons</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets the visibility of 'first page' and 'last page' buttons.</td></tr>
    </table>
  <h2 id="GridPagerNavigationButtonsLabelsProperties"><a id="GridPagerNavigationButtonsLabels_properties" href="javascript: void(0)" class="anchor"><strong>GridPagerNavigationButtonsLabels</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of labels for navigation buttons.</td></tr>
    </table>
  <h2 id="GridPagerNavigationInputProperties"><a id="GridPagerNavigationInput_properties" href="javascript: void(0)" class="anchor"><strong>GridPagerNavigationInput</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Position</td><td>Position</td><td>Position.Far</td><td>Sets the position of navigation input option.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of navigation input option.</td></tr>
    </table>
  <h2 id="GridPagerPageIndexSelectorsProperties"><a id="GridPagerPageIndexSelectors_properties" href="javascript: void(0)" class="anchor"><strong>GridPagerPageIndexSelectors</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets the visibility of numeric page buttons.</td></tr>
      <tr><td>DataSource</td><td>object</td><td>10</td><td>Sets the number of visible page buttons.</td></tr>
    </table>
  <h2 id="GridRowDetailProperties"><a id="GridRowDetail_properties" href="javascript: void(0)" class="anchor"><strong>GridRowDetail</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Enables the row details.</td></tr>
      <tr><td>Height</td><td>int</td><td>200</td><td>Sets the height of the row details.</td></tr>
      <tr><td>Position</td><td>Position</td><td>Position.Near</td><td>Sets the position of the Column which allows you to dynamically expand/collapse the row details.</td></tr>
      <tr><td>Template</td><td>object</td><td>&quot;&quot;</td><td>Sets the template of the row details.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets the visibility of the Column which allows you to dynamically expand/collapse the row details.</td></tr>
      <tr><td>Dialog</td><td>Dialog</td><td>new Dialog()</td><td>Sets the row details dialog. When enabled, row details will be displayed in a Dialog.</td></tr>
    </table>
  <h2 id="GridColumnHeaderProperties"><a id="GridColumnHeader_properties" href="javascript: void(0)" class="anchor"><strong>GridColumnHeader</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets the column header visibility.</td></tr>
    </table>
  <h2 id="GridSummaryRowProperties"><a id="GridSummaryRow_properties" href="javascript: void(0)" class="anchor"><strong>GridSummaryRow</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the summary row visibility.</td></tr>
    </table>
  <h2 id="GridGroupHeaderProperties"><a id="GridGroupHeader_properties" href="javascript: void(0)" class="anchor"><strong>GridGroupHeader</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the visibility of the group header.</td></tr>
      <tr><td>Template</td><td>object</td><td>&quot;&quot;</td><td>Sets a template for the group header.</td></tr>
    </table>
  <h2 id="GridHeaderProperties"><a id="GridHeader_properties" href="javascript: void(0)" class="anchor"><strong>GridHeader</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the header visibility.</td></tr>
      <tr><td>Template</td><td>object</td><td>&quot;&quot;</td><td>Sets a template for the header.</td></tr>
      <tr><td>Buttons</td><td>IEnumerable&lt;object&gt;</td><td>new List&lt;string&gt;() { &quot;columns&quot;, &quot;filter&quot;, &quot;group&quot;, &quot;sort&quot;, &quot;format&quot;, &quot;search&quot; }</td><td>Determines the buttons displayed in the Grid header. 'columns' displays a button opening the columns chooser panel. 'filter'  displays a button opening the filtering panel.  'group' displays a button opening the grouping panel. 'sort'  displays a button opening the sorting panel. 'format'  displays a button opening the conditional formatting panel. 'search' displays a button opening the search panel.</td></tr>
    </table>
  <h2 id="GridFooterProperties"><a id="GridFooter_properties" href="javascript: void(0)" class="anchor"><strong>GridFooter</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Visible</td><td>bool</td><td>false</td><td>Sets the footer visibility.</td></tr>
      <tr><td>Template</td><td>object</td><td>&quot;&quot;</td><td>Sets a template for the footer.</td></tr>
    </table>
  <h2 id="GridRowProperties"><a id="GridRow_properties" href="javascript: void(0)" class="anchor"><strong>GridRow</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AllowToggle</td><td>bool</td><td>true</td><td>Sets or gets the row can be expanded or collapsed.</td></tr>
      <tr><td>AllowResize</td><td>bool</td><td>true</td><td>Sets or gets the row can be resized.</td></tr>
      <tr><td>AllowSelect</td><td>bool</td><td>true</td><td>Sets or gets the row can be selected.</td></tr>
      <tr><td>AllowCheck</td><td>bool</td><td>true</td><td>Sets or gets the row can be checked. This property is used when the Grid is in Tree Grid or Grouped mode.</td></tr>
      <tr><td>Checked</td><td>bool</td><td>true</td><td>Sets or gets the row's check state. This property is used when the Grid is in Tree Grid or Grouped mode.</td></tr>
      <tr><td>Cells</td><td>IEnumerable&lt;IGridRowCell&gt;</td><td>new List&lt;object&gt;()</td><td>Gets the Row's Cells array.</td></tr>
      <tr><td>Children</td><td>object</td><td>null</td><td>Gets the row's children array of GridRow. This property is associated to the TreeGrid and Groupng mode of the Grid.</td></tr>
      <tr><td>Data</td><td>object</td><td>null</td><td>Gets the row's bound data.</td></tr>
      <tr><td>DetailHeight</td><td>int</td><td>200</td><td>Sets or gets the row's detail height.</td></tr>
      <tr><td>DetailTemplate</td><td>object</td><td>null</td><td>Sets or gets the row's detail template.</td></tr>
      <tr><td>Element</td><td>object</td><td>null</td><td>Gets the HTML Element. The property returns null when the Row is not in the View.</td></tr>
      <tr><td>IsExpanded</td><td>bool</td><td>false</td><td>Sets or gets the row is expanded. This property is used when the Grid is in Tree Grid or Grouped mode.</td></tr>
      <tr><td>Header</td><td>object</td><td>null</td><td>Gets the row's header element.</td></tr>
      <tr><td>Height</td><td>int</td><td>30</td><td>Sets or gets the row's height.</td></tr>
      <tr><td>Index</td><td>int</td><td>-1</td><td>Gets the row's bound index.</td></tr>
      <tr><td>Id</td><td>object</td><td>&quot;&quot;</td><td>Gets the row's bound id.</td></tr>
      <tr><td>Leaf</td><td>bool</td><td>false</td><td>Gets whether the row is leaf row in TreeGrid or Grouping mode.</td></tr>
      <tr><td>MaxHeight</td><td>int</td><td>100</td><td>Sets or gets the row's maximum height.</td></tr>
      <tr><td>MinHeight</td><td>int</td><td>30</td><td>Sets or gets the row's minimum height.</td></tr>
      <tr><td>Freeze</td><td>string</td><td>&quot;false&quot;</td><td>Sets or gets the Freeze mode. Accepts: 'near', 'far', true and false. Freezes/Pins the row to top(near) or bottom(far).</td></tr>
      <tr><td>Selected</td><td>bool</td><td>false</td><td>Sets or gets whether the row is selected.</td></tr>
      <tr><td>ShowDetail</td><td>bool</td><td>false</td><td>Sets or gets whether the row detail is displayed.</td></tr>
      <tr><td>Visible</td><td>bool</td><td>true</td><td>Sets or gets whether the row is visible. Set the property to 'false' to hide the row.</td></tr>
      <tr><td>VisibleIndex</td><td>int</td><td>-1</td><td>Gets the visible index of the row.</td></tr>
      <tr><td>GetCell</td><td>object</td><td>-1</td><td>Methods which gets a cell, which is inside a row. A dataField string is a required argument, when you call this method.</td></tr>
    </table>
  <h2 id="GridRowCellProperties"><a id="GridRowCell_properties" href="javascript: void(0)" class="anchor"><strong>GridRowCell</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Align</td><td>string</td><td>&quot;left&quot;</td><td>"Sets or gets the horizontal alignment. Allowed values are: 'left', 'center' or 'right'".</td></tr>
      <tr><td>Column</td><td>object</td><td>null</td><td>Gets the column associated to the cell.</td></tr>
      <tr><td>Color</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the cell's text color.</td></tr>
      <tr><td>Background</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the cell's background.</td></tr>
      <tr><td>BorderColor</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the cell's borderColor.</td></tr>
      <tr><td>ColSpan</td><td>int</td><td>1</td><td>Sets or gets the cell's colSpan.</td></tr>
      <tr><td>Editor</td><td>object</td><td>null</td><td>Sets or gets the cell's editor.</td></tr>
      <tr><td>Element</td><td>object</td><td>null</td><td>Gets the HTMLElement associated to the cell.</td></tr>
      <tr><td>GetFormattedValue</td><td>Action&lt;object&gt;</td><td>null</td><td>Gets a formatted number or Date.</td></tr>
      <tr><td>IsEditing</td><td>bool</td><td>false</td><td>Gets whether the cell is in edit mode.</td></tr>
      <tr><td>OldValue</td><td>object</td><td>null</td><td>Gets the old value of the cell</td></tr>
      <tr><td>FontSize</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the cell's fontSize</td></tr>
      <tr><td>FontWeight</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the cell's fontWeight</td></tr>
      <tr><td>FontFamily</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the cell's fontFamily</td></tr>
      <tr><td>FontStyle</td><td>string</td><td>&quot;&quot;</td><td>Sets or gets the cell's fontStyle</td></tr>
      <tr><td>Readonly</td><td>bool</td><td>false</td><td>"Sets or gets whether the cell can be edited.".</td></tr>
      <tr><td>Row</td><td>object</td><td>null</td><td>Gets the row object associated to the cell.</td></tr>
      <tr><td>RowSpan</td><td>int</td><td>1</td><td>Sets or gets the row span.</td></tr>
      <tr><td>Selected</td><td>bool</td><td>false</td><td>Sets or gets whether the cell is selected.</td></tr>
      <tr><td>SetProperties</td><td>Action&lt;object&gt;</td><td>null</td><td>"Each property is an object{name: string, value: any}. This function allows you to update multiple properties with single refresh.".</td></tr>
      <tr><td>Tooltip</td><td>string</td><td>&quot;&quot;</td><td>"Allowed values are: 'top', 'middle' or 'bottom'".</td></tr>
      <tr><td>Value</td><td>object</td><td>null</td><td>The cell's value</td></tr>
      <tr><td>VerticalAlign</td><td>string</td><td>&quot;center&quot;</td><td>"Sets or gets the vertical alignment. Allowed values are: 'top', 'center' or 'bottom'".</td></tr>
    </table>
  <h2 id="GridSelectionProperties"><a id="GridSelection_properties" href="javascript: void(0)" class="anchor"><strong>GridSelection</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Enables the selection option.</td></tr>
      <tr><td>AllowRowHeaderSelection</td><td>bool</td><td>false</td><td>Sets or gets whether selection by clicking on a Row header is allowed.</td></tr>
      <tr><td>AllowColumnHeaderSelection</td><td>bool</td><td>false</td><td>Sets or gets whether selection by clicking on a Column header is allowed.</td></tr>
      <tr><td>AllowRowSelection</td><td>bool</td><td>true</td><td>Sets or gets whether selection by clicking on a Row is allowed.</td></tr>
      <tr><td>AllowCellSelection</td><td>bool</td><td>false</td><td>Sets or gets whether selection by clicking on a cell is allowed.</td></tr>
      <tr><td>AllowDragSelection</td><td>bool</td><td>true</td><td>Sets or gets whether selection by dragging(like in Excel) is allowed.</td></tr>
      <tr><td>AllowDragSelectionAutoScroll</td><td>bool</td><td>true</td><td>Sets or gets whether selection by dragging will automatically scroll the Grid view.</td></tr>
      <tr><td>AllowCellDragSelectionHandle</td><td>bool</td><td>true</td><td>Sets or gets whether the Cells selection bottom-right corner selection 'Drag Handle' (litte square like in Excel) is displayed. That handle allows you to resize the selection horizontally or vertically</td></tr>
      <tr><td>AllowCellDragDropSelectionHandle</td><td>bool</td><td>true</td><td>Sets or gets whether the Cells selection can be dragged and dropped. Drag happens when the cursor is moved to the bottom of the cells selection. The cursor is changed to a drag cursor. Press the button and hold and move the selection. By default the dragged cell values are copied on drop.</td></tr>
      <tr><td>AllowCellDragSelectionAutoFill</td><td>bool</td><td>true</td><td>Sets or gets whether the Cells selection will be auto-filled with values on drop when dragging through the 'Drag Handle'.</td></tr>
      <tr><td>Mode</td><td>GridSelectionMode</td><td>GridSelectionMode.Many</td><td>Sets or gets whether the selection allows you to select 'one', 'many' or a variation of 'many' called 'extended'. 'one' allows you to have only single cell or row selected. 'many' </td></tr>
      <tr><td>Action</td><td>GridSelectionAction</td><td>GridSelectionAction.Click</td><td>Sets or gets whether the selection happens on 'click' or 'doubleClick'. 'none' means that selection can happen only through API.</td></tr>
      <tr><td>CheckBoxes</td><td>GridSelectionCheckBoxes</td><td>new GridSelectionCheckBoxes()</td><td>undefined</td></tr>
      <tr><td>Selected</td><td>string</td><td>&quot;&quot;</td><td>undefined</td></tr>
    </table>
  <h2 id="GridSelectionCheckBoxesProperties"><a id="GridSelectionCheckBoxes_properties" href="javascript: void(0)" class="anchor"><strong>GridSelectionCheckBoxes</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AutoShow</td><td>bool</td><td>false</td><td>Sets or gets whether the checkboxes are automatically displayed only when the mouse is over the Grid. When false, checkboses are always displayed</td></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Sets or gets whether the checkboxes selection is enabled. In that mode a new column with checkboxes is displayed.</td></tr>
      <tr><td>Action</td><td>GridSelectionAction</td><td>GridSelectionAction.Click</td><td>Sets or gets whether the selection happens on 'click' or 'doubleClick'. 'none' means that selection can happen only through API.</td></tr>
      <tr><td>SelectAllMode</td><td>GridSelectionCheckBoxesSelectAllMode</td><td>GridSelectionCheckBoxesSelectAllMode.Page</td><td>Sets or gets whether the checkbox selection selects all rows in the current page or all rows. The 'none' setting disables the header checkbox.</td></tr>
      <tr><td>Position</td><td>Position</td><td>Position.Near</td><td>Sets or gets whether the position of the checkbox selection column.</td></tr>
    </table>
  <h2 id="GridSortingProperties"><a id="GridSorting_properties" href="javascript: void(0)" class="anchor"><strong>GridSorting</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Enabled</td><td>bool</td><td>false</td><td>Enables sorting.</td></tr>
      <tr><td>Sort</td><td>string[]</td><td>new string[]{}</td><td>Sets the sort columns to be sorted.</td></tr>
      <tr><td>Mode</td><td>GridSortingMode</td><td>GridSortingMode.One</td><td>Sets the count of allowed sorting columns.</td></tr>
      <tr><td>SortToggleThreeStates</td><td>bool</td><td>true</td><td>Enables switching between the three sort states: ascending, descending and not sorted.</td></tr>
    </table>
</div>

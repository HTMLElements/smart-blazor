@namespace Smart.Blazor
<div>

  <h2 id="ToastProperties"><a id="Toast_properties" href="javascript: void(0)" class="anchor"><strong>Toast</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Animation</td><td>Animation</td><td>Animation.Advanced</td><td>Sets or gets the animation mode. Animation is disabled when the property is set to <strong>'none'</strong></td></tr>
      <tr><td>AppendTo</td><td>object</td><td>N/A</td><td>Specifies the container where new openned toast items will be displayed. The value can be an <strong>HTMLElement</strong> or element's <strong>id</strong>. This property is in relation with <strong>modal</strong>(lower priority than modal) and <strong>position</strong>(higher priority than position) properties.</td></tr>
      <tr><td>AutoClose</td><td>bool</td><td>false</td><td>Sets or gets whether the toast will automatically close after duration equal to the <strong>autoCloseDelay</strong> property.</td></tr>
      <tr><td>AutoCloseDelay</td><td>int</td><td>3000</td><td>Sets or gets the duration after which the toast automatically closes (works only if the <strong>autoClose</strong> property is set to true).</td></tr>
      <tr><td>AutoOpen</td><td>bool</td><td>false</td><td>Sets whether the toast will open automatically immediately after widget's initialization.</td></tr>
      <tr><td>Disabled</td><td>bool</td><td>false</td><td>The user will not be able to interact with toast items when disabled is set to true.</td></tr>
      <tr><td>IconClass</td><td>string</td><td>&quot;null&quot;</td><td>Sets custom icon className which overrides the default one. Multiple class names can be applied by separating them with a space. Useful when loading from a third-party icon library (such as Bootstrap).</td></tr>
      <tr><td>ItemClass</td><td>string</td><td>&quot;null&quot;</td><td>Adds a custom class to Toast items. Multiple class names can be applied by separating them with a space. Useful when styling by using predefined class names from a third-party CSS library (such as Bootstrap).</td></tr>
      <tr><td>ItemTemplate</td><td>string</td><td>&quot;null&quot;</td><td>Sets custom item template.</td></tr>
      <tr><td>Locale</td><td>string</td><td>&quot;en&quot;</td><td>Sets or gets the language. Used in conjunction with the property <strong>messages</strong>. </td></tr>
      <tr><td>LocalizeFormatFunction</td><td>object</td><td>N/A</td><td>Callback, related to localization module. </td></tr>
      <tr><td>Messages</td><td>object</td><td>N/A</td><td>Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property <strong>locale</strong>. </td></tr>
      <tr><td>Modal</td><td>bool</td><td>false</td><td>In modal mode the toast item is positioned in the center of the screen. This property is with higher priority than <strong>position</strong> and <strong>appendTo</strong>. If <strong>modal</strong> is set to true these properties are disregarded.</td></tr>
      <tr><td>Position</td><td>ToastPosition</td><td>ToastPosition.TopRight</td><td>Sets the part of the browser window where the toast will be positioned. The position property is disregarded if <strong>appendTo</strong> or <strong>modal</strong> are set.</td></tr>
      <tr><td>Readonly</td><td>bool</td><td>false</td><td>If the element is readonly, users cannot interact with it.</td></tr>
      <tr><td>RightToLeft</td><td>bool</td><td>false</td><td>Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.</td></tr>
      <tr><td>ShowCloseButton</td><td>bool</td><td>false</td><td>Sets or gets whether to show the toast item's close button.</td></tr>
      <tr><td>Theme</td><td>string</td><td>&quot;&quot;</td><td>Determines the theme. Theme defines the look of the element</td></tr>
      <tr><td>Type</td><td>ToastType</td><td>ToastType.Info</td><td>Sets speciffic CSS settings and icon to the toast items.</td></tr>
      <tr><td>Unfocusable</td><td>bool</td><td>false</td><td>If is set to true, the element cannot be focused.</td></tr>
      <tr><td>Value</td><td>object</td><td></td><td>Sets a text value to an toast item.</td></tr>
  </table>
  <h2 id="ToastMethods"><a id="Toast_methods" href="javascript: void(0)" class="anchor"><strong>Toast</strong> Methods</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Arguments</th><th>Description</th></tr>
      <tr><td>CloseAll</td><td>void</td><td>N/A</td><td>Closes all opened toast items.</td></tr>
      <tr><td>CloseItem</td><td>void</td><td>object item</td><td>Closes particular toast item.</td></tr>
      <tr><td>CloseLast</td><td>void</td><td>N/A</td><td>Closes the last opened toast item.</td></tr>
      <tr><td>Open</td><td>object</td><td>N/A</td><td>Opens a new toast item and returns the opened smart-toast-item instance. </td></tr>
  </table>
  <h2 id="ToastEvents"><a id="Toast_events" href="javascript: void(0)" class="anchor"><strong>Toast</strong> Events</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Description</th><th>Event Detail</th></tr>
      <tr><td>OnClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the toast item is clicked.</td><td>N/A</td></tr>
      <tr><td>Clicked</td><td>event ToastClickedEventHandler</td><td>This event is triggered when the toast item is clicked.</td><td>ToastClickedEventArgs</td></tr>
      <tr><td>OnClose</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the toast item is closed.</td><td>N/A</td></tr>
      <tr><td>Closed</td><td>event ToastClosedEventHandler</td><td>This event is triggered when the toast item is closed.</td><td>ToastClosedEventArgs</td></tr>
      <tr><td>OnOpen</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the toast item is opened.</td><td>N/A</td></tr>
      <tr><td>Opened</td><td>event ToastOpenedEventHandler</td><td>This event is triggered when the toast item is opened.</td><td>ToastOpenedEventArgs</td></tr>
      <tr><td>OnSwipebottom</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered on swipebottom over an toast item.</td><td>N/A</td></tr>
      <tr><td>Swipebottomed</td><td>event ToastSwipebottomedEventHandler</td><td>This event is triggered on swipebottom over an toast item.</td><td>ToastSwipebottomedEventArgs</td></tr>
      <tr><td>OnSwipeleft</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered on swipeleft over an toast item.</td><td>N/A</td></tr>
      <tr><td>SwipedLeft</td><td>event ToastSwipedLeftEventHandler</td><td>This event is triggered on swipeleft over an toast item.</td><td>ToastSwipedLeftEventArgs</td></tr>
      <tr><td>OnSwiperight</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered on swiperight over an toast item.</td><td>N/A</td></tr>
      <tr><td>SwipeRight</td><td>event ToastSwipeRightEventHandler</td><td>This event is triggered on swiperight over an toast item.</td><td>ToastSwipeRightEventArgs</td></tr>
      <tr><td>OnSwipetop</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered on swipetop over an toast item.</td><td>N/A</td></tr>
      <tr><td>Swipetoped</td><td>event ToastSwipetopedEventHandler</td><td>This event is triggered on swipetop over an toast item.</td><td>ToastSwipetopedEventArgs</td></tr>
    </table>
</div>

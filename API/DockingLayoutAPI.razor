@namespace Smart.Blazor
<div>

  <h2 id="DockingLayoutProperties"><a id="DockingLayout_properties" href="javascript: void(0)" class="anchor"><strong>DockingLayout</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>Animation</td><td>Animation</td><td>Animation.Advanced</td><td>Sets or gets the animation mode. Animation is disabled when the property is set to <strong>'none'</strong></td></tr>
      <tr><td>AutoHideItems</td><td>object[]</td><td>new List&lt;object[]&gt;()</td><td>A getter that returns an array of all DockingLayout items that are auto hidden inside the element.</td></tr>
      <tr><td>AutoLoadState</td><td>bool</td><td>false</td><td>Enable/Disable the automatic state loading. There must be a previously saved state of the Layout in order to load it.</td></tr>
      <tr><td>AutoSaveState</td><td>bool</td><td>false</td><td>Enable/Disable the automatic state saving. <br/><strong>Note</strong>: In order to save the state of the element it must have an id.</td></tr>
      <tr><td>Disabled</td><td>bool</td><td>false</td><td>Enables or disables the element.</td></tr>
      <tr><td>Draggable</td><td>bool</td><td>true</td><td>If set to false it will disable the dragging of DockingLayout items. If set items can only be repositioned using the API methods.</td></tr>
      <tr><td>Floatable</td><td>bool</td><td>true</td><td>If set to false it will disable item floating. This means that if a Window is floated as a result of dragging it will be returned back ot it's original position instead of being floated outside the DockingLayout. Already floated LayoutPanel items will not be affected.</td></tr>
      <tr><td>HideSplitterBars</td><td>bool</td><td>false</td><td>Hides all splitter bars inside the element.</td></tr>
      <tr><td>Items</td><td>object[]</td><td>new List&lt;object[]&gt;()</td><td>A getter that returns an array of all DockingLayout items that are docked inside the element.</td></tr>
      <tr><td>ClosedItems</td><td>object[]</td><td>new List&lt;object[]&gt;()</td><td>A getter that returns an array of all DockingLayout items that have been closed.</td></tr>
      <tr><td>Layout</td><td>object[]</td><td>new List&lt;object[]&gt;()</td><td>Determines the structure of the element. This property represents an array of objects that define the hierarchy of the items inside the element and their specific settings. Each object must have a <strong>type</strong> attribute that defines it's behavior. <br /> Three <strong>types</strong> of objects are allowed: <br /> <ul> <li><strong>LayoutGroup</strong> - Represents a group of items (Splitter). Used when the user wants more than one DockingLayout item in a single container. <br/> Properties:<ul> <li>orientation - A string value indicating the orientation of the Splitter group. Possible values: 'horizontal', 'vertical'.</li> <li>size - A string | number value indicating the size of the Splitter group.</li> <li>items - An array of LayoutPanel object definitions.</li> <li>resizeMode - A string indicating the resize mode. Possible values: 'none', 'adjacent', 'end', 'proportional'.</li> <li>resizeStep - A nummeric value that determines the step of resizing.</li> <li>liveResize - Determines if splitter resizing happens while dragging or not.</li> </ul> </li> <li><strong>LayoutPanel</strong> - Represents a DockingLayout item (TabsWindow). LayoutPanels can have one or many items (TabItem). <br/> Properties: <ul> <li> id - the ID of the LayoutPanel.</li> <li>autoHide - a boolean property that determines if the LayoutPanel is autoHidden.</li> <li>autoHidePosition - determines the autoHide position of the item if 'autoHide' property is set. Possible values: 'top', 'bottom', 'left', 'right'.</li> <li>dropPosition - Determines the possible positions for the item at which a new item can be dropped as a result of dragging. Possible values: 'top', 'bottom', 'left', 'right', 'center', 'header', 'layout-top', 'layout-bottom', 'layout-left', 'layout-right'. Positions with the 'layout' prefix reflect on LayoutPanelItems that are children of the LayoutPanel.</li> <li>label - the Label of the LayoutPanel window.</li> <li>tabPosition - Determines the position of the Tab labels inside the LayoutPanel.</li> <li>layout - determines the DockingLayout owner of the LayoutPanel. Accepts a string indicating the ID of a DockingLayout on the page or a direct reference to it.</li> <li>headerButtons - an Array of strings that define the buttons in the header section of the DockingLayout item.</li> <li>tabCloseButtons - a boolean property that Enables or disables the close buttons inside each Tab item label inside the DockingLayout item.</li> <li>tabOverflow - same as 'overflow' property of jqxTabs. It defines the overflow mode of the labels of the Tab items inside a DockingLayout item.</li><li>selectionMode - the same as jqxTabs selection modes. Applies to Tab items inside a DockingLayout item.</li> <li>tabResize - the same as 'resize' property of jqxTabs. Allows resizing the Tab labels inside the DockingLayout item.</li> <li>locked - Locks the size of the item and does not allow resizing.</li> <li>max - sets the maximum size of the item.</li> <li>min - sets the minimum size of the item</li> <li>size - sets the size of the item.</li> <li>items - an array of objects. Each object defines the structure of a LayoutPanelItem.</li> </ul> </li> <li><strong>LayoutPanelItem</strong> - Represents a LayoutPanel item (TabItem). <br />Properties: <ul> <li>id - the ID of the Tab item.</li> <li>label - a string representing the label of the Tab item.</li> <li>content - represents the content of the Tab item. Can be anything.</li> <li>selected - determines if the item is selected. By default the first added item to the LayoutPanel is automatically selected.</li> <li>disableDrag - a boolean property that disables the dragging of the Tab item.</li> </ul> </li> </ul> <br/></td></tr>
      <tr><td>LiveResize</td><td>bool</td><td>false</td><td>When enabled the resizing operation happens live. By default this feature is not enabled and the user sees a hightlighted bar while dragging instead of the actual splitter bar.</td></tr>
      <tr><td>Locale</td><td>string</td><td>&quot;en&quot;</td><td>Sets or gets the language. Used in conjunction with the property <strong>messages</strong>. </td></tr>
      <tr><td>LocalizeFormatFunction</td><td>object</td><td>N/A</td><td>Callback, related to localization module. </td></tr>
      <tr><td>Messages</td><td>object</td><td>N/A</td><td>Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property <strong>locale</strong>. </td></tr>
      <tr><td>Readonly</td><td>bool</td><td>false</td><td>If the element is readonly, users cannot interact with it.</td></tr>
      <tr><td>RightToLeft</td><td>bool</td><td>false</td><td>Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.</td></tr>
      <tr><td>ResizeStep</td><td>int</td><td>5</td><td>Determines the resize step during reisizing</td></tr>
      <tr><td>SnapMode</td><td>DockingLayoutSnapMode</td><td>DockingLayoutSnapMode.Advanced</td><td>Determines the snap mode. Two modes are available: <ul> <li> <strong>simple</strong> - allows dragging of a single tab item inside or outside the layout. A semi-transparent highlighter is used to indicate the possible locations where the dragged item can be dropped. The user has to drop the dragged item inside one of the possible drop zones indicated by the highlighter.</li> <li><strong>advanced</strong> - allows dragging of a whole TabsWindow with items or a single tab item. Uses a Visual Studio style feedback that indicates the possible drop locations. The user has to drop the target over one of the icons inside the feedback.</li> </ul> <br/> The feedback/highlighter is displayed when the dragging of an item begins. </td></tr>
      <tr><td>Theme</td><td>string</td><td>&quot;&quot;</td><td>Determines the theme. Theme defines the look of the element</td></tr>
      <tr><td>UndockedItems</td><td>object[]</td><td>new List&lt;object[]&gt;()</td><td>A getter that returns an array of all DockingLayout items that have been undocked. Undocked items are no more part of the Layout's interal structure but can be inserted by dragging them in.</td></tr>
      <tr><td>Unfocusable</td><td>bool</td><td>false</td><td>If is set to true, the element cannot be focused.</td></tr>
  </table>
  <h2 id="DockingLayoutMethods"><a id="DockingLayout_methods" href="javascript: void(0)" class="anchor"><strong>DockingLayout</strong> Methods</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Arguments</th><th>Description</th></tr>
      <tr><td>AutoHideBottom</td><td>void</td><td>object node</td><td>Makes a "smart-tabs-window" node, that is a child of the Layout, auto hidden by placing it at the Bottom position inside the element. This means that the item will be positioned near the bottom side of the layout and it's content will be hidden until the user selects one of it's labels.</td></tr>
      <tr><td>AutoHideLeft</td><td>void</td><td>object node</td><td>Makes a "smart-tabs-window" node, that is a child of the Layout, auto hidden by placing it at the Left position inside the layout. This means that the item will be positioned near the left side of the layout and it's content will be hidden until the user selects one of it's labels.</td></tr>
      <tr><td>AutoHideRight</td><td>void</td><td>object node</td><td>Makes a "smart-tabs-window" node, that is a child of the Layout, auto hidden by placing it at the Right position inside the layout. This means that the item will be positioned near the right side of the layout and it's content will be hidden until the user selects one of it's labels.</td></tr>
      <tr><td>AutoHideTop</td><td>void</td><td>object node</td><td>Makes a "smart-tabs-window" node, that is a child of the Layout, auto hidden by placing it at the Top position inside the layout. This means that the item will be positioned near the top side of the layout and it's content will be hidden until the user selects one of it's labels.</td></tr>
      <tr><td>ClearState</td><td>void</td><td>N/A</td><td>Clears the localStorage of any previous cached state of the DockingLayout.</td></tr>
      <tr><td>Dock</td><td>dynamic</td><td>object node</td><td>The method will reset an autohidden item to it's normal behavior and re-insert it at a specified position. It can also be used to insert items into the DockingLayout. <strong>Note:</strong> Items inserted via this method are added as a top level items.</td></tr>
      <tr><td>InsertBeforeItem</td><td>void</td><td>object index, object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted before the target item which corresponds to the index passed as the first argument to the method.</td></tr>
      <tr><td>InsertAfterItem</td><td>void</td><td>object index, object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted after the target item which corresponds to the index passed as the first argument to the method.</td></tr>
      <tr><td>InsertIntoLeft</td><td>void</td><td>object index, object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted by splitting  the target item which corresponds to the index passed as the first argument to the method in two and placing the new item as it's left neighbour horizontally.</td></tr>
      <tr><td>InsertIntoRight</td><td>void</td><td>object index, object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted by splitting  the target item which corresponds to the index passed as the first argument to the method in two and placing the new item as it's right neighbour horizontally.</td></tr>
      <tr><td>InsertIntoTop</td><td>void</td><td>object index, object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted by splitting  the target item which corresponds to the index passed as the first argument to the method in two and placing the new item as it's top neighbour vertically.</td></tr>
      <tr><td>InsertIntoBottom</td><td>void</td><td>object index, object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted by splitting  the target item which corresponds to the index passed as the first argument to the method in two and placing the new item as it's bottom neighbour vertically.</td></tr>
      <tr><td>InsertLayoutTop</td><td>void</td><td>object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted as a top level item positioned at the top side inside the Layout.</td></tr>
      <tr><td>InsertLayoutBottom</td><td>void</td><td>object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted as a top level item positioned at the bottom side inside the Layout.</td></tr>
      <tr><td>InsertLayoutLeft</td><td>void</td><td>object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted as a top level item positioned at the left side inside the Layout.</td></tr>
      <tr><td>InsertLayoutRight</td><td>void</td><td>object item</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The new item is inserted as a top level item positioned at the right inside the Layout.</td></tr>
      <tr><td>InsertOutsideTargetGroupTop</td><td>void</td><td>object index, object tabsWindow</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The target item and it's neighbour items are placed inside a new splitter item that acts as the new neghbour of the newly added item via this method. The new item is inserted above the target ( at position Top).</td></tr>
      <tr><td>InsertOutsideTargetGroupBottom</td><td>void</td><td>object index, object tabsWindow</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The target item and it's neighbour items are placed inside a new splitter item that acts as the new neghbour of the newly added item via this method. The new item is inserted bellow the target ( at position Bottom).</td></tr>
      <tr><td>InsertOutsideTargetGroupLeft</td><td>void</td><td>object index, object tabsWindow</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The target item and it's neighbour items are placed inside a new splitter item that acts as the new neghbour of the newly added item via this method. The new item is inserted before the target ( at position Left).</td></tr>
      <tr><td>InsertOutsideTargetGroupRight</td><td>void</td><td>object index, object tabsWindow</td><td>Inserts a new TabsWindow into the DockingLayout or creates a TabsWindow instance from an object passed as the second argument. The target item and it's neighbour items are placed inside a new splitter item that acts as the new neghbour of the newly added item via this method. The new item is inserted after the target ( at position Right).</td></tr>
      <tr><td>GetAutoHideItems</td><td>IEnumerable&lt;object&gt;</td><td>string orientation</td><td>The method returns an array of all autohidden items.</td></tr>
      <tr><td>GetIndex</td><td>int</td><td>object node</td><td>The method returns the index of a target item.</td></tr>
      <tr><td>GetState</td><td>IEnumerable&lt;object&gt;</td><td>bool noInstances</td><td>Returns an array of objects representing the current structure of the element. Each object represents a Layout item with it's settings and hierarchy.</td></tr>
      <tr><td>GetItemGroupElement</td><td>object</td><td>object item</td><td>Returns the Splitter parent of a Layout item</td></tr>
      <tr><td>GetJSONStructure</td><td>IEnumerable&lt;object&gt;</td><td>N/A</td><td>Returns a JSON array of objects representing the current structure of the element. Ready to be persisted to LocalStorage.</td></tr>
      <tr><td>LoadState</td><td>void</td><td>IEnumerable&lt;object&gt; state</td><td>Loads a previously saved state of the element. If no state is provided as an argument the method will do a localStorage lookup.</td></tr>
      <tr><td>RemoveAt</td><td>void</td><td>object index</td><td>Removes a DockingLayout item (TabsWindow) from the element.</td></tr>
      <tr><td>RemoveAll</td><td>void</td><td>N/A</td><td>Removes all items from the element.</td></tr>
      <tr><td>RemoveChild</td><td>dynamic</td><td>dynamic node</td><td>Removes a "smart-tabs-window" node that is a DockingLayout item.</td></tr>
      <tr><td>SaveState</td><td>void</td><td>N/A</td><td>Saves the current state of the DockingLayout to LocalStorage. The state includes the hierarchy and size of the items.</td></tr>
      <tr><td>Undock</td><td>void</td><td>object node</td><td>The method undocks/removes an item from the Layout and places it at the same position but it's no more part of the layout. The item becomes an 'outher' item that can be reinserted at any time.</td></tr>
      <tr><td>Update</td><td>void</td><td>object index, object settings</td><td>Updates a TabsWindow and it's contents.</td></tr>
  </table>
  <h2 id="DockingLayoutEvents"><a id="DockingLayout_events" href="javascript: void(0)" class="anchor"><strong>DockingLayout</strong> Events</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Description</th><th>Event Detail</th></tr>
      <tr><td>OnChange</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the tab selection is changed. &quot;Note:&quot; Change event may be thrown by other JQX Custom Elements nested inside the Tab items.</td><td>N/A</td></tr>
      <tr><td>Changed</td><td>event DockingLayoutChangedEventHandler</td><td>This event is triggered when the tab selection is changed. &quot;Note:&quot; Change event may be thrown by other JQX Custom Elements nested inside the Tab items.</td><td>DockingLayoutChangedEventArgs</td></tr>
      <tr><td>OnClose</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when a Tab item or a whole Tabs Window item ( DockingLayout item ) is closed.</td><td>N/A</td></tr>
      <tr><td>Closed</td><td>event DockingLayoutClosedEventHandler</td><td>This event is triggered when a Tab item or a whole Tabs Window item ( DockingLayout item ) is closed.</td><td>DockingLayoutClosedEventArgs</td></tr>
      <tr><td>OnClosing</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when a Tab item/Tabs Window is about to be closed. The closing operation can be canceled by calling event.preventDefault() in the event handler function.</td><td>N/A</td></tr>
      <tr><td>Closing</td><td>event DockingLayoutClosingEventHandler</td><td>This event is triggered when a Tab item/Tabs Window is about to be closed. The closing operation can be canceled by calling event.preventDefault() in the event handler function.</td><td>DockingLayoutClosingEventArgs</td></tr>
      <tr><td>OnStateChange</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when an item's position inside the Layout or it's size has been changed. Indicates that a state change has occured.</td><td>N/A</td></tr>
      <tr><td>StateChanged</td><td>event DockingLayoutStateChangedEventHandler</td><td>This event is triggered when an item's position inside the Layout or it's size has been changed. Indicates that a state change has occured.</td><td>DockingLayoutStateChangedEventArgs</td></tr>
      <tr><td>OnResizeStart</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when item resizing begins.</td><td>N/A</td></tr>
      <tr><td>ResizeStarted</td><td>event DockingLayoutResizeStartedEventHandler</td><td>This event is triggered when item resizing begins.</td><td>DockingLayoutResizeStartedEventArgs</td></tr>
      <tr><td>OnResizeEnd</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when item resizing finishes.</td><td>N/A</td></tr>
      <tr><td>ResizeEnded</td><td>event DockingLayoutResizeEndedEventHandler</td><td>This event is triggered when item resizing finishes.</td><td>DockingLayoutResizeEndedEventArgs</td></tr>
    </table>
</div>

@namespace Smart.Blazor
<div>

  <h2 id="QueryBuilderProperties"><a id="QueryBuilder_properties" href="javascript: void(0)" class="anchor"><strong>QueryBuilder</strong> Properties</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>
      <tr><td>AllowDrag</td><td>bool</td><td>false</td><td>Enables the dragging of conditions inside a group or between groups.</td></tr>
      <tr><td>Animation</td><td>Animation</td><td>Animation.Advanced</td><td>Sets or gets the animation mode. Animation is disabled when the property is set to <strong>'none'</strong></td></tr>
      <tr><td>ApplyMode</td><td>QueryBuilderApplyMode</td><td>QueryBuilderApplyMode.Change</td><td>Determines when the value of the element is updated with the new changes.</td></tr>
      <tr><td>CustomOperations</td><td>object</td><td>N/A</td><td>Adds more operations that can be used to the query bilder's conditions structure. Each custom operation can have the following fields:<ul><li>label - label to be displayed in the operator box. Multiple operations with the same label can exist.</li><li>name - unique name of the operation</li><li>editorTemplate - callback function that creates a custom value editor</li><li>valueTemplate - callback function that displays the value after the edior has been closed</li><li>handleValue - callback function that handles the value returned by the editor when it is closed</li><li>hideValue - a boolean condition that specifies whether the operation requires a value or not</li><li>expressionTemplate - a string representing a custom Linq expression template. If the value of the element is a string it will be considered as a Linq expression and it will be checked against all expressionTemplates to find a match.</li><li>expressionReaderCallback - a callback that is used to specify which arguments from the expression are used for the fieldName and value. Used when converting a Linq expression to QueryBuilder value.</li><li>expressionBuilderCallback - a callback function that is used to specify which arguments from the Linq expression are used for the fieldName and value when building the Linq expression from the current value of the element.</li></ul></td></tr>
      <tr><td>Disabled</td><td>bool</td><td>false</td><td>Enables or disables the element.</td></tr>
      <tr><td>DropDownWidth</td><td>string</td><td>&quot;100%&quot;</td><td>Sets or gets the dropdown width of the property and operator editors.</td></tr>
      <tr><td>Fields</td><td>object</td><td>N/A</td><td>Array with filter fields and their settings. The available field settings are:<ul><li>label - the field's label, as it will appear in the field selection drop down</li><li>dataField - the field's data field</li><li>dataType - the field's data type</li><li>filterOperations - an array of the filter operations applicable to the field; if not set, the default filter operations are applied</li><li>lookup - an object with settings for customizing the field's respective value selection input. It has the following settings:<ul><li>autoCompleteDelay - delay between typing in the input and opening the drop down with available options</li><li>dataSource - an array of available options to choose from (appear in a drop down)</li><li>minLength - minimum number of charactes to type in the input before the options drop down is displayed</li><li>readonly - if set to <em>true</em>, the value selection input acts as a drop down list, otherwise it acts as a combo box</li></ul></li></ul></td></tr>
      <tr><td>FieldsMode</td><td>QueryBuilderFieldsMode</td><td>QueryBuilderFieldsMode.Dynamic</td><td>Determines whether new fields can be dynamically added by typing in the field (property) box.</td></tr>
      <tr><td>FormatStringDate</td><td>string</td><td>&quot;dd-MMM-yy&quot;</td><td>Sets or gets the format string of the editor of fields with type <em>'date'</em>.</td></tr>
      <tr><td>FormatStringDateTime</td><td>string</td><td>&quot;dd-MMM-yy HH:mm:ss&quot;</td><td>Sets or gets the format string of the editor of fields with type <em>'dateTime'</em>.</td></tr>
      <tr><td>GetDynamicField</td><td>object</td><td>N/A</td><td>A callback function called when a field is added dynamically. Used for configuring settings of the new field. Applicable only when <b>fieldsMode</b> is <em>'dynamic'</em>.</td></tr>
      <tr><td>Icons</td><td>object</td><td>{ '=': 'equals', '&lt;&gt;': 'notequals', '&gt;': 'greaterthan', '&gt;=': 'greaterthanorequal', '&lt;': 'lessthan', '&lt;=': 'lessthanorequal', 'startswith': 'startswith', 'endswith': 'endswith', 'contains': 'contains', 'notcontains': 'notcontains', 'isblank': 'isblank', 'isnotblank': 'isnotblank' }</td><td>Defines CSS classes to be applied to each of the built-in operations. Icons for these classes are applied in the jqx-query-builder style sheet. This property is applicable only if <strong>showIcons</strong> is set to <em>true</em>.</td></tr>
      <tr><td>Locale</td><td>string</td><td>&quot;en&quot;</td><td>Sets or gets the language. Used in conjunction with the property <strong>messages</strong>. </td></tr>
      <tr><td>LocalizeFormatFunction</td><td>object</td><td>N/A</td><td>Callback used to customize the format of the messages that are returned from the Localization Module.</td></tr>
      <tr><td>Messages</td><td>object</td><td>N/A</td><td>Defines field names of the filtered element.</td></tr>
      <tr><td>OperatorPlaceholder</td><td>string</td><td>&quot;Operator&quot;</td><td>Determines the placeholder text used inside the condition's operator box in case an operator is not selected.</td></tr>
      <tr><td>PropertyPlaceholder</td><td>string</td><td>&quot;Property&quot;</td><td>Determines the placeholder text used inside the condition's field (property) box in case a field is not selected.</td></tr>
      <tr><td>RightToLeft</td><td>bool</td><td>false</td><td>Sets or gets the value indicating whether the element is aligned to support locales using right-to-left fonts.</td></tr>
      <tr><td>ShowIcons</td><td>bool</td><td>false</td><td>Shows/Hides the operator icons shown in the operator selection drop down.</td></tr>
      <tr><td>Theme</td><td>string</td><td>&quot;&quot;</td><td>Determines the theme. Theme defines the look of the element</td></tr>
      <tr><td>Unfocusable</td><td>bool</td><td>false</td><td>If is set to true, the element cannot be focused.</td></tr>
      <tr><td>Value</td><td>object</td><td>N/A</td><td>The value is represented by multidimensional array. The array contains group operators with conditions. Each group can contain multiple conditions.</td></tr>
      <tr><td>ValueFormatFunction</td><td>object</td><td>N/A</td><td>Callback used to format the content of the value fields.</td></tr>
      <tr><td>ValuePlaceholder</td><td>string</td><td>&quot;Value&quot;</td><td>Determines the placeholder text used inside the condition's value box in case a value is not set.</td></tr>
  </table>
  <h2 id="QueryBuilderMethods"><a id="QueryBuilder_methods" href="javascript: void(0)" class="anchor"><strong>QueryBuilder</strong> Methods</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Arguments</th><th>Description</th></tr>
      <tr><td>GetLinq</td><td>string</td><td>N/A</td><td>Converts the current value of the element to DynamicLINQ expression.</td></tr>
  </table>
  <h2 id="QueryBuilderEvents"><a id="QueryBuilder_events" href="javascript: void(0)" class="anchor"><strong>QueryBuilder</strong> Events</a></h2>
  <table class="table">
      <tr><th>Name</th><th>Type</th><th>Description</th><th>Event Detail</th></tr>
      <tr><td>OnChange</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when the query builder's value is changed.</td><td>dynamic item, dynamic data, dynamic originalEvent</td></tr>
      <tr><td>Changed</td><td>event QueryBuilderChangedEventHandler</td><td>This event is triggered when the query builder's value is changed.</td><td>QueryBuilderChangedEventArgs</td></tr>
      <tr><td>OnDragEnd</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when a dragged condition is dropped. This action can be canceled by calling event.preventDefault() in the event handler function.</td><td>dynamic item, dynamic data, dynamic target, dynamic targetData, string targetSide</td></tr>
      <tr><td>DragEnded</td><td>event QueryBuilderDragEndedEventHandler</td><td>This event is triggered when a dragged condition is dropped. This action can be canceled by calling event.preventDefault() in the event handler function.</td><td>QueryBuilderDragEndedEventArgs</td></tr>
      <tr><td>OnDragging</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when a condition is being dragged.</td><td>dynamic item, dynamic data, dynamic originalEvent</td></tr>
      <tr><td>Dragging</td><td>event QueryBuilderDraggingEventHandler</td><td>This event is triggered when a condition is being dragged.</td><td>QueryBuilderDraggingEventArgs</td></tr>
      <tr><td>OnDragStart</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when a dragging operation is started in jqx-query-builder. This action can be canceled by calling event.preventDefault() in the event handler function.</td><td>dynamic item, dynamic data, dynamic originalEvent</td></tr>
      <tr><td>DragStarted</td><td>event QueryBuilderDragStartedEventHandler</td><td>This event is triggered when a dragging operation is started in jqx-query-builder. This action can be canceled by calling event.preventDefault() in the event handler function.</td><td>QueryBuilderDragStartedEventArgs</td></tr>
      <tr><td>OnItemClick</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when one of the query builder's building blocks ( oeprator, fieldName, value, close button, etc) is clicked.</td><td>string id, dynamic type, dynamic data</td></tr>
      <tr><td>ItemClicked</td><td>event QueryBuilderItemClickedEventHandler</td><td>This event is triggered when one of the query builder's building blocks ( oeprator, fieldName, value, close button, etc) is clicked.</td><td>QueryBuilderItemClickedEventArgs</td></tr>
      <tr><td>OnPropertySelected</td><td>EventCallback&lt;Event&gt;</td><td>This event is triggered when a field has been selected.</td><td>string label, dynamic value</td></tr>
      <tr><td>PropertySelected</td><td>event QueryBuilderPropertySelectedEventHandler</td><td>This event is triggered when a field has been selected.</td><td>QueryBuilderPropertySelectedEventArgs</td></tr>
    </table>
</div>
